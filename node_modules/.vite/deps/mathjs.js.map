{
  "version": 3,
  "sources": ["../../complex.js/complex.js", "../../fraction.js/fraction.js", "../../mathjs/lib/esm/factoriesAny.js", "../../mathjs/lib/esm/type/bignumber/BigNumber.js", "../../mathjs/lib/esm/type/complex/Complex.js", "../../mathjs/lib/esm/type/fraction/Fraction.js", "../../mathjs/lib/esm/type/matrix/Matrix.js", "../../mathjs/lib/esm/type/matrix/DenseMatrix.js", "../../mathjs/lib/esm/function/utils/isInteger.js", "../../mathjs/lib/esm/function/utils/isNegative.js", "../../mathjs/lib/esm/function/utils/isPositive.js", "../../mathjs/lib/esm/function/utils/isZero.js", "../../mathjs/lib/esm/function/utils/isNaN.js", "../../mathjs/lib/esm/type/matrix/SparseMatrix.js", "../../mathjs/lib/esm/type/bignumber/function/bignumber.js", "../../mathjs/lib/esm/type/complex/function/complex.js", "../../mathjs/lib/esm/type/fraction/function/fraction.js", "../../mathjs/lib/esm/type/matrix/function/matrix.js", "../../mathjs/lib/esm/function/matrix/matrixFromFunction.js", "../../mathjs/lib/esm/function/matrix/matrixFromRows.js", "../../mathjs/lib/esm/function/matrix/matrixFromColumns.js", "../../mathjs/lib/esm/type/unit/function/splitUnit.js", "../../mathjs/lib/esm/function/arithmetic/unaryMinus.js", "../../mathjs/lib/esm/function/arithmetic/unaryPlus.js", "../../mathjs/lib/esm/function/arithmetic/abs.js", "../../mathjs/lib/esm/function/arithmetic/addScalar.js", "../../mathjs/lib/esm/function/arithmetic/cbrt.js", "../../mathjs/lib/esm/function/arithmetic/cube.js", "../../mathjs/lib/esm/function/arithmetic/exp.js", "../../mathjs/lib/esm/function/arithmetic/expm1.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo04xSidSid.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js", "../../mathjs/lib/esm/function/arithmetic/gcd.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js", "../../mathjs/lib/esm/function/arithmetic/lcm.js", "../../mathjs/lib/esm/function/arithmetic/log10.js", "../../mathjs/lib/esm/function/arithmetic/log2.js", "../../mathjs/lib/esm/function/arithmetic/mod.js", "../../mathjs/lib/esm/function/arithmetic/multiplyScalar.js", "../../mathjs/lib/esm/function/arithmetic/multiply.js", "../../mathjs/lib/esm/function/arithmetic/nthRoot.js", "../../mathjs/lib/esm/function/arithmetic/sign.js", "../../mathjs/lib/esm/function/arithmetic/sqrt.js", "../../mathjs/lib/esm/function/arithmetic/square.js", "../../mathjs/lib/esm/function/arithmetic/subtract.js", "../../mathjs/lib/esm/function/arithmetic/xgcd.js", "../../mathjs/lib/esm/function/arithmetic/invmod.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js", "../../mathjs/lib/esm/function/arithmetic/dotMultiply.js", "../../mathjs/lib/esm/utils/bignumber/bitwise.js", "../../mathjs/lib/esm/function/bitwise/bitAnd.js", "../../mathjs/lib/esm/function/bitwise/bitNot.js", "../../mathjs/lib/esm/function/bitwise/bitOr.js", "../../mathjs/lib/esm/function/bitwise/bitXor.js", "../../mathjs/lib/esm/function/complex/arg.js", "../../mathjs/lib/esm/function/complex/conj.js", "../../mathjs/lib/esm/function/complex/im.js", "../../mathjs/lib/esm/function/complex/re.js", "../../mathjs/lib/esm/function/logical/not.js", "../../mathjs/lib/esm/function/logical/or.js", "../../mathjs/lib/esm/function/logical/xor.js", "../../mathjs/lib/esm/function/matrix/concat.js", "../../mathjs/lib/esm/function/matrix/column.js", "../../mathjs/lib/esm/function/matrix/count.js", "../../mathjs/lib/esm/function/matrix/cross.js", "../../mathjs/lib/esm/function/matrix/diag.js", "../../mathjs/lib/esm/function/matrix/flatten.js", "../../mathjs/lib/esm/function/matrix/getMatrixDataType.js", "../../mathjs/lib/esm/function/matrix/identity.js", "../../mathjs/lib/esm/function/matrix/kron.js", "../../mathjs/lib/esm/function/matrix/diff.js", "../../mathjs/lib/esm/function/matrix/ones.js", "../../mathjs/lib/esm/function/matrix/reshape.js", "../../mathjs/lib/esm/function/matrix/resize.js", "../../mathjs/lib/esm/function/matrix/rotate.js", "../../mathjs/lib/esm/function/matrix/rotationMatrix.js", "../../mathjs/lib/esm/function/matrix/row.js", "../../mathjs/lib/esm/function/matrix/squeeze.js", "../../mathjs/lib/esm/function/matrix/subset.js", "../../mathjs/lib/esm/function/matrix/transpose.js", "../../mathjs/lib/esm/function/matrix/ctranspose.js", "../../mathjs/lib/esm/function/matrix/zeros.js", "../../mathjs/lib/esm/function/matrix/fft.js", "../../mathjs/lib/esm/function/matrix/ifft.js", "../../mathjs/lib/esm/function/string/bin.js", "../../mathjs/lib/esm/function/string/oct.js", "../../mathjs/lib/esm/function/string/hex.js", "../../mathjs/lib/esm/function/unit/to.js", "../../mathjs/lib/esm/function/arithmetic/divideScalar.js", "../../mathjs/lib/esm/function/arithmetic/pow.js", "../../mathjs/lib/esm/function/arithmetic/round.js", "../../mathjs/lib/esm/function/arithmetic/log.js", "../../mathjs/lib/esm/function/arithmetic/log1p.js", "../../mathjs/lib/esm/function/arithmetic/nthRoots.js", "../../mathjs/lib/esm/function/arithmetic/dotPow.js", "../../mathjs/lib/esm/function/arithmetic/dotDivide.js", "../../mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js", "../../mathjs/lib/esm/function/algebra/solver/lsolve.js", "../../mathjs/lib/esm/function/algebra/solver/usolve.js", "../../mathjs/lib/esm/function/algebra/solver/lsolveAll.js", "../../mathjs/lib/esm/function/algebra/solver/usolveAll.js", "../../mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js", "../../mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js", "../../mathjs/lib/esm/function/bitwise/leftShift.js", "../../mathjs/lib/esm/function/bitwise/rightArithShift.js", "../../mathjs/lib/esm/function/bitwise/rightLogShift.js", "../../mathjs/lib/esm/function/logical/and.js", "../../mathjs/lib/esm/function/matrix/sort.js", "../../mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js", "../../mathjs/lib/esm/type/matrix/MatrixIndex.js", "../../mathjs/lib/esm/type/matrix/FibonacciHeap.js", "../../mathjs/lib/esm/type/matrix/Spa.js", "../../mathjs/lib/esm/type/unit/Unit.js", "../../mathjs/lib/esm/type/unit/function/unit.js", "../../mathjs/lib/esm/type/matrix/function/sparse.js", "../../mathjs/lib/esm/type/unit/function/createUnit.js", "../../mathjs/lib/esm/function/trigonometry/acos.js", "../../mathjs/lib/esm/function/trigonometry/acosh.js", "../../mathjs/lib/esm/function/trigonometry/acot.js", "../../mathjs/lib/esm/function/trigonometry/acoth.js", "../../mathjs/lib/esm/function/trigonometry/acsc.js", "../../mathjs/lib/esm/function/trigonometry/acsch.js", "../../mathjs/lib/esm/function/trigonometry/asec.js", "../../mathjs/lib/esm/function/trigonometry/asech.js", "../../mathjs/lib/esm/function/trigonometry/asin.js", "../../mathjs/lib/esm/function/trigonometry/asinh.js", "../../mathjs/lib/esm/function/trigonometry/atan.js", "../../mathjs/lib/esm/function/trigonometry/atan2.js", "../../mathjs/lib/esm/function/trigonometry/atanh.js", "../../mathjs/lib/esm/function/trigonometry/trigUnit.js", "../../mathjs/lib/esm/function/trigonometry/cos.js", "../../mathjs/lib/esm/function/trigonometry/cosh.js", "../../mathjs/lib/esm/function/trigonometry/cot.js", "../../mathjs/lib/esm/function/trigonometry/coth.js", "../../mathjs/lib/esm/function/trigonometry/csc.js", "../../mathjs/lib/esm/function/trigonometry/csch.js", "../../mathjs/lib/esm/function/trigonometry/sec.js", "../../mathjs/lib/esm/function/trigonometry/sech.js", "../../mathjs/lib/esm/function/trigonometry/sin.js", "../../mathjs/lib/esm/function/trigonometry/sinh.js", "../../mathjs/lib/esm/function/trigonometry/tan.js", "../../mathjs/lib/esm/function/trigonometry/tanh.js", "../../mathjs/lib/esm/function/set/setCartesian.js", "../../mathjs/lib/esm/function/set/setDifference.js", "../../mathjs/lib/esm/function/set/setDistinct.js", "../../mathjs/lib/esm/function/set/setIntersect.js", "../../mathjs/lib/esm/function/set/setIsSubset.js", "../../mathjs/lib/esm/function/set/setMultiplicity.js", "../../mathjs/lib/esm/function/set/setPowerset.js", "../../mathjs/lib/esm/function/set/setSize.js", "../../mathjs/lib/esm/function/set/setSymDifference.js", "../../mathjs/lib/esm/function/set/setUnion.js", "../../mathjs/lib/esm/function/arithmetic/add.js", "../../mathjs/lib/esm/function/arithmetic/norm.js", "../../mathjs/lib/esm/function/matrix/dot.js", "../../mathjs/lib/esm/function/matrix/trace.js", "../../mathjs/lib/esm/type/matrix/function/index.js", "../../mathjs/lib/esm/function/algebra/decomposition/lup.js", "../../mathjs/lib/esm/function/algebra/decomposition/qr.js", "../../mathjs/lib/esm/function/algebra/sparse/csPermute.js", "../../mathjs/lib/esm/function/algebra/sparse/csTdfs.js", "../../mathjs/lib/esm/function/algebra/sparse/csPost.js", "../../mathjs/lib/esm/function/algebra/sparse/csEtree.js", "../../mathjs/lib/esm/function/algebra/sparse/csFkeep.js", "../../mathjs/lib/esm/function/algebra/sparse/csFlip.js", "../../mathjs/lib/esm/function/algebra/sparse/csAmd.js", "../../mathjs/lib/esm/function/algebra/sparse/csLeaf.js", "../../mathjs/lib/esm/function/algebra/sparse/csCounts.js", "../../mathjs/lib/esm/function/algebra/sparse/csSqr.js", "../../mathjs/lib/esm/function/algebra/sparse/csMarked.js", "../../mathjs/lib/esm/function/algebra/sparse/csMark.js", "../../mathjs/lib/esm/function/algebra/sparse/csUnflip.js", "../../mathjs/lib/esm/function/algebra/sparse/csDfs.js", "../../mathjs/lib/esm/function/algebra/sparse/csReach.js", "../../mathjs/lib/esm/function/algebra/sparse/csSpsolve.js", "../../mathjs/lib/esm/function/algebra/sparse/csLu.js", "../../mathjs/lib/esm/function/algebra/decomposition/slu.js", "../../mathjs/lib/esm/function/algebra/sparse/csIpvec.js", "../../mathjs/lib/esm/function/algebra/solver/lusolve.js", "../../mathjs/lib/esm/function/algebra/polynomialRoot.js", "../../mathjs/lib/esm/function/matrix/det.js", "../../mathjs/lib/esm/function/matrix/inv.js", "../../mathjs/lib/esm/function/matrix/pinv.js", "../../mathjs/lib/esm/function/matrix/eigs/complexEigs.js", "../../mathjs/lib/esm/function/matrix/eigs/realSymetric.js", "../../mathjs/lib/esm/function/matrix/eigs.js", "../../mathjs/lib/esm/function/matrix/expm.js", "../../mathjs/lib/esm/function/matrix/sqrtm.js", "../../mathjs/lib/esm/function/algebra/sylvester.js", "../../mathjs/lib/esm/function/algebra/decomposition/schur.js", "../../mathjs/lib/esm/function/algebra/lyap.js", "../../mathjs/lib/esm/function/arithmetic/divide.js", "../../mathjs/lib/esm/function/geometry/distance.js", "../../mathjs/lib/esm/function/geometry/intersect.js", "../../mathjs/lib/esm/function/probability/combinations.js", "../../mathjs/lib/esm/function/probability/gamma.js", "../../mathjs/lib/esm/function/probability/lgamma.js", "../../mathjs/lib/esm/function/probability/kldivergence.js", "../../mathjs/lib/esm/function/algebra/leafCount.js", "../../mathjs/lib/esm/function/algebra/symbolicEqual.js", "../../mathjs/lib/esm/type/unit/physicalConstants.js", "../../mathjs/lib/esm/expression/transform/column.transform.js", "../../mathjs/lib/esm/expression/transform/index.transform.js", "../../mathjs/lib/esm/expression/transform/row.transform.js", "../../mathjs/lib/esm/expression/transform/subset.transform.js", "../../mathjs/lib/esm/expression/transform/concat.transform.js", "../../mathjs/lib/esm/expression/transform/diff.transform.js", "../../mathjs/lib/esm/entry/pureFunctionsAny.generated.js", "../../mathjs/lib/esm/entry/impureFunctionsAny.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBigNumberClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesComplexClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFractionClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTyped.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAbs.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEqualScalar.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrix.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSubset.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAccessorNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcos.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcosh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcoth.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcsc.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAcsch.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAddScalar.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAdd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesZeros.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAnd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsInteger.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesApply.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesApplyTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesArg.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesArrayNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAsec.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAsech.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAsin.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAsinh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAssignmentNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAtan.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAtan2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAtanh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBignumber.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFraction.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNumber.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNumeric.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDivideScalar.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEqual.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRound.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCeil.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFloor.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFix.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFormat.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNumeric.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIdentity.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsZero.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConj.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSize.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMultiply.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUnaryMinus.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSubtract.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDet.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesInv.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPow.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUnitClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAtomicMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesAvogadro.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNegative.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCombinations.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGamma.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFactorial.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLarger.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesStirlingS2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBellNumbers.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBin.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBitAnd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBitNot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBitOr.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBitXor.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesResultSet.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBlockNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBohrMagneton.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBohrRadius.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBoltzmann.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesBoolean.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCatalan.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCbrt.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesChainClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesChain.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesClone.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSmaller.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLargerEq.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSmallerEq.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRange.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesColumn.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesColumnTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCombinationsWithRep.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCompare.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCompareNatural.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCompareText.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConditionalNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConstantNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSymbolNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFunctionNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesObjectNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesOperatorNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesParenthesisNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRelationalNode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesParse.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCompile.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesComplex.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsPositive.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesComposition.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConcat.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConcatTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCos.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCosh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCoth.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCoulomb.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesProd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCount.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCreateUnit.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCross.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCsc.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCsch.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTranspose.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCtranspose.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCube.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUnaryPlus.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCumSum.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesCumSumTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDeepEqual.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDivide.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesResolve.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplifyConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplifyCore.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplify.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDerivative.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDeuteronMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDiag.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDiff.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDiffTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSqrt.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDistance.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDotDivide.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDotMultiply.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesDotPow.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesE.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEfimovFactor.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFlatten.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIm.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSign.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesQr.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRe.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSin.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUsolve.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUsolveAll.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEigs.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesElectricConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesElectronMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesElementaryCharge.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEqualText.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesErf.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesEvaluate.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesExp.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesExpm.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesExpm1.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFalse.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFaraday.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFermiCoupling.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesI.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTau.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFft.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFilter.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFilterTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFineStructure.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesFirstRadiation.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesForEach.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesForEachTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGasConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGcd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGravitationConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesGravity.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHasNumericValue.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHelpClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHelp.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHex.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesHypot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIfft.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIndex.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesInfinity.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIntersect.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMod.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesXgcd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesInvmod.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNaN.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesIsPrime.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLog.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMap.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSum.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesKldivergence.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesKlitzing.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesKron.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLN10.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLN2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLOG10E.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLOG2E.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLcm.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLeafCount.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLeftShift.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLgamma.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLog10.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLog1p.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLog2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLoschmidt.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLsolve.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLsolveAll.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSpaClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLup.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSlu.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLusolve.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNorm.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSchur.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSylvester.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesLyap.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPartitionSelect.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMedian.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMad.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMagneticConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMapTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromFunction.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromRows.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMax.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMaxTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMean.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMeanTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMin.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMinTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarMassC12.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarVolume.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesMultinomial.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNaN.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNeutronMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNthRoot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNthRoots.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesNull.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesOct.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesOnes.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesOr.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesParserClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesParser.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPermutations.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPhi.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPi.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPickRandom.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPinv.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckCharge.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckLength.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckTime.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTypeOf.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPolynomialRoot.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesPrint.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesProtonMass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesQuantileSeq.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRandom.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRandomInt.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeClass.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRationalize.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesReplacer.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesReshape.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesResize.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesReviver.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRightArithShift.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRightLogShift.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRotationMatrix.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRotate.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRow.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRowTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesRydberg.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSQRT1_2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSQRT2.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSackurTetrode.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSec.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSech.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSecondRadiation.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetCartesian.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetDifference.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetDistinct.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetIntersect.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetIsSubset.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetPowerset.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetSize.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetSymDifference.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSetUnion.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSinh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSort.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSparse.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSplitUnit.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSqrtm.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSquare.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSqueeze.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesVariance.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesStd.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesStdTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesString.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSubsetTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSumTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesSymbolicEqual.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTan.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTanh.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTo.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTrace.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesTrue.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUnequal.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUnitFunction.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUppercaseE.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesUppercasePi.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesVarianceTransform.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesVersion.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesWienDisplacement.generated.js", "../../mathjs/lib/esm/entry/dependenciesAny/dependenciesXor.generated.js", "../../mathjs/lib/esm/entry/allFactoriesAny.js"],
  "sourcesContent": ["/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = Math.cosh || function(x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = Math.sinh || function(x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n     a = a / 2;\n     b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n", "/**\n * @license Fraction.js v4.2.0 05/03/2022\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n\n    n = n < 0 ? -n : n;\n\n    var a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    var factors = {};\n\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n\n      while (n % i === 0) {\n        n/= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s+= 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n*= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throw Fraction['InvalidParameter'];\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1/= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A+= C;\n                    B+= D;\n                  } else {\n                    C+= A;\n                    D+= B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n*= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throw Fraction['InvalidParameter'];\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A+= 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A+= 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A+= 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throw Fraction['InvalidParameter'];\n      }\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d/= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d/= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n", "export { createTyped } from './core/function/typed.js';\nexport { createResultSet } from './type/resultset/ResultSet.js';\nexport { createBigNumberClass } from './type/bignumber/BigNumber.js';\nexport { createComplexClass } from './type/complex/Complex.js';\nexport { createFractionClass } from './type/fraction/Fraction.js';\nexport { createRangeClass } from './type/matrix/Range.js';\nexport { createMatrixClass } from './type/matrix/Matrix.js';\nexport { createDenseMatrixClass } from './type/matrix/DenseMatrix.js';\nexport { createClone } from './function/utils/clone.js';\nexport { createIsInteger } from './function/utils/isInteger.js';\nexport { createIsNegative } from './function/utils/isNegative.js';\nexport { createIsNumeric } from './function/utils/isNumeric.js';\nexport { createHasNumericValue } from './function/utils/hasNumericValue.js';\nexport { createIsPositive } from './function/utils/isPositive.js';\nexport { createIsZero } from './function/utils/isZero.js';\nexport { createIsNaN } from './function/utils/isNaN.js';\nexport { createTypeOf } from './function/utils/typeOf.js';\nexport { createEqualScalar } from './function/relational/equalScalar.js';\nexport { createSparseMatrixClass } from './type/matrix/SparseMatrix.js';\nexport { createNumber } from './type/number.js';\nexport { createString } from './type/string.js';\nexport { createBoolean } from './type/boolean.js';\nexport { createBignumber } from './type/bignumber/function/bignumber.js';\nexport { createComplex } from './type/complex/function/complex.js';\nexport { createFraction } from './type/fraction/function/fraction.js';\nexport { createMatrix } from './type/matrix/function/matrix.js';\nexport { createMatrixFromFunction } from './function/matrix/matrixFromFunction.js';\nexport { createMatrixFromRows } from './function/matrix/matrixFromRows.js';\nexport { createMatrixFromColumns } from './function/matrix/matrixFromColumns.js';\nexport { createSplitUnit } from './type/unit/function/splitUnit.js';\nexport { createUnaryMinus } from './function/arithmetic/unaryMinus.js';\nexport { createUnaryPlus } from './function/arithmetic/unaryPlus.js';\nexport { createAbs } from './function/arithmetic/abs.js';\nexport { createApply } from './function/matrix/apply.js';\nexport { createAddScalar } from './function/arithmetic/addScalar.js';\nexport { createCbrt } from './function/arithmetic/cbrt.js';\nexport { createCeil } from './function/arithmetic/ceil.js';\nexport { createCube } from './function/arithmetic/cube.js';\nexport { createExp } from './function/arithmetic/exp.js';\nexport { createExpm1 } from './function/arithmetic/expm1.js';\nexport { createFix } from './function/arithmetic/fix.js';\nexport { createFloor } from './function/arithmetic/floor.js';\nexport { createGcd } from './function/arithmetic/gcd.js';\nexport { createLcm } from './function/arithmetic/lcm.js';\nexport { createLog10 } from './function/arithmetic/log10.js';\nexport { createLog2 } from './function/arithmetic/log2.js';\nexport { createMod } from './function/arithmetic/mod.js';\nexport { createMultiplyScalar } from './function/arithmetic/multiplyScalar.js';\nexport { createMultiply } from './function/arithmetic/multiply.js';\nexport { createNthRoot } from './function/arithmetic/nthRoot.js';\nexport { createSign } from './function/arithmetic/sign.js';\nexport { createSqrt } from './function/arithmetic/sqrt.js';\nexport { createSquare } from './function/arithmetic/square.js';\nexport { createSubtract } from './function/arithmetic/subtract.js';\nexport { createXgcd } from './function/arithmetic/xgcd.js';\nexport { createInvmod } from './function/arithmetic/invmod.js';\nexport { createDotMultiply } from './function/arithmetic/dotMultiply.js';\nexport { createBitAnd } from './function/bitwise/bitAnd.js';\nexport { createBitNot } from './function/bitwise/bitNot.js';\nexport { createBitOr } from './function/bitwise/bitOr.js';\nexport { createBitXor } from './function/bitwise/bitXor.js';\nexport { createArg } from './function/complex/arg.js';\nexport { createConj } from './function/complex/conj.js';\nexport { createIm } from './function/complex/im.js';\nexport { createRe } from './function/complex/re.js';\nexport { createNot } from './function/logical/not.js';\nexport { createOr } from './function/logical/or.js';\nexport { createXor } from './function/logical/xor.js';\nexport { createConcat } from './function/matrix/concat.js';\nexport { createColumn } from './function/matrix/column.js';\nexport { createCount } from './function/matrix/count.js';\nexport { createCross } from './function/matrix/cross.js';\nexport { createDiag } from './function/matrix/diag.js';\nexport { createFilter } from './function/matrix/filter.js';\nexport { createFlatten } from './function/matrix/flatten.js';\nexport { createForEach } from './function/matrix/forEach.js';\nexport { createGetMatrixDataType } from './function/matrix/getMatrixDataType.js';\nexport { createIdentity } from './function/matrix/identity.js';\nexport { createKron } from './function/matrix/kron.js';\nexport { createMap } from './function/matrix/map.js';\nexport { createDiff } from './function/matrix/diff.js';\nexport { createOnes } from './function/matrix/ones.js';\nexport { createRange } from './function/matrix/range.js';\nexport { createReshape } from './function/matrix/reshape.js';\nexport { createResize } from './function/matrix/resize.js';\nexport { createRotate } from './function/matrix/rotate.js';\nexport { createRotationMatrix } from './function/matrix/rotationMatrix.js';\nexport { createRow } from './function/matrix/row.js';\nexport { createSize } from './function/matrix/size.js';\nexport { createSqueeze } from './function/matrix/squeeze.js';\nexport { createSubset } from './function/matrix/subset.js';\nexport { createTranspose } from './function/matrix/transpose.js';\nexport { createCtranspose } from './function/matrix/ctranspose.js';\nexport { createZeros } from './function/matrix/zeros.js';\nexport { createFft } from './function/matrix/fft.js';\nexport { createIfft } from './function/matrix/ifft.js';\nexport { createErf } from './function/special/erf.js';\nexport { createMode } from './function/statistics/mode.js';\nexport { createProd } from './function/statistics/prod.js';\nexport { createFormat } from './function/string/format.js';\nexport { createBin } from './function/string/bin.js';\nexport { createOct } from './function/string/oct.js';\nexport { createHex } from './function/string/hex.js';\nexport { createPrint } from './function/string/print.js';\nexport { createTo } from './function/unit/to.js';\nexport { createIsPrime } from './function/utils/isPrime.js';\nexport { createNumeric } from './function/utils/numeric.js';\nexport { createDivideScalar } from './function/arithmetic/divideScalar.js';\nexport { createPow } from './function/arithmetic/pow.js';\nexport { createRound } from './function/arithmetic/round.js';\nexport { createLog } from './function/arithmetic/log.js';\nexport { createLog1p } from './function/arithmetic/log1p.js';\nexport { createNthRoots } from './function/arithmetic/nthRoots.js';\nexport { createDotPow } from './function/arithmetic/dotPow.js';\nexport { createDotDivide } from './function/arithmetic/dotDivide.js';\nexport { createLsolve } from './function/algebra/solver/lsolve.js';\nexport { createUsolve } from './function/algebra/solver/usolve.js';\nexport { createLsolveAll } from './function/algebra/solver/lsolveAll.js';\nexport { createUsolveAll } from './function/algebra/solver/usolveAll.js';\nexport { createLeftShift } from './function/bitwise/leftShift.js';\nexport { createRightArithShift } from './function/bitwise/rightArithShift.js';\nexport { createRightLogShift } from './function/bitwise/rightLogShift.js';\nexport { createAnd } from './function/logical/and.js';\nexport { createCompare } from './function/relational/compare.js';\nexport { createCompareNatural } from './function/relational/compareNatural.js';\nexport { createCompareText } from './function/relational/compareText.js';\nexport { createEqual } from './function/relational/equal.js';\nexport { createEqualText } from './function/relational/equalText.js';\nexport { createSmaller } from './function/relational/smaller.js';\nexport { createSmallerEq } from './function/relational/smallerEq.js';\nexport { createLarger } from './function/relational/larger.js';\nexport { createLargerEq } from './function/relational/largerEq.js';\nexport { createDeepEqual } from './function/relational/deepEqual.js';\nexport { createUnequal } from './function/relational/unequal.js';\nexport { createPartitionSelect } from './function/matrix/partitionSelect.js';\nexport { createSort } from './function/matrix/sort.js';\nexport { createMax } from './function/statistics/max.js';\nexport { createMin } from './function/statistics/min.js';\nexport { createImmutableDenseMatrixClass } from './type/matrix/ImmutableDenseMatrix.js';\nexport { createIndexClass } from './type/matrix/MatrixIndex.js';\nexport { createFibonacciHeapClass } from './type/matrix/FibonacciHeap.js';\nexport { createSpaClass } from './type/matrix/Spa.js';\nexport { createUnitClass } from './type/unit/Unit.js';\nexport { createUnitFunction } from './type/unit/function/unit.js';\nexport { createSparse } from './type/matrix/function/sparse.js';\nexport { createCreateUnit } from './type/unit/function/createUnit.js';\nexport { createAcos } from './function/trigonometry/acos.js';\nexport { createAcosh } from './function/trigonometry/acosh.js';\nexport { createAcot } from './function/trigonometry/acot.js';\nexport { createAcoth } from './function/trigonometry/acoth.js';\nexport { createAcsc } from './function/trigonometry/acsc.js';\nexport { createAcsch } from './function/trigonometry/acsch.js';\nexport { createAsec } from './function/trigonometry/asec.js';\nexport { createAsech } from './function/trigonometry/asech.js';\nexport { createAsin } from './function/trigonometry/asin.js';\nexport { createAsinh } from './function/trigonometry/asinh.js';\nexport { createAtan } from './function/trigonometry/atan.js';\nexport { createAtan2 } from './function/trigonometry/atan2.js';\nexport { createAtanh } from './function/trigonometry/atanh.js';\nexport { createCos } from './function/trigonometry/cos.js';\nexport { createCosh } from './function/trigonometry/cosh.js';\nexport { createCot } from './function/trigonometry/cot.js';\nexport { createCoth } from './function/trigonometry/coth.js';\nexport { createCsc } from './function/trigonometry/csc.js';\nexport { createCsch } from './function/trigonometry/csch.js';\nexport { createSec } from './function/trigonometry/sec.js';\nexport { createSech } from './function/trigonometry/sech.js';\nexport { createSin } from './function/trigonometry/sin.js';\nexport { createSinh } from './function/trigonometry/sinh.js';\nexport { createTan } from './function/trigonometry/tan.js';\nexport { createTanh } from './function/trigonometry/tanh.js';\nexport { createSetCartesian } from './function/set/setCartesian.js';\nexport { createSetDifference } from './function/set/setDifference.js';\nexport { createSetDistinct } from './function/set/setDistinct.js';\nexport { createSetIntersect } from './function/set/setIntersect.js';\nexport { createSetIsSubset } from './function/set/setIsSubset.js';\nexport { createSetMultiplicity } from './function/set/setMultiplicity.js';\nexport { createSetPowerset } from './function/set/setPowerset.js';\nexport { createSetSize } from './function/set/setSize.js';\nexport { createSetSymDifference } from './function/set/setSymDifference.js';\nexport { createSetUnion } from './function/set/setUnion.js';\nexport { createAdd } from './function/arithmetic/add.js';\nexport { createHypot } from './function/arithmetic/hypot.js';\nexport { createNorm } from './function/arithmetic/norm.js';\nexport { createDot } from './function/matrix/dot.js';\nexport { createTrace } from './function/matrix/trace.js';\nexport { createIndex } from './type/matrix/function/index.js';\nexport { createNode } from './expression/node/Node.js';\nexport { createAccessorNode } from './expression/node/AccessorNode.js';\nexport { createArrayNode } from './expression/node/ArrayNode.js';\nexport { createAssignmentNode } from './expression/node/AssignmentNode.js';\nexport { createBlockNode } from './expression/node/BlockNode.js';\nexport { createConditionalNode } from './expression/node/ConditionalNode.js';\nexport { createConstantNode } from './expression/node/ConstantNode.js';\nexport { createFunctionAssignmentNode } from './expression/node/FunctionAssignmentNode.js';\nexport { createIndexNode } from './expression/node/IndexNode.js';\nexport { createObjectNode } from './expression/node/ObjectNode.js';\nexport { createOperatorNode } from './expression/node/OperatorNode.js';\nexport { createParenthesisNode } from './expression/node/ParenthesisNode.js';\nexport { createRangeNode } from './expression/node/RangeNode.js';\nexport { createRelationalNode } from './expression/node/RelationalNode.js';\nexport { createSymbolNode } from './expression/node/SymbolNode.js';\nexport { createFunctionNode } from './expression/node/FunctionNode.js';\nexport { createParse } from './expression/parse.js';\nexport { createCompile } from './expression/function/compile.js';\nexport { createEvaluate } from './expression/function/evaluate.js';\nexport { createParserClass } from './expression/Parser.js';\nexport { createParser } from './expression/function/parser.js';\nexport { createLup } from './function/algebra/decomposition/lup.js';\nexport { createQr } from './function/algebra/decomposition/qr.js';\nexport { createSlu } from './function/algebra/decomposition/slu.js';\nexport { createLusolve } from './function/algebra/solver/lusolve.js';\nexport { createPolynomialRoot } from './function/algebra/polynomialRoot.js';\nexport { createHelpClass } from './expression/Help.js';\nexport { createChainClass } from './type/chain/Chain.js';\nexport { createHelp } from './expression/function/help.js';\nexport { createChain } from './type/chain/function/chain.js';\nexport { createDet } from './function/matrix/det.js';\nexport { createInv } from './function/matrix/inv.js';\nexport { createPinv } from './function/matrix/pinv.js';\nexport { createEigs } from './function/matrix/eigs.js';\nexport { createExpm } from './function/matrix/expm.js';\nexport { createSqrtm } from './function/matrix/sqrtm.js';\nexport { createSylvester } from './function/algebra/sylvester.js';\nexport { createSchur } from './function/algebra/decomposition/schur.js';\nexport { createLyap } from './function/algebra/lyap.js';\nexport { createDivide } from './function/arithmetic/divide.js';\nexport { createDistance } from './function/geometry/distance.js';\nexport { createIntersect } from './function/geometry/intersect.js';\nexport { createSum } from './function/statistics/sum.js';\nexport { createCumSum } from './function/statistics/cumsum.js';\nexport { createMean } from './function/statistics/mean.js';\nexport { createMedian } from './function/statistics/median.js';\nexport { createMad } from './function/statistics/mad.js';\nexport { createVariance } from './function/statistics/variance.js';\nexport { createQuantileSeq } from './function/statistics/quantileSeq.js';\nexport { createStd } from './function/statistics/std.js';\nexport { createCombinations } from './function/probability/combinations.js';\nexport { createCombinationsWithRep } from './function/probability/combinationsWithRep.js';\nexport { createGamma } from './function/probability/gamma.js';\nexport { createLgamma } from './function/probability/lgamma.js';\nexport { createFactorial } from './function/probability/factorial.js';\nexport { createKldivergence } from './function/probability/kldivergence.js';\nexport { createMultinomial } from './function/probability/multinomial.js';\nexport { createPermutations } from './function/probability/permutations.js';\nexport { createPickRandom } from './function/probability/pickRandom.js';\nexport { createRandom } from './function/probability/random.js';\nexport { createRandomInt } from './function/probability/randomInt.js';\nexport { createStirlingS2 } from './function/combinatorics/stirlingS2.js';\nexport { createBellNumbers } from './function/combinatorics/bellNumbers.js';\nexport { createCatalan } from './function/combinatorics/catalan.js';\nexport { createComposition } from './function/combinatorics/composition.js';\nexport { createLeafCount } from './function/algebra/leafCount.js';\nexport { createSimplify } from './function/algebra/simplify.js';\nexport { createSimplifyConstant } from './function/algebra/simplifyConstant.js';\nexport { createSimplifyCore } from './function/algebra/simplifyCore.js';\nexport { createResolve } from './function/algebra/resolve.js';\nexport { createSymbolicEqual } from './function/algebra/symbolicEqual.js';\nexport { createDerivative } from './function/algebra/derivative.js';\nexport { createRationalize } from './function/algebra/rationalize.js';\nexport { createReviver } from './json/reviver.js';\nexport { createReplacer } from './json/replacer.js';\nexport { createE, createUppercaseE, createFalse, createI, createInfinity, createLN10, createLN2, createLOG10E, createLOG2E, createNaN, createNull, createPhi, createPi, createUppercasePi, createSQRT1_2,\n// eslint-disable-line camelcase\ncreateSQRT2, createTau, createTrue, createVersion } from './constants.js';\nexport { createAtomicMass, createAvogadro, createBohrMagneton, createBohrRadius, createBoltzmann, createClassicalElectronRadius, createConductanceQuantum, createCoulomb, createDeuteronMass, createEfimovFactor, createElectricConstant, createElectronMass, createElementaryCharge, createFaraday, createFermiCoupling, createFineStructure, createFirstRadiation, createGasConstant, createGravitationConstant, createGravity, createHartreeEnergy, createInverseConductanceQuantum, createKlitzing, createLoschmidt, createMagneticConstant, createMagneticFluxQuantum, createMolarMass, createMolarMassC12, createMolarPlanckConstant, createMolarVolume, createNeutronMass, createNuclearMagneton, createPlanckCharge, createPlanckConstant, createPlanckLength, createPlanckMass, createPlanckTemperature, createPlanckTime, createProtonMass, createQuantumOfCirculation, createReducedPlanckConstant, createRydberg, createSackurTetrode, createSecondRadiation, createSpeedOfLight, createStefanBoltzmann, createThomsonCrossSection, createVacuumImpedance, createWeakMixingAngle, createWienDisplacement } from './type/unit/physicalConstants.js';\nexport { createApplyTransform } from './expression/transform/apply.transform.js';\nexport { createColumnTransform } from './expression/transform/column.transform.js';\nexport { createFilterTransform } from './expression/transform/filter.transform.js';\nexport { createForEachTransform } from './expression/transform/forEach.transform.js';\nexport { createIndexTransform } from './expression/transform/index.transform.js';\nexport { createMapTransform } from './expression/transform/map.transform.js';\nexport { createMaxTransform } from './expression/transform/max.transform.js';\nexport { createMeanTransform } from './expression/transform/mean.transform.js';\nexport { createMinTransform } from './expression/transform/min.transform.js';\nexport { createRangeTransform } from './expression/transform/range.transform.js';\nexport { createRowTransform } from './expression/transform/row.transform.js';\nexport { createSubsetTransform } from './expression/transform/subset.transform.js';\nexport { createConcatTransform } from './expression/transform/concat.transform.js';\nexport { createDiffTransform } from './expression/transform/diff.transform.js';\nexport { createStdTransform } from './expression/transform/std.transform.js';\nexport { createSumTransform } from './expression/transform/sum.transform.js';\nexport { createCumSumTransform } from './expression/transform/cumsum.transform.js';\nexport { createVarianceTransform } from './expression/transform/variance.transform.js';", "import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: Decimal.EUCLID\n  });\n  BigNumber.prototype = Object.create(BigNumber.prototype);\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n  return BigNumber;\n}, {\n  isClass: true\n});", "import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return Complex;\n}, {\n  isClass: true\n});", "import Fraction from 'fraction.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Fraction';\nvar dependencies = [];\nexport var createFractionClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Fraction, 'name', {\n    value: 'Fraction'\n  });\n  Fraction.prototype.constructor = Fraction;\n  Fraction.prototype.type = 'Fraction';\n  Fraction.prototype.isFraction = true;\n\n  /**\n   * Get a JSON representation of a Fraction containing type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   */\n  Fraction.prototype.toJSON = function () {\n    return {\n      mathjs: 'Fraction',\n      n: this.s * this.n,\n      d: this.d\n    };\n  };\n\n  /**\n   * Instantiate a Fraction from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   * @return {BigNumber}\n   */\n  Fraction.fromJSON = function (json) {\n    return new Fraction(json);\n  };\n  return Fraction;\n}, {\n  isClass: true\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'Matrix';\nvar dependencies = [];\nexport var createMatrixClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  Matrix.prototype[Symbol.iterator] = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot iterate a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n  return Matrix;\n}, {\n  isClass: true\n});", "import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});", "import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNegativeNumber } from '../../plain/number/index.js';\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isPositiveNumber } from '../../plain/number/index.js';\nvar name = 'isPositive';\nvar dependencies = ['typed'];\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3)                     // returns true\n   *    math.isPositive(-2)                    // returns false\n   *    math.isPositive(0)                     // returns false\n   *    math.isPositive(-0)                    // returns false\n   *    math.isPositive(0.5)                   // returns true\n   *    math.isPositive(math.bignumber(2))     // returns true\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\n   *    math.isPositive(math.fraction(1, 3))   // returns true\n   *    math.isPositive('2')                   // returns true\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isPositiveNumber,\n    BigNumber: function BigNumber(x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s > 0 && x.n > 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                      // returns true\n   *    math.isZero(2)                      // returns false\n   *    math.isZero(0.5)                    // returns false\n   *    math.isZero(math.bignumber(0))      // returns true\n   *    math.isZero(math.fraction(0))       // returns true\n   *    math.isZero(math.fraction(1,3))     // returns false\n   *    math.isZero(math.complex('2 - 4i')) // returns false\n   *    math.isZero(math.complex('0i'))     // returns true\n   *    math.isZero('0')                    // returns true\n   *    math.isZero('2')                    // returns false\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNaNNumber } from '../../plain/number/index.js';\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3)                     // returns false\n   *    math.isNaN(NaN)                   // returns true\n   *    math.isNaN(0)                     // returns false\n   *    math.isNaN(math.bignumber(NaN))   // returns true\n   *    math.isNaN(math.bignumber(0))     // returns false\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\n   *    math.isNaN('-2')                  // returns false\n   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n});", "import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            }\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            }\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;\n      } while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new SparseMatrix\n   */\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    }\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n\n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n\n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n\n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n\n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n\n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];\n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n\n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    }\n\n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // insert the sub matrix\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n    return matrix;\n  }\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    }\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    }\n    // we did not find row\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // check sizes\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n\n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }\n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    }\n\n    // check sizes\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1];\n\n    // m * n must not change\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var args = maxArgumentCount(callback);\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n\n    // invoke callback\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k];\n          // check i is in range\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    }\n\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k];\n\n          // value @ k\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n    var columns = this._size[1];\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;\n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        }\n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        }\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        }\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});", "import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n\n    null: function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n  /**\n   * Create a fraction or convert a value to a fraction.\n   *\n   * With one numeric argument, produces the closest rational approximation to the\n   * input.\n   * With two arguments, the first is the numerator and the second is the denominator,\n   * and creates the corresponding fraction. Both numerator and denominator must be\n   * integers.\n   * With one object argument, looks for the integer numerator as the value of property\n   * 'n' and the integer denominator as the value of property 'd'.\n   * With a matrix argument, creates a matrix of the same shape with entries\n   * converted into fractions.\n   *\n   * Syntax:\n   *     math.fraction(value)\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)\n   *\n   * Examples:\n   *\n   *     math.fraction(6.283)             // returns Fraction 6283/1000\n   *     math.fraction(1, 3)              // returns Fraction 1/3\n   *     math.fraction('2/3')             // returns Fraction 2/3\n   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3\n   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]\n   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the value, or numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromFunction';\nvar dependencies = ['typed', 'matrix', 'isZero'];\nexport var createMatrixFromFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isZero\n  } = _ref;\n  /**\n   * Create a matrix by evaluating a generating function at each index.\n   * The simplest overload returns a multi-dimensional array as long as `size` is an array.\n   * Passing `size` as a Matrix or specifying a `format` will result in returning a Matrix.\n   *\n   * Syntax:\n   *\n   *    math.matrixFromFunction(size, fn)\n   *    math.matrixFromFunction(size, fn, format)\n   *    math.matrixFromFunction(size, fn, format, datatype)\n   *    math.matrixFromFunction(size, format, fn)\n   *    math.matrixFromFunction(size, format, datatype, fn)\n   *\n   * Examples:\n   *\n   *    math.matrixFromFunction([3,3], i => i[0] - i[1]) // an antisymmetric matrix\n   *    math.matrixFromFunction([100, 100], 'sparse', i => i[0] - i[1] === 1 ? 4 : 0) // a sparse subdiagonal matrix\n   *    math.matrixFromFunction([5], i => math.random()) // a random vector\n   *\n   * See also:\n   *\n   *    matrix, zeros\n   *\n   * @param {Array | Matrix} size   The size of the matrix to be created\n   * @param {function} fn           Callback function invoked for every entry in the matrix\n   * @param {string} [format]       The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]     Type of the values\n   * @return {Array | Matrix} Returns the created matrix\n   */\n  return typed(name, {\n    'Array | Matrix, function, string, string': function ArrayMatrixFunctionStringString(size, fn, format, datatype) {\n      return _create(size, fn, format, datatype);\n    },\n    'Array | Matrix, function, string': function ArrayMatrixFunctionString(size, fn, format) {\n      return _create(size, fn, format);\n    },\n    'Matrix, function': function MatrixFunction(size, fn) {\n      return _create(size, fn, 'dense');\n    },\n    'Array, function': function ArrayFunction(size, fn) {\n      return _create(size, fn, 'dense').toArray();\n    },\n    'Array | Matrix, string, function': function ArrayMatrixStringFunction(size, format, fn) {\n      return _create(size, fn, format);\n    },\n    'Array | Matrix, string, string, function': function ArrayMatrixStringStringFunction(size, format, datatype, fn) {\n      return _create(size, fn, format, datatype);\n    }\n  });\n  function _create(size, fn, format, datatype) {\n    var m;\n    if (datatype !== undefined) {\n      m = matrix(format, datatype);\n    } else {\n      m = matrix(format);\n    }\n    m.resize(size);\n    m.forEach(function (_, index) {\n      var val = fn(index);\n      if (isZero(val)) return;\n      m.set(index, val);\n    });\n    return m;\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromRows';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromRows = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n  /**\n   * Create a dense matrix from vectors as individual rows.\n   * If you pass column vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromRows(...arr)\n   *    math.matrixFromRows(row1, row2)\n   *    math.matrixFromRows(row1, row2, row3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromRows(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromColumns, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} rows  Multiple rows\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    }\n\n    // TODO implement this properly for SparseMatrix\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]);\n    var result = [];\n    for (var row of arr) {\n      var rowLength = checkVectorTypeAndReturnLength(row);\n      if (rowLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));\n      }\n      result.push(flatten(row));\n    }\n    return result;\n  }\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromColumns';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromColumns = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n  /**\n   * Create a dense matrix from vectors as individual columns.\n   * If you pass row vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromColumns(...arr)\n   *    math.matrixFromColumns(col1, col2)\n   *    math.matrixFromColumns(col1, col2, col3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromColumns(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromRows, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} cols Multiple columns\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    }\n\n    // TODO implement this properly for SparseMatrix\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]);\n\n    // create an array with empty rows\n    var result = [];\n    for (var i = 0; i < N; i++) {\n      result[i] = [];\n    }\n\n    // loop columns\n    for (var col of arr) {\n      var colLength = checkVectorTypeAndReturnLength(col);\n      if (colLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));\n      }\n      var f = flatten(col);\n\n      // push a value to each row\n      for (var _i = 0; _i < N; _i++) {\n        result[_i].push(f[_i]);\n      }\n    }\n    return result;\n  }\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nexport var createSplitUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n\n    // TODO: add support for string\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber\n  } = _ref;\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    // deep map collection, skip zeros since unaryPlus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  return typed(name, {\n    number: absNumber,\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\n    // deep map collection, skip zeros since abs(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n      var _result = x.pow(third);\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n      return _result;\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { cubeNumber } from '../../plain/number/index.js';\nvar name = 'cube';\nvar dependencies = ['typed'];\nexport var createCube = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * To avoid confusion with `pow(M,3)`, this function does not apply to matrices.\n   * If you wish to cube every entry of a matrix, see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.map([1, 2, 3, 4], math.cube) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Unit} Cube of x\n   */\n  return typed(name, {\n    number: cubeNumber,\n    Complex: function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n\n    Unit: function Unit(x) {\n      return x.pow(3);\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { expNumber } from '../../plain/number/index.js';\nvar name = 'exp';\nvar dependencies = ['typed'];\nexport var createExp = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the exponential of a value.\n   * For matrices, if you want the matrix exponential of square matrix, use\n   * the `expm` function; if you want to take the exponential of each element,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.map([1, 2, 3], math.exp)\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, expm, log, pow\n   *\n   * @param {number | BigNumber | Complex} x  A number to exponentiate\n   * @return {number | BigNumber | Complex} Exponential of `x`\n   */\n  return typed(name, {\n    number: expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { expm1Number } from '../../plain/number/index.js';\nvar name = 'expm1';\nvar dependencies = ['typed', 'Complex'];\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * This function is more accurate than `math.exp(x)-1` when `x` is near 0\n   * To avoid ambiguity with the matrix exponential `expm`, this function\n   * does not operate on matrices; if you wish to apply it elementwise, see\n   * the examples.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.expm1(1e-8)                   // returns number 1.0000000050000001e-8\n   *    math.exp(1e-8) - 1                 // returns number 9.9999999392253e-9\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.map([1, 2, 3], math.expm1)\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, expm, log, pow\n   *\n   * @param {number | BigNumber | Complex} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex} Exponential of `x`, minus one\n   */\n  return typed(name, {\n    number: expm1Number,\n    Complex: function Complex(x) {\n      var r = Math.exp(x.re);\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp().minus(1);\n    }\n  });\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo01xDSid';\nvar dependencies = ['typed'];\nexport var createMatAlgo01xDSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n\n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo04xSidSid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo04xSidSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  B(i,j)       ; A(i,j) === 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo04xSidSid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'matAlgo06xS0S0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo06xS0S0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo06xS0S0(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, cindex, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, cindex, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': (x, y) => x.lcm(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log10Number } from '../../plain/number/index.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log2Number } from '../../plain/number/index.js';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { modNumber } from '../../plain/number/index.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});", "import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n    return dot(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);\n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    }\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij = void 0;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n\n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y));\n\n      // use dense matrix implementation\n      var m = selfMM(matrix(x), matrix(y));\n      // return array or scalar\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { signNumber } from '../../plain/number/index.js';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber,\n    complex,\n    Fraction: _Fraction\n  } = _ref;\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    // deep map collection, skip zeros since sign(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    Unit: typed.referToSelf(self => x => {\n      if (!x._isDerived() && x.units[0].unit.offset !== 0) {\n        throw new TypeError('sign is ambiguous for units with offset');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, if you want the matrix square root of a square matrix,\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\n   * a matrix M, use `math.map(M, math.sqrt)`.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { squareNumber } from '../../plain/number/index.js';\nvar name = 'square';\nvar dependencies = ['typed'];\nexport var createSquare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the square of a value, `x * x`.\n   * To avoid confusion with multiplying a square matrix by itself,\n   * this function does not apply to matrices. If you wish to square\n   * every element of a matrix, see the examples.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2)           // returns number 4\n   *    math.square(3)           // returns number 9\n   *    math.pow(3, 2)           // returns number 9\n   *    math.multiply(3, 3)      // returns number 9\n   *\n   *    math.map([1, 2, 3, 4], math.square)  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Unit}\n   *            Squared value\n   */\n  return typed(name, {\n    number: squareNumber,\n    Complex: function Complex(x) {\n      return x.mul(x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.mul(x);\n    },\n    Unit: function Unit(x) {\n      return x.pow(2);\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});", "import { factory } from '../../utils/factory.js';\nimport { xgcdNumber } from '../../plain/number/index.js';\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = xgcdNumber(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var\n    // used to swap two variables\n    t;\n    var\n    // quotient\n    q;\n    var\n    // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo09xS0Sf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo09xS0Sf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    multiplyScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: multiplyScalar,\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});", "/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n      return new BigNumber(0);\n    }\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n      return y;\n    }\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n      return x;\n    }\n  }\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n    return x.isFinite() ? y : x;\n  }\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n  var minBits, maxBits, minSign;\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  BigNumber.config({\n    precision: prevPrec\n  });\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n  return outVal;\n}\n\n/* Extracted from decimal.js, and edited to specialize. */\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n  var r = a[0] + '';\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n    r += s;\n  }\n  var j = r.length;\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  }\n\n  // Convert from base 10 (decimal) to base 2\n  var arr = [0];\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n  return arr.reverse();\n}\n\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero()) {\n    return y;\n  }\n  if (y.isZero()) {\n    return x;\n  }\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n  return x.times(new BigNumber(2).pow(y));\n}\n\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n    return new BigNumber(0);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n  return x.div(new BigNumber(2).pow(y)).floor();\n}", "import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});", "import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { bitNotNumber } from '../../plain/number/index.js';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { bitOrBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitOrNumber } from '../../plain/number/index.js';\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createBitOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }));\n});", "import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitXorNumber } from '../../plain/number/index.js';\nvar name = 'bitXor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createBitXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2)               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitXorNumber,\n    'BigNumber, BigNumber': bigBitXor\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'arg';\nvar dependencies = ['typed'];\nexport var createArg = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'im';\nvar dependencies = ['typed'];\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\n   *    math.re(math.complex(2.4))     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  return typed(name, {\n    number: () => 0,\n    'BigNumber | Fraction': x => x.mul(0),\n    Complex: x => x.im,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 're';\nvar dependencies = ['typed'];\nexport var createRe = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.re,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { notNumber } from '../../plain/number/index.js';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    'null | undefined': () => true,\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});", "import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { xorNumber } from '../../plain/number/index.js';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});", "import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}", "import { factory } from '../../utils/factory.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix(clone(value)), column).valueOf();\n    }\n  });\n\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    validateIndex(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'count';\nvar dependencies = ['typed', 'size', 'prod'];\nexport var createCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    prod\n  } = _ref;\n  /**\n   * Count the number of elements of a matrix, array or string.\n   *\n   * Syntax:\n   *\n   *     math.count(x)\n   *\n   * Examples:\n   *\n   *     math.count('hello world')        // returns 11\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.count(A)                    // returns 6\n   *     math.count(math.range(1,6))      // returns 5\n   *\n   * See also:\n   *\n   *     size\n   *\n   * @param {string | Array | Matrix} x  A matrix or string\n   * @return {number} An integer with the elements in `x`.\n   */\n  return typed(name, {\n    string: function string(x) {\n      return x.length;\n    },\n    'Matrix | Array': function MatrixArray(x) {\n      return prod(size(x));\n    }\n  });\n});", "import { arraySize, squeeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nexport var createCross = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply\n  } = _ref;\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n  function _cross(x, y) {\n    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);\n    x = squeeze(x);\n    y = squeeze(y);\n    var xSize = arraySize(x);\n    var ySize = arraySize(y);\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});", "import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'diag';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createDiag = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n   *    math.diag(a)   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, identity\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  return typed(name, {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    Array: function Array(x) {\n      return _diag(x, 0, arraySize(x), null);\n    },\n    'Array, number': function ArrayNumber(x, k) {\n      return _diag(x, k, arraySize(x), null);\n    },\n    'Array, BigNumber': function ArrayBigNumber(x, k) {\n      return _diag(x, k.toNumber(), arraySize(x), null);\n    },\n    'Array, string': function ArrayString(x, format) {\n      return _diag(x, 0, arraySize(x), format);\n    },\n    'Array, number, string': function ArrayNumberString(x, k, format) {\n      return _diag(x, k, arraySize(x), format);\n    },\n    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), arraySize(x), format);\n    },\n    Matrix: function Matrix(x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n    'Matrix, number': function MatrixNumber(x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n    'Matrix, BigNumber': function MatrixBigNumber(x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n    'Matrix, string': function MatrixString(x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n    'Matrix, number, string': function MatrixNumberString(x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag(x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError('Second parameter in function diag must be an integer');\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    if (format && format !== 'sparse' && format !== 'dense') {\n      throw new TypeError(\"Unknown matrix type \".concat(format, \"\\\"\"));\n    }\n\n    // create diagonal matrix\n    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage()) {\n          return matrix(dm, format);\n        }\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n});", "import { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Flatten a multidimensional matrix into a single dimensional matrix.\n   * A new matrix is returned, the original matrix is left untouched.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(x);\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(x.toArray());\n      // TODO: return the same matrix type as x (Dense or Sparse Matrix)\n      return matrix(flat);\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { getArrayDataType } from '../../utils/array.js';\nimport { typeOf } from '../../utils/is.js';\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nexport var createGetMatrixDataType = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Find the data type of all elements in a matrix or array,\n   * for example 'number' if all items are a number and 'Complex' if all values\n   * are complex numbers.\n   * If a matrix contains more than one data type, it will return 'mixed'.\n   *\n   * Syntax:\n   *\n   *    math.getMatrixDataType(x)\n   *\n   * Examples:\n   *\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\n   *    const mixedX = [ [1, true], [2, 3] ]\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\n   *    const sparse = math.sparse(x)\n   *    const dense = math.matrix(x)\n   *    math.getMatrixDataType(x)   // returns 'number'\n   *    math.getMatrixDataType(sparse)   // returns 'number'\n   *    math.getMatrixDataType(dense)   // returns 'number'\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\n   *\n   * See also:\n   *  SparseMatrix, DenseMatrix\n   *\n   * @param {...Matrix | Array} x   The Matrix with values.\n   *\n   * @return {string} A string representation of the matrix type\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return getArrayDataType(x, typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});", "import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n      case 1:\n        return _identity(size[0], size[0], format);\n      case 2:\n        return _identity(size[0], size[1], format);\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n\n    // check we need to return a matrix\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    // create and resize array\n    var res = resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n});", "import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nexport var createKron = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiplyScalar\n  } = _ref;\n  /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4])\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n\n  /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if (size(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n    if (size(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n    if (size(a).length > 2 || size(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number\n  } = _ref;\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns Matrix [1, 2, 3, -7]\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @param {number} dim            Dimension\n   * @return {Array | Matrix}       Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if (isMatrix(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\n      if (isMatrix(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array, BigNumber': typed.referTo('Array,number', selfAn => (arr, dim) => selfAn(arr, number(dim))),\n    'Matrix, BigNumber': typed.referTo('Matrix,number', selfMn => (arr, dim) => selfMn(arr, number(dim)))\n  });\n\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n  function _recursive(arr, dim) {\n    if (isMatrix(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(element => {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n    var result = [];\n    var size = arr1.length;\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n    return result;\n  }\n});", "import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones()                    // returns []\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});", "import { reshape as arrayReshape } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4])\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\n   *     math.reshape(x, [2, 2, 2])\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\n   *    // returns Matrix [[1, 2], [3, 4]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension. One -1 is allowed as wildcard,\n   *                                which calculates this dimension automatically.\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      return x.reshape(sizes, true);\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return arrayReshape(x, sizes);\n    }\n  });\n});", "import { isBigNumber, isMatrix } from '../../utils/is.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nimport { resize as arrayResize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    matrix\n  } = _ref;\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    }\n\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    }\n\n    // check result should be a matrix\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n    var len = size[0];\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n      return res;\n    } else {\n      return str;\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { arraySize } from '../../utils/array.js';\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nexport var createRotate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    multiply,\n    rotationMatrix\n  } = _ref;\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns [-12, 11]\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns [-12, 11]\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns [0, 1, 0]\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns Matrix [0, 1, 0]\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns [cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)]\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? arraySize(v) : v.size();\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});", "import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    addScalar,\n    unaryMinus,\n    norm,\n    BigNumber,\n    matrix,\n    DenseMatrix,\n    SparseMatrix,\n    cos,\n    sin\n  } = _ref;\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n      _validateVector(matrixV);\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n      _validateVector(matrixV);\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n  function _validateVector(v) {\n    var size = v.size();\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n  function _mul(array) {\n    return array.reduce((p, curr) => multiplyScalar(p, curr));\n  }\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n    return data;\n  }\n\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createRow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    validateIndex(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});", "import { clone } from '../../utils/object.js';\nimport { squeeze as arraySqueeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'squeeze';\nvar dependencies = ['typed', 'matrix'];\nexport var createSqueeze = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3])           // returns 3\n   *     math.squeeze([[3]])         // returns 3\n   *\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\n   *\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return arraySqueeze(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var res = arraySqueeze(x.toArray());\n      // FIXME: return the same type of matrix as the input\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    any: function any(x) {\n      // scalar\n      return clone(x);\n    }\n  });\n});", "import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]] and e = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}", "import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed(name, {\n    Array: x => transposeMatrix(matrix(x)).valueOf(),\n    Matrix: transposeMatrix,\n    any: clone // scalars\n  });\n\n  function transposeMatrix(x) {\n    // matrix size\n    var size = x.size();\n\n    // result\n    var c;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        c = x.clone();\n        break;\n      case 2:\n        {\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n        }\n        break;\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(size) + ')');\n    }\n    return c;\n  }\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    }\n    // return matrix\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    }\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    }\n    // return matrix\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'ctranspose';\nvar dependencies = ['typed', 'transpose', 'conj'];\nexport var createCtranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    transpose,\n    conj\n  } = _ref;\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n  return typed(name, {\n    any: function any(x) {\n      return conj(transpose(x));\n    }\n  });\n});", "import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros()                   // returns []\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n});\n\n// TODO: zeros contains almost the same code as ones. Reuse this?", "import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I\n  } = _ref;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    }\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});", "import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as binary.\n *\n * Syntax:\n *\n *    math.bin(value)\n *\n * Examples:\n *\n *    //the following outputs \"0b10\"\n *    math.bin(2)\n *\n * See also:\n *\n *    oct\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createBin = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize\n      });\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize\n      });\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'hex';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as hexadecimal.\n *\n * Syntax:\n *\n *    math.hex(value)\n *\n * Examples:\n *\n *    math.hex(240) // returns \"0xF0\"\n *\n * See also:\n *\n *    oct\n *    bin\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createHex = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'hex'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'hex',\n        wordSize\n      });\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { arraySize as size } from '../../utils/array.js';\nimport { powNumber } from '../../plain/number/index.js';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    identity,\n    multiply,\n    matrix,\n    inv,\n    number,\n    fraction,\n    Complex\n  } = _ref;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    })\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * To avoid confusion with the matrix logarithm, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Complex} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(self(x), self(base));\n    })\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log1p as _log1p } from '../../utils/number.js';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    log,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(self(x), log(base));\n    })\n  });\n\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'nthRoots';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createNthRoots = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Each function here returns a real multiple of i as a Complex value.\n   * @param  {number} val\n   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n   */\n  // This is used to fix float artifacts for zero-valued components.\n  var _calculateExactResult = [function realPos(val) {\n    return new Complex(val, 0);\n  }, function imagPos(val) {\n    return new Complex(0, val);\n  }, function realNeg(val) {\n    return new Complex(-val, 0);\n  }, function imagNeg(val) {\n    return new Complex(0, -val);\n  }];\n\n  /**\n   * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n   * @param  {Complex} a\n   * @param  {number} root\n   * @return {Array} array of n Complex Roots\n   */\n  function _nthComplexRoots(a, root) {\n    if (root < 0) throw new Error('Root must be greater than zero');\n    if (root === 0) throw new Error('Root must be non-zero');\n    if (root % 1 !== 0) throw new Error('Root must be an integer');\n    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];\n    var aIsNumeric = typeof a === 'number';\n    var offset;\n    // determine the offset (argument of a)/(pi/2)\n    if (aIsNumeric || a.re === 0 || a.im === 0) {\n      if (aIsNumeric) {\n        offset = 2 * +(a < 0); // numeric value on the real axis\n      } else if (a.im === 0) {\n        offset = 2 * +(a.re < 0); // complex value on the real axis\n      } else {\n        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n      }\n    }\n\n    var arg = a.arg();\n    var abs = a.abs();\n    var roots = [];\n    var r = Math.pow(abs, 1 / root);\n    for (var k = 0; k < root; k++) {\n      var halfPiFactor = (offset + 4 * k) / root;\n      /**\n       * If (offset + 4*k)/root is an integral multiple of pi/2\n       * then we can produce a more exact result.\n       */\n      if (halfPiFactor === Math.round(halfPiFactor)) {\n        roots.push(_calculateExactResult[halfPiFactor % 4](r));\n        continue;\n      }\n      roots.push(new Complex({\n        r,\n        phi: (arg + 2 * Math.PI * k) / root\n      }));\n    }\n    return roots;\n  }\n\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    math.nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    // ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex}            Rounded value\n   */\n  return typed(name, {\n    Complex: function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    matrix,\n    pow,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var powScalarSignatures = {};\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n  var powScalar = typed(powScalarSignatures);\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    divideScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: divideScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});", "import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n    var rows = mSize[0];\n    var columns = mSize[1];\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n    var data = [];\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data;\n\n      // 1-dim vector\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n\n      // 2-dim column\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n            return new DenseMatrix({\n              data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          return b;\n        }\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n          return new DenseMatrix({\n            data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}", "import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolve(a, b)  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lsolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseForwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j + 1; i < rows; i++) {\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // degenerate row, we can choose any value\n        xj = 0;\n      }\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n        // matrix values & indices (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first and last index in the column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j]\n        for (var k = firstIndex; k < lastIndex; k++) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i > j) {\n            // store lower triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, l = jIndices.length; _k < l; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolve(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolve(a, b)  // [[8], [9]]\n   *\n   * See also:\n   *\n   *    usolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseBackwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // value at [j, j]\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // zero value at j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n\n        // upper triangular matrix values & index (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j], loop backwards\n        for (var k = lastIndex - 1; k >= firstIndex; k--) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i < j) {\n            // store upper triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolveAll(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]\n   *\n   * See also:\n   *\n   *    lsolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var R = _denseForwardSubstitution(m, b);\n      return R.map(r => r.valueOf());\n    }\n  });\n  function _denseForwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // loop columns\n    for (var i = 0; i < columns; i++) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], M[i][i]);\n          for (var j = i + 1; j < columns; j++) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j = i + 1; _j < columns; _j++) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n  function _sparseForwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // loop columns\n    for (var i = 0; i < columns; i++) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        // values & indices (column i)\n        var iValues = [];\n        var iIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1];\n\n        // find the value at [i, i]\n        var Mii = 0;\n        for (var j = firstIndex; j < lastIndex; j++) {\n          var J = index[j];\n          // check row\n          if (J === i) {\n            Mii = values[j];\n          } else if (J > i) {\n            // store lower triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], Mii);\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolveAll(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]\n   *\n   * See also:\n   *\n   *    usolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var R = _denseBackwardSubstitution(m, b);\n      return R.map(r => r.valueOf());\n    }\n  });\n  function _denseBackwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // loop columns backwards\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], M[i][i]);\n          for (var j = i - 1; j >= 0; j--) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j = i - 1; _j >= 0; _j--) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n  function _sparseBackwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // loop columns backwards\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        // values & indices (column i)\n        var iValues = [];\n        var iIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1];\n\n        // find the value at [i, i]\n        var Mii = 0;\n        for (var j = lastIndex - 1; j >= firstIndex; j--) {\n          var J = index[j];\n          // check row\n          if (J === i) {\n            Mii = values[j];\n          } else if (J < i) {\n            // store upper triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], Mii);\n\n          // loop upper triangular\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          // loop upper triangular\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo08xS0Sid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo08xS0Sid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo08xS0Sid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});", "import { factory } from '../../utils/factory.js';\nexport var createUseMatrixForArrayScalar = /* #__PURE__ */factory('useMatrixForArrayScalar', ['typed', 'matrix'], _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  return {\n    'Array, number': typed.referTo('DenseMatrix, number', selfDn => (x, y) => selfDn(matrix(x), y).valueOf()),\n    'Array, BigNumber': typed.referTo('DenseMatrix, BigNumber', selfDB => (x, y) => selfDB(matrix(x), y).valueOf()),\n    'number, Array': typed.referTo('number, DenseMatrix', selfnD => (x, y) => selfnD(x, matrix(y)).valueOf()),\n    'BigNumber, Array': typed.referTo('BigNumber, DenseMatrix', selfBD => (x, y) => selfBD(x, matrix(y)).valueOf())\n  };\n});", "import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});", "import { rightArithShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { rightArithShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightArithShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightArithShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n   */\n  return typed(name, {\n    'number, number': rightArithShiftNumber,\n    'BigNumber, BigNumber': rightArithShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});", "import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});", "import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});", "import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sort';\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\nexport var createSort = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    compare,\n    compareNatural\n  } = _ref;\n  var compareAsc = compare;\n  var compareDesc = (a, b) => -compare(a, b);\n\n  /**\n   * Sort the items in a matrix.\n   *\n   * Syntax:\n   *\n   *    math.sort(x)\n   *    math.sort(x, compare)\n   *\n   * Examples:\n   *\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\n   *    // returns ['A', 'B', 'C', 'D']\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\n   *    // returns ['Tom', 'Sara', 'Langdon']\n   *\n   * See also:\n   *\n   *    filter, forEach, map, compare, compareNatural\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\n   *        An optional _comparator function or name. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {Matrix | Array} Returns the sorted matrix.\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      _arrayIsVector(x);\n      return x.sort(compareAsc);\n    },\n    Matrix: function Matrix(x) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n    'Array, function': function ArrayFunction(x, _comparator) {\n      _arrayIsVector(x);\n      return x.sort(_comparator);\n    },\n    'Matrix, function': function MatrixFunction(x, _comparator) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n    'Array, string': function ArrayString(x, order) {\n      _arrayIsVector(x);\n      return x.sort(_comparator(order));\n    },\n    'Matrix, string': function MatrixString(x, order) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n\n  /**\n   * Get the comparator for given order ('asc', 'desc', 'natural')\n   * @param {'asc' | 'desc' | 'natural'} order\n   * @return {Function} Returns a _comparator function\n   */\n  function _comparator(order) {\n    if (order === 'asc') {\n      return compareAsc;\n    } else if (order === 'desc') {\n      return compareDesc;\n    } else if (order === 'natural') {\n      return compareNatural;\n    } else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n\n  /**\n   * Validate whether an array is one dimensional\n   * Throws an error when this is not the case\n   * @param {Array} array\n   * @private\n   */\n  function _arrayIsVector(array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n\n  /**\n   * Validate whether a matrix is one dimensional\n   * Throws an error when this is not the case\n   * @param {Matrix} matrix\n   * @private\n   */\n  function _matrixIsVector(matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n});", "import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index);\n          // check result is a matrix\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n          return m;\n        }\n      // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});", "import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    addScalar,\n    equalScalar,\n    FibonacciHeap\n  } = _ref;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});", "import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n    var value = simp._denormalize(simp.value);\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n    // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});", "import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit'];\n\n// This function is named createUnitFunction to prevent a naming conflict with createUnit\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Note that a Sparse Matrix is always 2-dimensional, so for example if\n   * you create one from a plain array of _n_ numbers, you get an _n_ by 1\n   * Sparse \"column vector\".\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *    let v = math.sparse([0, 0, 1])\n   *    v.size()                        // Array [3, 1]\n   *    v.get([2, 0])                   // number 1\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *     math.createUnit('km', math.unit(1000, 'm'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, UnitDefinition, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * To avoid confusion with the matrix arccosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5)           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)) // returns number 1.5\n   *\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc cosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { acoshNumber } from '../../plain/number/index.js';\nvar name = 'acosh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n      return new Complex(x, 0).acosh();\n    },\n    Complex: function Complex(x) {\n      return x.acosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acosh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * To avoid confusion with the matrix arccotanget, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 1.1071487177940904\n   *    math.acot(2)             // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | BigNumber| Complex} x   Function input\n   * @return {number | BigNumber| Complex} The arc cotangent of x\n   */\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { acothNumber } from '../../plain/number/index.js';\nvar name = 'acoth';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccotangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * To avoid confusion with the matrix hyperbolic arccotangent, this\n   * function does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5)       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccotangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return acothNumber(x);\n      }\n      return new Complex(x, 0).acoth();\n    },\n    Complex: function Complex(x) {\n      return x.acoth();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atanh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { acscNumber } from '../../plain/number/index.js';\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * To avoid confusion with the matrix arccosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(2)             // returns 0.5235987755982989\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return acscNumber(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { acschNumber } from '../../plain/number/index.js';\nvar name = 'acsch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix hyperbolic arccosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5)       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x\n   */\n  return typed(name, {\n    number: acschNumber,\n    Complex: function Complex(x) {\n      return x.acsch();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asinh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { asecNumber } from '../../plain/number/index.js';\nvar name = 'asec';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * To avoid confusion with the matrix arcsecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(2)             // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)) // returns 1.5\n   *\n   *    math.asec(0.5)           // returns Complex 0 + 1.3169578969248166i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc secant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return asecNumber(x);\n      }\n      return new Complex(x, 0).asec();\n    },\n    Complex: function Complex(x) {\n      return x.asec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acos();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'asin';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAsin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * To avoid confusion with the matric arcsine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5)           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)) // returns number ~1.5\n   *\n   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc sine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.asin(x);\n      } else {\n        return new Complex(x, 0).asin();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.asin();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asin();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\n   */\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'atan';\nvar dependencies = ['typed'];\nexport var createAtan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * To avoid confusion with matrix arctangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createAtan2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  return typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored\n    // the imaginary.\n\n    'BigNumber, BigNumber': (y, x) => BigNumber.atan2(y, x)\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});", "import { factory } from '../../utils/factory.js';\nimport { atanhNumber } from '../../plain/number/index.js';\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * To avoid confusion with the matrix hyperbolic arctangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5)       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nexport var createTrigUnit = /* #__PURE__ */factory('trigUnit', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    Unit: typed.referToSelf(self => x => {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  };\n});", "import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cos';\nvar dependencies = ['typed'];\nexport var createCos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * To avoid confusion with the matrix cosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosine of x\n   */\n  return typed(name, {\n    number: Math.cos,\n    'Complex | BigNumber': x => x.cos()\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosine of x\n   */\n  return typed(name, {\n    number: coshNumber,\n    'Complex | BigNumber': x => x.cosh()\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { cotNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * To avoid confusion with the matrix cotangent, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  return typed(name, {\n    number: cotNumber,\n    Complex: x => x.cot(),\n    BigNumber: x => new _BigNumber(1).div(x.tan())\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { cothNumber } from '../../plain/number/index.js';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cotangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x\n   */\n  return typed(name, {\n    number: cothNumber,\n    Complex: x => x.coth(),\n    BigNumber: x => new _BigNumber(1).div(x.tanh())\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { cscNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * To avoid confusion with the matrix cosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosecant of x\n   */\n  return typed(name, {\n    number: cscNumber,\n    Complex: x => x.csc(),\n    BigNumber: x => new _BigNumber(1).div(x.sin())\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { cschNumber } from '../../plain/number/index.js';\nvar name = 'csch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosecant of a value,\n   * defined as `csch(x) = 1 / sinh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csch(x)\n   *\n   * Examples:\n   *\n   *    // csch(x) = 1/ sinh(x)\n   *    math.csch(0.5)       // returns 1.9190347513349437\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\n   *\n   * See also:\n   *\n   *    sinh, sech, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x\n   */\n  return typed(name, {\n    number: cschNumber,\n    Complex: x => x.csch(),\n    BigNumber: x => new _BigNumber(1).div(x.sinh())\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * To avoid confusion with the matrix secant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic secant, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\n   */\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sin';\nvar dependencies = ['typed'];\nexport var createSin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * To avoid confusion with the matrix sine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Sine of x\n   */\n  return typed(name, {\n    number: Math.sin,\n    'Complex | BigNumber': x => x.sin()\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { sinhNumber } from '../../plain/number/index.js';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic sine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic sine of x\n   */\n  return typed(name, {\n    number: sinhNumber,\n    'Complex | BigNumber': x => x.sinh()\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'tan';\nvar dependencies = ['typed'];\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * To avoid confusion with the matrix tangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Tangent of x\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': x => x.tan()\n  }, trigUnit);\n});", "import { factory } from '../../utils/factory.js';\nimport { tanh as _tanh } from '../../utils/number.js';\nvar name = 'tanh';\nvar dependencies = ['typed'];\nexport var createTanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * To avoid confusion with matrix hyperbolic tangent, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic tangent of x\n   */\n  return typed('tanh', {\n    number: _tanh,\n    'Complex | BigNumber': x => x.tanh()\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays\n   * and the values will be sorted in ascending order before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});", "import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      }\n      // return an array, if the input was an array\n      if (Array.isArray(a)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});", "import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIntersect';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\n        // of any of them is empty, return empty\n        result = [];\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              result.push(b1[i]);\n              break;\n            }\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});", "import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetMultiplicity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n      return count;\n    }\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetPowerset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n\n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareNatural\n  } = _ref;\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSymDifference';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];\nexport var createSetSymDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n});", "import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nexport var createSetUnion = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setIntersect,\n    setSymDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    equalScalar,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0;\n        // skip zeros since abs(0) === 0\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    }\n    // invalid parameter value\n    throw new Error('Unsupported parameter value');\n  }\n\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = [];\n    // result\n    var maxc = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = [];\n    // result\n    var maxr = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size();\n\n    // check if it is a vector\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    }\n    // MxN matrix\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n    var ySize = _size(y);\n    var xLen, yLen;\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined;\n\n    // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt;\n      // find signatures that matches (dt, dt)\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // both vectors 1-dimensional\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n      return c;\n    }\n\n    // a is 1-dim, b is column\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n      return _c;\n    }\n\n    // a is column, b is 1-dim\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n      return _c2;\n    }\n\n    // both vectors are column\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n      return _c3;\n    }\n  }\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values;\n\n    // TODO optimize add & mul using datatype\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n      if (I < J) {\n        i++;\n        continue;\n      }\n      if (I > J) {\n        j++;\n        continue;\n      }\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n    return c;\n  }\n\n  // TODO remove this once #1771 is fixed\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});", "import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    add\n  } = _ref;\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0;\n            // loop diagonal\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            }\n            // return trace\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});", "import { factory } from '../../../utils/factory.js';\nimport { isBigNumber, isMatrix } from '../../../utils/is.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});", "import { clone } from '../../../utils/object.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'lup';\nvar dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];\nexport var createLup = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    abs,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    larger,\n    equalScalar,\n    unaryMinus,\n    DenseMatrix,\n    SparseMatrix,\n    Spa\n  } = _ref;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  return typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseLUP(m);\n      // result\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix array, clone original data\n    var data = clone(m._data);\n    // l matrix arrays\n    var ldata = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var udata = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vector\n    var p = [];\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j);\n          // v[i, j]\n          var s = 0;\n          // loop up to min\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n          data[i][j] = subtract(data[i][j], s);\n        }\n      }\n      // row with larger value in cvector, row >= j\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0;\n      // loop rows\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j];\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      }\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0];\n        // swap j <-> pi in data\n        DenseMatrix._swapRows(j, pi, data);\n      }\n      // check column is in lower triangular matrix\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          }\n          // L\n          ldata[i] = [];\n        }\n        // check we are in the upper triangular matrix\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n          continue;\n        }\n        // diagonal value\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n          continue;\n        }\n        // check row exists in upper triangular matrix\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        }\n        // check column exists in lower triangular matrix\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    }\n    // l matrix\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    });\n    // u matrix\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    });\n    // p vector\n    var pv = [];\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    }\n    // return matrices\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix arrays (will not be modified, thanks to permutation vector)\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // l matrix arrays\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vectors, (current index -> original index) and (original index -> current index)\n    var pvCo = [];\n    var pvOc = [];\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    }\n    // swap indices in permutation vectors (condition x < y)!\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y];\n      // update permutation vector current -> original\n      pvCo[kx] = y;\n      pvCo[ky] = x;\n      // update permutation vector original -> current\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    };\n    // loop columns\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa();\n      // check lower triangular matrix has a value @ column j\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length);\n        // first value in j column for lower triangular matrix\n        lvalues.push(1);\n        lindex.push(j);\n      }\n      // update ptr\n      uptr.push(uvalues.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // copy column j into sparse accumulator\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k];\n        // copy column values into sparse accumulator (use permutation vector)\n        spa.set(pvCo[i], values[k]);\n      }\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      }\n      // row with larger value in spa, row >= j\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj);\n      // loop values in spa (order by row, below diagonal)\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      });\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n        // swap values j <-> pi in U\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n        // swap values in spa\n        spa.swap(j, pi);\n        // update permutation vector (swap values @ j, pi)\n        swapIndeces(j, pi);\n      }\n      // loop values in spa (order by row)\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj);\n          // check value is non zero\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n    for (j = 0; j < columns; j++) {\n      _loop();\n    }\n    // update ptrs\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length);\n\n    // return matrices\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n});", "import _extends from \"@babel/runtime/helpers/extends\";\nimport { factory } from '../../../utils/factory.js';\nvar name = 'qr';\nvar dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];\nexport var createQr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    zeros,\n    identity,\n    isZero,\n    equal,\n    sign,\n    sqrt,\n    conj,\n    unaryMinus,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    complex\n  } = _ref;\n  /**\n   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in\n   * two matrices (`Q`, `R`) where `Q` is an\n   * orthogonal matrix and `R` is an upper triangular matrix.\n   *\n   * Syntax:\n   *\n   *    math.qr(A)\n   *\n   * Example:\n   *\n   *    const m = [\n   *      [1, -1,  4],\n   *      [1,  4, -2],\n   *      [1,  4,  2],\n   *      [1,  -1, 0]\n   *    ]\n   *    const result = math.qr(m)\n   *    // r = {\n   *    //   Q: [\n   *    //     [0.5, -0.5,   0.5],\n   *    //     [0.5,  0.5,  -0.5],\n   *    //     [0.5,  0.5,   0.5],\n   *    //     [0.5, -0.5,  -0.5],\n   *    //   ],\n   *    //   R: [\n   *    //     [2, 3,  2],\n   *    //     [0, 5, -2],\n   *    //     [0, 0,  4],\n   *    //     [0, 0,  0]\n   *    //   ]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lusolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array\n   * for which to get the QR decomposition.\n   *\n   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal\n   * matrix and R: the upper triangular matrix\n   */\n  return _extends(typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseQR(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseQR(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseQR(m);\n      // result\n      return {\n        Q: r.Q.valueOf(),\n        R: r.R.valueOf()\n      };\n    }\n  }), {\n    _denseQRimpl\n  });\n  function _denseQRimpl(m) {\n    // rows & columns (m x n)\n    var rows = m._size[0]; // m\n    var cols = m._size[1]; // n\n\n    var Q = identity([rows], 'dense');\n    var Qdata = Q._data;\n    var R = m.clone();\n    var Rdata = R._data;\n\n    // vars\n    var i, j, k;\n    var w = zeros([rows], '');\n    for (k = 0; k < Math.min(cols, rows); ++k) {\n      /*\n       * **k-th Household matrix**\n       *\n       * The matrix I - 2*v*transpose(v)\n       * x     = first column of A\n       * x1    = first element of x\n       * alpha = x1 / |x1| * |x|\n       * e1    = tranpose([1, 0, 0, ...])\n       * u     = x - alpha * e1\n       * v     = u / |u|\n       *\n       * Household matrix = I - 2 * v * tranpose(v)\n       *\n       *  * Initially Q = I and R = A.\n       *  * Household matrix is a reflection in a plane normal to v which\n       *    will zero out all but the top right element in R.\n       *  * Appplying reflection to both Q and R will not change product.\n       *  * Repeat this process on the (1,1) minor to get R as an upper\n       *    triangular matrix.\n       *  * Reflections leave the magnitude of the columns of Q unchanged\n       *    so Q remains othoganal.\n       *\n       */\n\n      var pivot = Rdata[k][k];\n      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));\n      var conjSgn = conj(sgn);\n      var alphaSquared = 0;\n      for (i = k; i < rows; i++) {\n        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));\n      }\n      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));\n      if (!isZero(alpha)) {\n        // first element in vector u\n        var u1 = subtract(pivot, alpha);\n\n        // w = v * u1 / |u|    (only elements k to (rows-1) are used)\n        w[k] = 1;\n        for (i = k + 1; i < rows; i++) {\n          w[i] = divideScalar(Rdata[i][k], u1);\n        }\n\n        // tau = - conj(u1 / alpha)\n        var tau = unaryMinus(conj(divideScalar(u1, alpha)));\n        var s = void 0;\n\n        /*\n         * tau and w have been choosen so that\n         *\n         * 2 * v * tranpose(v) = tau * w * tranpose(w)\n         */\n\n        /*\n         * -- calculate R = R - tau * w * tranpose(w) * R --\n         * Only do calculation with rows k to (rows-1)\n         * Additionally columns 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (j = k; j < cols; j++) {\n          s = 0.0;\n\n          // calculate jth element of [tranpose(w) * R]\n          for (i = k; i < rows; i++) {\n            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));\n          }\n\n          // calculate the jth element of [tau * transpose(w) * R]\n          s = multiplyScalar(s, tau);\n          for (i = k; i < rows; i++) {\n            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);\n          }\n        }\n        /*\n         * -- calculate Q = Q - tau * Q * w * transpose(w) --\n         * Q is a square matrix (rows x rows)\n         * Only do calculation with columns k to (rows-1)\n         * Additionally rows 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (i = 0; i < rows; i++) {\n          s = 0.0;\n\n          // calculate ith element of [Q * w]\n          for (j = k; j < rows; j++) {\n            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));\n          }\n\n          // calculate the ith element of [tau * Q * w]\n          s = multiplyScalar(s, tau);\n          for (j = k; j < rows; ++j) {\n            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);\n          }\n        }\n      }\n    }\n\n    // return matrices\n    return {\n      Q,\n      R,\n      toString: function toString() {\n        return 'Q: ' + this.Q.toString() + '\\nR: ' + this.R.toString();\n      }\n    };\n  }\n  function _denseQR(m) {\n    var ret = _denseQRimpl(m);\n    var Rdata = ret.R._data;\n    if (m._data.length > 0) {\n      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;\n      for (var i = 0; i < Rdata.length; ++i) {\n        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {\n          Rdata[i][j] = zero;\n        }\n      }\n    }\n    return ret;\n  }\n  function _sparseQR(m) {\n    throw new Error('qr not implemented for sparse matrices yet');\n  }\n});", "/**\n * Permutes a sparse matrix C = P * A * Q\n *\n * @param {SparseMatrix}  a         The Matrix A\n * @param {Array}   pinv            The row permutation vector\n * @param {Array}   q               The column permutation vector\n * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n *\n * @return {Matrix}                 C = P * A * Q, null on error\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPermute(a, pinv, q, values) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  var adt = a._datatype;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n  // c arrays\n  var cvalues = values && a._values ? [] : null;\n  var cindex = []; // (aptr[n])\n  var cptr = []; // (n + 1)\n  // initialize vars\n  var nz = 0;\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // column k of C is column q[k] of A\n    cptr[k] = nz;\n    // apply column permutation\n    var j = q ? q[k] : k;\n    // loop values in column j of A\n    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n      // row i of A is row pinv[i] of C\n      var r = pinv ? pinv[aindex[t]] : aindex[t];\n      // index\n      cindex[nz] = r;\n      // check we need to populate values\n      if (cvalues) {\n        cvalues[nz] = avalues[t];\n      }\n      // increment number of nonzero elements\n      nz++;\n    }\n  }\n  // finalize the last column of C\n  cptr[n] = nz;\n  // return C matrix\n  return a.createSparseMatrix({\n    values: cvalues,\n    index: cindex,\n    ptr: cptr,\n    size: [m, n],\n    datatype: adt\n  });\n}", "/**\n * Depth-first search and postorder of a tree rooted at node j\n *\n * @param {Number}  j               The tree node\n * @param {Number}  k\n * @param {Array}   w               The workspace array\n * @param {Number}  head            The index offset within the workspace for the head array\n * @param {Number}  next            The index offset within the workspace for the next array\n * @param {Array}   post            The post ordering array\n * @param {Number}  stack           The index offset within the workspace for the stack array\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csTdfs(j, k, w, head, next, post, stack) {\n  // variables\n  var top = 0;\n  // place j on the stack\n  w[stack] = j;\n  // while (stack is not empty)\n  while (top >= 0) {\n    // p = top of stack\n    var p = w[stack + top];\n    // i = youngest child of p\n    var i = w[head + p];\n    if (i === -1) {\n      // p has no unordered children left\n      top--;\n      // node p is the kth postordered node\n      post[k++] = p;\n    } else {\n      // remove i from children of p\n      w[head + p] = w[next + i];\n      // increment top\n      ++top;\n      // start dfs on child node i\n      w[stack + top] = i;\n    }\n  }\n  return k;\n}", "import { csTdfs } from './csTdfs.js';\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  }\n  // vars\n  var k = 0;\n  var j;\n  // allocate result\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n  var w = []; // (3 * n)\n  var head = 0;\n  var next = n;\n  var stack = 2 * n;\n  // initialize workspace\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  }\n  // traverse nodes in reverse order\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    }\n    // add j to list of its parent\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  }\n  // loop nodes\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    }\n    // depth-first search\n    k = csTdfs(j, k, w, head, next, post, stack);\n  }\n  return post;\n}", "/**\n * Computes the elimination tree of Matrix A (using triu(A)) or the\n * elimination tree of A'A without forming A'A.\n *\n * @param {Matrix}  a               The A Matrix\n * @param {boolean} ata             A value of true the function computes the etree of A'A\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csEtree(a, ata) {\n  // check inputs\n  if (!a) {\n    return null;\n  }\n  // a arrays\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n\n  // allocate result\n  var parent = []; // (n)\n\n  // allocate workspace\n  var w = []; // (n + (ata ? m : 0))\n  var ancestor = 0; // first n entries in w\n  var prev = n; // last m entries (ata = true)\n\n  var i, inext;\n\n  // check we are calculating A'A\n  if (ata) {\n    // initialize workspace\n    for (i = 0; i < m; i++) {\n      w[prev + i] = -1;\n    }\n  }\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // node k has no parent yet\n    parent[k] = -1;\n    // nor does k have an ancestor\n    w[ancestor + k] = -1;\n    // values in column k\n    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n      // row\n      var r = aindex[p];\n      // node\n      i = ata ? w[prev + r] : r;\n      // traverse from i to k\n      for (; i !== -1 && i < k; i = inext) {\n        // inext = ancestor of i\n        inext = w[ancestor + i];\n        // path compression\n        w[ancestor + i] = k;\n        // check no anc., parent is k\n        if (inext === -1) {\n          parent[i] = k;\n        }\n      }\n      if (ata) {\n        w[prev + r] = k;\n      }\n    }\n  }\n  return parent;\n}", "/**\n * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n *\n * @param {Matrix}   a              The sparse matrix\n * @param {function} callback       The callback function, function will be invoked with the following args:\n *                                    - The entry row\n *                                    - The entry column\n *                                    - The entry value\n *                                    - The state parameter\n * @param {any}      other          The state\n *\n * @return                          The number of nonzero elements in the matrix\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFkeep(a, callback, other) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // columns\n  var n = asize[1];\n  // nonzero items\n  var nz = 0;\n  // loop columns\n  for (var j = 0; j < n; j++) {\n    // get current location of col j\n    var p = aptr[j];\n    // record new location of col j\n    aptr[j] = nz;\n    for (; p < aptr[j + 1]; p++) {\n      // check we need to keep this item\n      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n        // keep A(i,j)\n        aindex[nz] = aindex[p];\n        // check we need to process values (pattern only)\n        if (avalues) {\n          avalues[nz] = avalues[p];\n        }\n        // increment nonzero items\n        nz++;\n      }\n    }\n  }\n  // finalize A\n  aptr[n] = nz;\n  // trim arrays\n  aindex.splice(nz, aindex.length - nz);\n  // check we need to process values (pattern only)\n  if (avalues) {\n    avalues.splice(nz, avalues.length - nz);\n  }\n  // return number of nonzero items\n  return nz;\n}", "/**\n * This function \"flips\" its input about the integer -1.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFlip(i) {\n  // flip the value\n  return -i - 2;\n}", "import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    csFkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n\n    // allocate result (n+1)\n    var P = [];\n\n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1); // next n + 1 entries\n    var elen = 4 * (n + 1); // next n + 1 entries\n    var degree = 5 * (n + 1); // next n + 1 entries\n    var w = 6 * (n + 1); // next n + 1 entries\n    var hhead = 7 * (n + 1); // last n + 1 entries\n\n    // use P as workspace for last\n    var last = P;\n\n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n\n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n\n    // minimum degree node\n    var mindeg = 0;\n\n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n\n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      }\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] === 0\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          }\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          }\n          // check we need to remove i from degree list\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) {\n        cnz = pk2;\n      }\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n\n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n\n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        }\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n\n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n\n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) {\n            continue;\n          }\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n\n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) {\n          continue;\n        }\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n\n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        }\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        }\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n\n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n\n    // fix assembly tree\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    }\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      }\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n\n    // check order = 2, drop dense columns from M'\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        }\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n\n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  }\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  }\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n        if (h !== -1) {\n          last[h] = i;\n        }\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  }\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n      mark = 2;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  }\n  function _diag(i, j) {\n    return i !== j;\n  }\n});", "/**\n * This function determines if j is a leaf of the ith row subtree.\n * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n *\n * @param {Number}  i               The ith row subtree\n * @param {Number}  j               The node to test\n * @param {Array}   w               The workspace array\n * @param {Number}  first           The index offset within the workspace for the first array\n * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n *\n * @return {Object}\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {\n  var s, sparent;\n\n  // our result\n  var jleaf = 0;\n  var q;\n\n  // check j is a leaf\n  if (i <= j || w[first + j] <= w[maxfirst + i]) {\n    return -1;\n  }\n  // update max first[j] seen so far\n  w[maxfirst + i] = w[first + j];\n  // jprev = previous leaf of ith subtree\n  var jprev = w[prevleaf + i];\n  w[prevleaf + i] = j;\n\n  // check j is first or subsequent leaf\n  if (jprev === -1) {\n    // 1st leaf, q = root of ith subtree\n    jleaf = 1;\n    q = i;\n  } else {\n    // update jleaf\n    jleaf = 2;\n    // q = least common ancester (jprev,j)\n    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {\n      ;\n    }\n    for (s = jprev; s !== q; s = sparent) {\n      // path compression\n      sparent = w[ancestor + s];\n      w[ancestor + s] = q;\n    }\n  }\n  return {\n    jleaf,\n    q\n  };\n}", "import { factory } from '../../../utils/factory.js';\nimport { csLeaf } from './csLeaf.js';\nvar name = 'csCounts';\nvar dependencies = ['transpose'];\nexport var createCsCounts = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    transpose\n  } = _ref;\n  /**\n   * Computes the column counts using the upper triangular part of A.\n   * It transposes A internally, none of the input parameters are modified.\n   *\n   * @param {Matrix} a           The sparse matrix A\n   *\n   * @param {Matrix} ata         Count the columns of A'A instead\n   *\n   * @return                     An array of size n of the column counts or null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function (a, parent, post, ata) {\n    // check inputs\n    if (!a || !parent || !post) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // variables\n    var i, j, k, J, p, p0, p1;\n\n    // workspace size\n    var s = 4 * n + (ata ? n + m + 1 : 0);\n    // allocate workspace\n    var w = []; // (s)\n    var ancestor = 0; // first n entries\n    var maxfirst = n; // next n entries\n    var prevleaf = 2 * n; // next n entries\n    var first = 3 * n; // next n entries\n    var head = 4 * n; // next n + 1 entries (used when ata is true)\n    var next = 5 * n + 1; // last entries in workspace\n    // clear workspace w[0..s-1]\n    for (k = 0; k < s; k++) {\n      w[k] = -1;\n    }\n\n    // allocate result\n    var colcount = []; // (n)\n\n    // AT = A'\n    var at = transpose(a);\n    // at arrays\n    var tindex = at._index;\n    var tptr = at._ptr;\n\n    // find w[first + j]\n    for (k = 0; k < n; k++) {\n      j = post[k];\n      // colcount[j]=1 if j is a leaf\n      colcount[j] = w[first + j] === -1 ? 1 : 0;\n      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {\n        w[first + j] = k;\n      }\n    }\n\n    // initialize ata if needed\n    if (ata) {\n      // invert post\n      for (k = 0; k < n; k++) {\n        w[post[k]] = k;\n      }\n      // loop rows (columns in AT)\n      for (i = 0; i < m; i++) {\n        // values in column i of AT\n        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {\n          k = Math.min(k, w[tindex[p]]);\n        }\n        // place row i in linked list k\n        w[next + i] = w[head + k];\n        w[head + k] = i;\n      }\n    }\n\n    // each node in its own set\n    for (i = 0; i < n; i++) {\n      w[ancestor + i] = i;\n    }\n    for (k = 0; k < n; k++) {\n      // j is the kth node in postordered etree\n      j = post[k];\n      // check j is not a root\n      if (parent[j] !== -1) {\n        colcount[parent[j]]--;\n      }\n\n      // J=j for LL'=A case\n      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {\n        for (p = tptr[J]; p < tptr[J + 1]; p++) {\n          i = tindex[p];\n          var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n          // check A(i,j) is in skeleton\n          if (r.jleaf >= 1) {\n            colcount[j]++;\n          }\n          // check account for overlap in q\n          if (r.jleaf === 2) {\n            colcount[r.q]--;\n          }\n        }\n      }\n      if (parent[j] !== -1) {\n        w[ancestor + j] = parent[j];\n      }\n    }\n    // sum up colcount's of each child\n    for (j = 0; j < n; j++) {\n      if (parent[j] !== -1) {\n        colcount[parent[j]] += colcount[j];\n      }\n    }\n    return colcount;\n  };\n});", "import { csPermute } from './csPermute.js';\nimport { csPost } from './csPost.js';\nimport { csEtree } from './csEtree.js';\nimport { createCsAmd } from './csAmd.js';\nimport { createCsCounts } from './csCounts.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSqr';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsSqr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  var csAmd = createCsAmd({\n    add,\n    multiply,\n    transpose\n  });\n  var csCounts = createCsCounts({\n    transpose\n  });\n\n  /**\n   * Symbolic ordering and analysis for QR and LU decompositions.\n   *\n   * @param {Number}  order           The ordering strategy (see csAmd for more details)\n   * @param {Matrix}  a               The A matrix\n   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n   *                                  symbolic ordering and analysis for LU decomposition (false)\n   *\n   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSqr(order, a, qr) {\n    // a arrays\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // vars\n    var k;\n    // symbolic analysis result\n    var s = {};\n    // fill-reducing ordering\n    s.q = csAmd(order, a);\n    // validate results\n    if (order && !s.q) {\n      return null;\n    }\n    // QR symbolic analysis\n    if (qr) {\n      // apply permutations if needed\n      var c = order ? csPermute(a, null, s.q, 0) : a;\n      // etree of C'*C, where C=A(:,q)\n      s.parent = csEtree(c, 1);\n      // post order elimination tree\n      var post = csPost(s.parent, n);\n      // col counts chol(C'*C)\n      s.cp = csCounts(c, s.parent, post, 1);\n      // check we have everything needed to calculate number of nonzero elements\n      if (c && s.parent && s.cp && _vcount(c, s)) {\n        // calculate number of nonzero elements\n        for (s.unz = 0, k = 0; k < n; k++) {\n          s.unz += s.cp[k];\n        }\n      }\n    } else {\n      // for LU factorization only, guess nnz(L) and nnz(U)\n      s.unz = 4 * aptr[n] + n;\n      s.lnz = s.unz;\n    }\n    // return result S\n    return s;\n  };\n\n  /**\n   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n   */\n  function _vcount(a, s) {\n    // a arrays\n    var aptr = a._ptr;\n    var aindex = a._index;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize s arrays\n    s.pinv = []; // (m + n)\n    s.leftmost = []; // (m)\n    // vars\n    var parent = s.parent;\n    var pinv = s.pinv;\n    var leftmost = s.leftmost;\n    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n    var w = []; // (m + 3 * n)\n    var next = 0;\n    var head = m;\n    var tail = m + n;\n    var nque = m + 2 * n;\n    // vars\n    var i, k, p, p0, p1;\n    // initialize w\n    for (k = 0; k < n; k++) {\n      // queue k is empty\n      w[head + k] = -1;\n      w[tail + k] = -1;\n      w[nque + k] = 0;\n    }\n    // initialize row arrays\n    for (i = 0; i < m; i++) {\n      leftmost[i] = -1;\n    }\n    // loop columns backwards\n    for (k = n - 1; k >= 0; k--) {\n      // values & index for column k\n      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // leftmost[i] = min(find(A(i,:)))\n        leftmost[aindex[p]] = k;\n      }\n    }\n    // scan rows in reverse order\n    for (i = m - 1; i >= 0; i--) {\n      // row i is not yet ordered\n      pinv[i] = -1;\n      k = leftmost[i];\n      // check row i is empty\n      if (k === -1) {\n        continue;\n      }\n      // first row in queue k\n      if (w[nque + k]++ === 0) {\n        w[tail + k] = i;\n      }\n      // put i at head of queue k\n      w[next + i] = w[head + k];\n      w[head + k] = i;\n    }\n    s.lnz = 0;\n    s.m2 = m;\n    // find row permutation and nnz(V)\n    for (k = 0; k < n; k++) {\n      // remove row i from queue k\n      i = w[head + k];\n      // count V(k,k) as nonzero\n      s.lnz++;\n      // add a fictitious row\n      if (i < 0) {\n        i = s.m2++;\n      }\n      // associate row i with V(:,k)\n      pinv[i] = k;\n      // skip if V(k+1:m,k) is empty\n      if (--nque[k] <= 0) {\n        continue;\n      }\n      // nque[k] is nnz (V(k+1:m,k))\n      s.lnz += w[nque + k];\n      // move all rows to parent of k\n      var pa = parent[k];\n      if (pa !== -1) {\n        if (w[nque + pa] === 0) {\n          w[tail + pa] = w[tail + k];\n        }\n        w[next + w[tail + k]] = w[head + pa];\n        w[head + pa] = w[next + i];\n        w[nque + pa] += w[nque + k];\n      }\n    }\n    for (i = 0; i < m; i++) {\n      if (pinv[i] < 0) {\n        pinv[i] = k++;\n      }\n    }\n    return true;\n  }\n});", "/**\n * Checks if the node at w[j] is marked\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMarked(w, j) {\n  // check node is marked\n  return w[j] < 0;\n}", "import { csFlip } from './csFlip.js';\n\n/**\n * Marks the node at w[j]\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMark(w, j) {\n  // mark w[j]\n  w[j] = csFlip(w[j]);\n}", "import { csFlip } from './csFlip.js';\n\n/**\n * Flips the value if it is negative of returns the same value otherwise.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csUnflip(i) {\n  // flip the value if it is negative\n  return i < 0 ? csFlip(i) : i;\n}", "import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csUnflip } from './csUnflip.js';\n\n/**\n * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n * at nodes in B (see csReach()).\n *\n * @param {Number}  j               The starting node for the DFS algorithm\n * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n * @param {Number}  top             Start index in stack xi[top..n-1]\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n *\n * @return {Number}                 New value of top\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csDfs(j, g, top, xi, pinv) {\n  // g arrays\n  var index = g._index;\n  var ptr = g._ptr;\n  var size = g._size;\n  // columns\n  var n = size[1];\n  // vars\n  var i, p, p2;\n  // initialize head\n  var head = 0;\n  // initialize the recursion stack\n  xi[0] = j;\n  // loop\n  while (head >= 0) {\n    // get j from the top of the recursion stack\n    j = xi[head];\n    // apply permutation vector\n    var jnew = pinv ? pinv[j] : j;\n    // check node j is marked\n    if (!csMarked(ptr, j)) {\n      // mark node j as visited\n      csMark(ptr, j);\n      // update stack (last n entries in xi)\n      xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);\n    }\n    // node j done if no unvisited neighbors\n    var done = 1;\n    // examine all neighbors of j, stack (last n entries in xi)\n    for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {\n      // consider neighbor node i\n      i = index[p];\n      // check we have visited node i, skip it\n      if (csMarked(ptr, i)) {\n        continue;\n      }\n      // pause depth-first search of node j, update stack (last n entries in xi)\n      xi[n + head] = p;\n      // start dfs at node i\n      xi[++head] = i;\n      // node j is not done\n      done = 0;\n      // break, to start dfs(i)\n      break;\n    }\n    // check depth-first search at node j is done\n    if (done) {\n      // remove j from the recursion stack\n      head--;\n      // and place in the output stack\n      xi[--top] = j;\n    }\n  }\n  return top;\n}", "import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csDfs } from './csDfs.js';\n\n/**\n * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1\n * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n *\n * @param {Matrix}  g               The G matrix\n * @param {Matrix}  b               The B matrix\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector\n *\n * @return {Number}                 The index for the nonzero pattern\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csReach(g, b, k, xi, pinv) {\n  // g arrays\n  var gptr = g._ptr;\n  var gsize = g._size;\n  // b arrays\n  var bindex = b._index;\n  var bptr = b._ptr;\n  // columns\n  var n = gsize[1];\n  // vars\n  var p, p0, p1;\n  // initialize top\n  var top = n;\n  // loop column indeces in B\n  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n    // node i\n    var i = bindex[p];\n    // check node i is marked\n    if (!csMarked(gptr, i)) {\n      // start a dfs at unmarked node i\n      top = csDfs(i, g, top, xi, pinv);\n    }\n  }\n  // loop columns from top -> n - 1\n  for (p = top; p < n; p++) {\n    // restore G\n    csMark(gptr, xi[p]);\n  }\n  return top;\n}", "import { csReach } from './csReach.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSpsolve';\nvar dependencies = ['divideScalar', 'multiply', 'subtract'];\nexport var createCsSpsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    divideScalar,\n    multiply,\n    subtract\n  } = _ref;\n  /**\n   * The function csSpsolve() computes the solution to G * x = bk, where bk is the\n   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U\n   * is upper triangular with the diagonal entry as the last entry in each column.\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   x               The soluton to the linear system G * x = b\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSpsolve(g, b, k, xi, x, pinv, lo) {\n    // g arrays\n    var gvalues = g._values;\n    var gindex = g._index;\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // columns\n    var n = gsize[1];\n    // b arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // vars\n    var p, p0, p1, q;\n    // xi[top..n-1] = csReach(B(:,k))\n    var top = csReach(g, b, k, xi, pinv);\n    // clear x\n    for (p = top; p < n; p++) {\n      x[xi[p]] = 0;\n    }\n    // scatter b\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n      x[bindex[p]] = bvalues[p];\n    }\n    // loop columns\n    for (var px = top; px < n; px++) {\n      // x array index for px\n      var j = xi[px];\n      // apply permutation vector (U x = b), j maps to column J of G\n      var J = pinv ? pinv[j] : j;\n      // check column J is empty\n      if (J < 0) {\n        continue;\n      }\n      // column value indeces in G, p0 <= p < p1\n      p0 = gptr[J];\n      p1 = gptr[J + 1];\n      // x(j) /= G(j,j)\n      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]);\n      // first entry L(j,j)\n      p = lo ? p0 + 1 : p0;\n      q = lo ? p1 : p1 - 1;\n      // loop\n      for (; p < q; p++) {\n        // row\n        var i = gindex[p];\n        // x(i) -= G(i,j) * x(j)\n        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n      }\n    }\n    // return top of stack\n    return top;\n  };\n});", "import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    }\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz)\n    var lptr = []; // (n + 1)\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz)\n    var uindex = []; // (unz)\n    var uptr = []; // (n + 1)\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n)\n    // vars\n    var i, p;\n    // allocate arrays\n    var x = []; // (n)\n    var xi = []; // (2 * n)\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      }\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      }\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    }\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);\n    // return LU factor\n    return {\n      L,\n      U,\n      pinv\n    };\n  };\n});", "import { isInteger } from '../../../utils/number.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createCsSqr } from '../sparse/csSqr.js';\nimport { createCsLu } from '../sparse/csLu.js';\nvar name = 'slu';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createSlu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    transpose,\n    divideScalar,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSqr = createCsSqr({\n    add,\n    multiply,\n    transpose\n  });\n  var csLu = createCsLu({\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  });\n\n  /**\n   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n   *\n   * `P * A * Q = L * U`\n   *\n   * Syntax:\n   *\n   *    math.slu(A, order, threshold)\n   *\n   * Examples:\n   *\n   *    const A = math.sparse([[4,3], [6, 3]])\n   *    math.slu(A, 1, 0.001)\n   *    // returns:\n   *    // {\n   *    //   L: [[1, 0], [1.5, 1]]\n   *    //   U: [[4, 3], [0, -1.5]]\n   *    //   p: [0, 1]\n   *    //   q: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lsolve, usolve, lusolve\n   *\n   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n   *                                       0 - Natural ordering, no permutation vector q is returned\n   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.\n   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n   */\n  return typed(name, {\n    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {\n      // verify order\n      if (!isInteger(order) || order < 0 || order > 3) {\n        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n      }\n      // verify threshold\n      if (threshold < 0 || threshold > 1) {\n        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n      }\n\n      // perform symbolic ordering and analysis\n      var s = csSqr(order, a, false);\n\n      // perform lu decomposition\n      var f = csLu(a, s, threshold);\n\n      // return decomposition\n      return {\n        L: f.L,\n        U: f.U,\n        p: f.pinv,\n        q: s.q,\n        toString: function toString() {\n          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n        }\n      };\n    }\n  });\n});", "/**\n * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n *\n * @param {Array} p           The permutation vector of length n. null value denotes identity\n * @param {Array} b           The input vector\n *\n * @return {Array}            The output vector x = P'b\n */\nexport function csIpvec(p, b) {\n  // vars\n  var k;\n  var n = b.length;\n  var x = [];\n  // check permutation vector was provided, p = null denotes identity\n  if (p) {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // apply permutation\n      x[p[k]] = b[k];\n    }\n  } else {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // x[i] = b[i]\n      x[k] = b[k];\n    }\n  }\n  return x;\n}", "import { isArray, isMatrix } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nimport { csIpvec } from '../sparse/csIpvec.js';\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nexport var createLusolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    lup,\n    slu,\n    usolve,\n    lsolve,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  function _toMatrix(a) {\n    if (isMatrix(a)) {\n      return a;\n    }\n    if (isArray(a)) {\n      return matrix(a);\n    }\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u);\n\n    // apply row permutations if needed (b is a DenseMatrix)\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = csIpvec(p, b._data);\n    }\n\n    // use forward substitution to resolve L * y = b\n    var y = lsolve(l, b);\n    // use backward substitution to resolve U * x = y\n    var x = usolve(u, y);\n\n    // apply column permutations if needed (x is a DenseMatrix)\n    if (q) {\n      x._data = csIpvec(q, x._data);\n    }\n    return x;\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n            var _denom = unaryMinus(multiply(3, _a));\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)),\n              // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            }\n            // OK, we have three distinct roots\n            var Ccubed;\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n              return r;\n            });\n          }\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});", "import { isMatrix } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];\nexport var createDet = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply,\n    divideScalar,\n    isZero,\n    unaryMinus\n  } = _ref;\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n      if (isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n      switch (size.length) {\n        case 0:\n          // scalar\n          return clone(x);\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Bareiss algorithm\n      // this algorithm have same complexity as LUP decomposition (O(n^3))\n      // but it preserve precision of floating point more relative to the LUP decomposition\n      var negated = false;\n      var rowIndices = new Array(rows).fill(0).map((_, i) => i); // matrix index of row i\n      for (var k = 0; k < rows; k++) {\n        var k_ = rowIndices[k];\n        if (isZero(matrix[k_][k])) {\n          var _k = void 0;\n          for (_k = k + 1; _k < rows; _k++) {\n            if (!isZero(matrix[rowIndices[_k]][k])) {\n              k_ = rowIndices[_k];\n              rowIndices[_k] = rowIndices[k];\n              rowIndices[k] = k_;\n              negated = !negated;\n              break;\n            }\n          }\n          if (_k === rows) return matrix[k_][k]; // some zero of the type\n        }\n\n        var piv = matrix[k_][k];\n        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];\n        for (var i = k + 1; i < rows; i++) {\n          var i_ = rowIndices[i];\n          for (var j = k + 1; j < rows; j++) {\n            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);\n          }\n        }\n      }\n      var det = matrix[rowIndices[rows - 1]][rows - 1];\n      return negated ? unaryMinus(det) : det;\n    }\n  }\n});", "import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nvar name = 'inv';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];\nexport var createInv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    addScalar,\n    multiply,\n    unaryMinus,\n    det,\n    identity,\n    abs\n  } = _ref;\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          // two dimensional array\n          {\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              if (isMatrix(x)) {\n                return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n              } else {\n                // return an Array\n                return _inv(x, rows, cols);\n              }\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = identity(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n          r++;\n        }\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        r = rBig;\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c];\n        var Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n});", "import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nexport var createPinv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    inv,\n    deepEqual,\n    equal,\n    dotDivide,\n    dot,\n    ctranspose,\n    divideScalar,\n    multiply,\n    add,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {\n                  // Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n            if (isMatrix(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return clone(x); // zero\n      return divideScalar(1, x);\n    }\n  });\n\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n  function _pinv(mat, rows, cols) {\n    var {\n      C,\n      F\n    } = _rankFact(mat, rows, cols); // TODO: Use SVD instead (may improve precision)\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n  function _rref(mat, rows, cols) {\n    var M = clone(mat);\n    var lead = 0;\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n      var i = r;\n      while (_isZero(M[i][lead])) {\n        i++;\n        if (rows === i) {\n          i = r;\n          lead++;\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n      [M[i], M[r]] = [M[r], M[i]];\n      var val = M[r][lead];\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n      lead++;\n    }\n    return M;\n  }\n\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n    var C = mat.map((_, i) => _.filter((_, j) => j < rows && !_isZero(dot(rref[j], rref[j]))));\n    var F = rref.filter((_, i) => !_isZero(dot(rref[i], rref[i])));\n    return {\n      C,\n      F\n    };\n  }\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});", "import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    }\n\n    // TODO check if any row/col are zero except the diagonal\n\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n    // MODIFIES arr by side effect!\n    var R = balance(arr, N, prec, type, findVectors);\n\n    // R is the row transformation matrix\n    // arr = A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // (And so to return to original matrix: A = R⁻¹ arr R)\n\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n    // MODIFIES arr by side effect!\n    reduceToHessenberg(arr, N, prec, type, findVectors, R);\n    // still true that original A = R⁻¹ arr R)\n\n    // find eigenvalues\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors);\n\n    // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms arr, the hessenberg\n    // matrix, to upper triangular\n    // (So U = C⁻¹ arr C and the relationship between current arr\n    // and original A is unchanged.)\n\n    var vectors;\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, R, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var realzero = big ? bignumber(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    var realone = big ? bignumber(1) : 1;\n\n    // base of the floating-point arithmetic\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix);\n\n    // the diagonal transformation matrix R\n    var Rdiag;\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    }\n\n    // this isn't the only time we loop thru the matrix...\n    var last = false;\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = realzero;\n        var rowNorm = realzero;\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]); // should be real\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n\n          var f = realone;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          }\n\n          // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95));\n\n          // apply balancing similarity transformation\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            }\n\n            // keep track of transformations\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    }\n\n    // return the diagonal row transformation matrix\n    return diag(Rdiag);\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    if (big) {\n      prec = bignumber(prec);\n    }\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n\n      var maxIndex = 0;\n      var max = zero;\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      }\n\n      // This col is pivoted, no need to do anything\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1;\n\n        // Interchange maxIndex-th and (i+1)-th column\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      }\n\n      // Reduce following rows and columns\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n        if (n === 0) {\n          continue;\n        }\n\n        // from j-th row subtract n-times (i+1)th row\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        }\n\n        // to (i+1)th column add n-times j-th column\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n    return R;\n  }\n\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n    var arr = clone(A);\n\n    // the list of converged eigenvalues\n    var lambdas = [];\n\n    // size of arr, which will get smaller as eigenvalues converge\n    var n = N;\n\n    // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n    var Sdiag = [];\n\n    // N×N matrix describing the overall transformation done during the QR algorithm\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined;\n\n    // n×n matrix describing the QR transformations done since last convergence\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined;\n\n    // last eigenvalue converged before this many steps\n    var lastConvergenceBefore = 0;\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1;\n\n      // TODO if the convergence is slow, do something clever\n\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      }\n\n      // TODO do an implicit QR transformation\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      }\n\n      // keep track of transformations\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      }\n\n      // The rightmost diagonal element converged to an eigenvalue\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 1;\n        arr.pop();\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        }\n\n        // The rightmost diagonal 2x2 block converged\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 2;\n        arr.pop();\n        arr.pop();\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n          arr[_i3].pop();\n        }\n      }\n      if (n === 0) {\n        break;\n      }\n    }\n\n    // standard sorting\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b)));\n\n    // the algorithm didn't converge\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    }\n\n    // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n\n  /**\n   * @param {Matrix} A hessenberg-form matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {Matrix} R similarity that turns original matrix into A\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n  function findEigenvectors(A, N, C, R, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n    var uniqueValues = [];\n    var multiplicities = [];\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    }\n\n    // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one));\n\n    // eigenvalues for which usolve failed (due to numerical error)\n    var failedLambdas = [];\n    var _loop = function _loop(_i4) {\n      var λ = uniqueValues[_i4];\n      var S = subtract(U, multiply(λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(S, b);\n      solutions.shift(); // ignore the null vector\n\n      // looks like we missed something, try inverse iteration\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(S, N, solutions, prec, type);\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(λ);\n          break;\n        }\n        solutions.push(approxVec);\n      }\n\n      // Transform back into original array coordinates\n      var correction = multiply(inv(R), C);\n      solutions = solutions.map(v => multiply(correction, v));\n      vectors.push(...solutions.map(v => flatten(v)));\n    };\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      _loop(_i4);\n    }\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n    return vectors;\n  }\n\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // matrix is already upper triangular\n    // return an identity matrix\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    }\n\n    // matrix is diagonalizable\n    // return its eigenvectors as columns\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    }\n\n    // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    }\n\n    // add rows\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n    return arr;\n  }\n\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n  function blockDiag(arr, N) {\n    var M = [];\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n    var I = 0;\n    for (var sub of arr) {\n      var n = sub.length;\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n      I += n;\n    }\n    return M;\n  }\n\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n\n    // you better choose a random vector before I count to five\n    var i = 0;\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n      if (++i >= 5) {\n        return null;\n      }\n    }\n\n    // you better converge before I count to ten\n    i = 0;\n    while (true) {\n      var c = usolve(A, b);\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n      if (++i >= 10) {\n        return null;\n      }\n      b = normalize(c);\n    }\n    return b;\n  }\n\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n\n    // generate random vector with the correct type\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n    if (cplx) {\n      v = v.map(n => complex(n));\n    }\n\n    // project to orthogonal complement\n    v = orthogonalComplement(v, orthog);\n\n    // normalize\n    return normalize(v, type);\n  }\n\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n    return v;\n  }\n\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n  return complexEigs;\n}", "import { clone } from '../../../utils/object.js';\nexport function createRealSymmetric(_ref) {\n  var {\n    config,\n    addScalar,\n    subtract,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    multiply,\n    add\n  } = _ref;\n  /**\n   * @param {number[] | BigNumber[]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number' | 'BigNumber'} type\n   */\n  function main(arr, N) {\n    var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;\n    var type = arguments.length > 3 ? arguments[3] : undefined;\n    if (type === 'number') {\n      return diag(arr, prec);\n    }\n    if (type === 'BigNumber') {\n      return diagBig(arr, prec);\n    }\n    throw TypeError('Unsupported data type: ' + type);\n  }\n\n  // diagonalization implementation for number (efficient)\n  function diag(x, precision) {\n    var N = x.length;\n    var e0 = Math.abs(precision / N);\n    var psi;\n    var Sij = new Array(N);\n    // Sij is Identity Matrix\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    }\n    // initial error\n    var Vab = getAij(x);\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n    return sorting(clone(Ei), clone(Sij));\n  }\n\n  // diagonalization implementation for bigNumber\n  function diagBig(x, precision) {\n    var N = x.length;\n    var e0 = abs(precision / N);\n    var psi;\n    var Sij = new Array(N);\n    // Sij is Identity Matrix\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    }\n    // initial error\n    var Vab = getAijBig(x);\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    }\n    // return [clone(Ei), clone(Sij)]\n    return sorting(clone(Ei), clone(Sij));\n  }\n\n  // get angle\n  function getTheta(aii, ajj, aij) {\n    var denom = ajj - aii;\n    if (Math.abs(denom) <= config.epsilon) {\n      return Math.PI / 4.0;\n    } else {\n      return 0.5 * Math.atan(2.0 * aij / (ajj - aii));\n    }\n  }\n\n  // get angle\n  function getThetaBig(aii, ajj, aij) {\n    var denom = subtract(ajj, aii);\n    if (abs(denom) <= config.epsilon) {\n      return bignumber(-1).acos().div(4);\n    } else {\n      return multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));\n    }\n  }\n\n  // update eigvec\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n    return Sij;\n  }\n  // update eigvec for overlap\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, bignumber(0));\n    var Skj = createArray(N, bignumber(0));\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n    return Sij;\n  }\n\n  // update matrix\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, bignumber(0));\n    var Akj = createArray(N, bignumber(0));\n    // 2cs Hij\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]);\n    //  Aii\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j]));\n    // 0  to i\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    }\n    // Modify Hij\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = bignumber(0);\n    Hij[j][i] = bignumber(0);\n    // 0  to i\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n    return Hij;\n  }\n\n  // update matrix\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0);\n    //  Aii\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j];\n    // 0  to i\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    }\n    // Modify Hij\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0;\n    // 0  to i\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n    return Hij;\n  }\n\n  // get max off-diagonal value from Upper Diagonal\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  }\n\n  // get max off-diagonal value from Upper Diagonal\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  }\n\n  // sort results\n  function sorting(E, S) {\n    var N = E.length;\n    var values = Array(N);\n    var vectors = Array(N);\n    for (var k = 0; k < N; k++) {\n      vectors[k] = Array(N);\n    }\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n      for (var j = 0; j < E.length; j++) {\n        if (abs(E[j]) < abs(minE)) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n      values[i] = E.splice(minID, 1)[0];\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        vectors[_k5][i] = S[_k5][minID];\n        S[_k5].splice(minID, 1);\n      }\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n    return array;\n  }\n  return main;\n}", "import { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { createComplexEigs } from './eigs/complexEigs.js';\nimport { createRealSymmetric } from './eigs/realSymetric.js';\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nvar name = 'eigs';\n\n// The absolute state of math.js's dependency system:\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    matrix,\n    addScalar,\n    subtract,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    divideScalar,\n    inv,\n    bignumber,\n    multiply,\n    add,\n    larger,\n    column,\n    flatten,\n    number,\n    complex,\n    sqrt,\n    diag,\n    qr,\n    usolve,\n    usolveAll,\n    im,\n    re,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  var doRealSymetric = createRealSymmetric({\n    config,\n    addScalar,\n    subtract,\n    column,\n    flatten,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    complex,\n    multiply,\n    add\n  });\n  var doComplexEigs = createComplexEigs({\n    config,\n    addScalar,\n    subtract,\n    multiply,\n    multiplyScalar,\n    flatten,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    qr,\n    inv,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  });\n\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat, prec);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n    var size = mat.size();\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    }\n    var arr = mat.toArray();\n    var N = size[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n\n  /** @return {boolean} */\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** @return {boolean} */\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if (isNumber(el) || isFraction(el)) {\n          hasNumber = true;\n        } else if (isBigNumber(el)) {\n          hasBig = true;\n        } else if (isComplex(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});", "import { isSparseMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    identity,\n    inv,\n    multiply\n  } = _ref;\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n      var n = size[0];\n\n      // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n      var eps = 1e-15;\n\n      // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n      var infNorm = infinityNorm(A);\n\n      // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j;\n\n      // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n\n      // Scale A by 1 / 2^j\n      var Apos = multiply(A, Math.pow(2, -j));\n\n      // The i=0 term is just the identity matrix\n      var N = identity(n);\n      var D = identity(n);\n\n      // Initialization (i=0)\n      var factor = 1;\n\n      // Initialization (i=1)\n      var AposToI = Apos; // Cloning not necessary\n      var alternate = -1;\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n      var R = multiply(inv(D), N);\n\n      // Square j times\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n      infNorm = Math.max(rowSum, infNorm);\n    }\n    return infNorm;\n  }\n\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q,\n            j\n          };\n        }\n      }\n    }\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n    var twoqfac = qfac;\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});", "import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    map,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'sylvester';\nvar dependencies = ['typed', 'schur', 'matrixFromColumns', 'matrix', 'multiply', 'range', 'concat', 'transpose', 'index', 'subset', 'add', 'subtract', 'identity', 'lusolve', 'abs'];\nexport var createSylvester = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    schur,\n    matrixFromColumns,\n    matrix,\n    multiply,\n    range,\n    concat,\n    transpose,\n    index,\n    subset,\n    add,\n    subtract,\n    identity,\n    lusolve,\n    abs\n  } = _ref;\n  /**\n   *\n   * Solves the real-valued Sylvester equation AX+XB=C for X, where A, B and C are\n   * matrices of appropriate dimensions, being A and B squared. Notice that other\n   * equivalent definitions for the Sylvester equation exist and this function\n   * assumes the one presented in the original publication of the the Bartels-\n   * Stewart algorithm, which is implemented by this function.\n   * https://en.wikipedia.org/wiki/Sylvester_equation\n   *\n   * Syntax:\n   *\n   *     math.sylvester(A, B, C)\n   *\n   * Examples:\n   *\n   *     const A = [[-1, -2], [1, 1]]\n   *     const B = [[2, -1], [1, -2]]\n   *     const C = [[-3, 2], [3, 0]]\n   *     math.sylvester(A, B, C)      // returns DenseMatrix [[-0.25, 0.25], [1.5, -1.25]]\n   *\n   * See also:\n   *\n   *     schur, lyap\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} B  Matrix B\n   * @param {Matrix | Array} C  Matrix C\n   * @return {Matrix | Array}   Matrix X, solving the Sylvester equation\n   */\n  return typed(name, {\n    'Matrix, Matrix, Matrix': _sylvester,\n    'Array, Matrix, Matrix': function ArrayMatrixMatrix(A, B, C) {\n      return _sylvester(matrix(A), B, C);\n    },\n    'Array, Array, Matrix': function ArrayArrayMatrix(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), C);\n    },\n    'Array, Matrix, Array': function ArrayMatrixArray(A, B, C) {\n      return _sylvester(matrix(A), B, matrix(C));\n    },\n    'Matrix, Array, Matrix': function MatrixArrayMatrix(A, B, C) {\n      return _sylvester(A, matrix(B), C);\n    },\n    'Matrix, Array, Array': function MatrixArrayArray(A, B, C) {\n      return _sylvester(A, matrix(B), matrix(C));\n    },\n    'Matrix, Matrix, Array': function MatrixMatrixArray(A, B, C) {\n      return _sylvester(A, B, matrix(C));\n    },\n    'Array, Array, Array': function ArrayArrayArray(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), matrix(C)).toArray();\n    }\n  });\n  function _sylvester(A, B, C) {\n    var n = B.size()[0];\n    var m = A.size()[0];\n    var sA = schur(A);\n    var F = sA.T;\n    var U = sA.U;\n    var sB = schur(multiply(-1, B));\n    var G = sB.T;\n    var V = sB.U;\n    var D = multiply(multiply(transpose(U), C), V);\n    var all = range(0, m);\n    var y = [];\n    var hc = (a, b) => concat(a, b, 1);\n    var vc = (a, b) => concat(a, b, 0);\n    for (var k = 0; k < n; k++) {\n      if (k < n - 1 && abs(subset(G, index(k + 1, k))) > 1e-5) {\n        var RHS = vc(subset(D, index(all, k)), subset(D, index(all, k + 1)));\n        for (var j = 0; j < k; j++) {\n          RHS = add(RHS, vc(multiply(y[j], subset(G, index(j, k))), multiply(y[j], subset(G, index(j, k + 1)))));\n        }\n        var gkk = multiply(identity(m), multiply(-1, subset(G, index(k, k))));\n        var gmk = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k))));\n        var gkm = multiply(identity(m), multiply(-1, subset(G, index(k, k + 1))));\n        var gmm = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k + 1))));\n        var LHS = vc(hc(add(F, gkk), gmk), hc(gkm, add(F, gmm)));\n        var yAux = lusolve(LHS, RHS);\n        y[k] = yAux.subset(index(range(0, m), 0));\n        y[k + 1] = yAux.subset(index(range(m, 2 * m), 0));\n        k++;\n      } else {\n        var _RHS = subset(D, index(all, k));\n        for (var _j = 0; _j < k; _j++) {\n          _RHS = add(_RHS, multiply(y[_j], subset(G, index(_j, k))));\n        }\n        var _gkk = subset(G, index(k, k));\n        var _LHS = subtract(F, multiply(_gkk, identity(m)));\n        y[k] = lusolve(_LHS, _RHS);\n      }\n    }\n    var Y = matrix(matrixFromColumns(...y));\n    var X = multiply(U, multiply(Y, transpose(V)));\n    return X;\n  }\n});", "import { factory } from '../../../utils/factory.js';\nvar name = 'schur';\nvar dependencies = ['typed', 'matrix', 'identity', 'multiply', 'qr', 'norm', 'subtract'];\nexport var createSchur = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    identity,\n    multiply,\n    qr,\n    norm,\n    subtract\n  } = _ref;\n  /**\n   *\n   * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n   * and T is upper quasi-triangular.\n   * https://en.wikipedia.org/wiki/Schur_decomposition\n   *\n   * Syntax:\n   *\n   *     math.schur(A)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 0], [-4, 3]]\n   *     math.schur(A) // returns {T: [[3, 4], [0, 1]], R: [[0, 1], [-1, 0]]}\n   *\n   * See also:\n   *\n   *     sylvester, lyap, qr\n   *\n   * @param {Array | Matrix} A  Matrix A\n   * @return {{U: Array | Matrix, T: Array | Matrix}} Object containing both matrix U and T of the Schur Decomposition A=UTU'\n   */\n  return typed(name, {\n    Array: function Array(X) {\n      var r = _schur(matrix(X));\n      return {\n        U: r.U.valueOf(),\n        T: r.T.valueOf()\n      };\n    },\n    Matrix: function Matrix(X) {\n      return _schur(X);\n    }\n  });\n  function _schur(X) {\n    var n = X.size()[0];\n    var A = X;\n    var U = identity(n);\n    var k = 0;\n    var A0;\n    do {\n      A0 = A;\n      var QR = qr(A);\n      var Q = QR.Q;\n      var R = QR.R;\n      A = multiply(R, Q);\n      U = multiply(U, Q);\n      if (k++ > 100) {\n        break;\n      }\n    } while (norm(subtract(A, A0)) > 1e-4);\n    return {\n      U,\n      T: A\n    };\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});", "import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiply,\n    equalScalar,\n    divideScalar,\n    inv\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});", "import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    unaryMinus,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten,\n    isZero,\n    isNumeric\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n      return arr === null ? null : matrix(arr);\n    }\n  });\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0];\n\n    // column matrix\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n    return arr;\n  }\n  function _2d(x) {\n    return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (isZero(det)) return null;\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));\n    var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));\n    if (isZero(denominator)) return null;\n    var ta = divideScalar(numerator, denominator);\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});", "import { factory } from '../../utils/factory.js';\nimport { combinationsNumber } from '../../plain/number/combinations.js';\nvar name = 'combinations';\nvar dependencies = ['typed'];\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n      result = one;\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}", "import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});", "/* eslint-disable no-loss-of-precision */\n\n// References\n// ----------\n// [1] Hare, \"Computing the Principal Branch of log-Gamma\", Journal of Algorithms, 1997.\n// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments\n\nimport { lgammaNumber, lnSqrt2PI } from '../../plain/number/index.js';\nimport { factory } from '../../utils/factory.js';\nimport { copysign } from '../../utils/number.js';\nvar name = 'lgamma';\nvar dependencies = ['Complex', 'typed'];\nexport var createLgamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Complex,\n    typed\n  } = _ref;\n  // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get\n  // sufficient accuracy.\n  //\n  // These two values are copied from Scipy implementation:\n  // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37\n  var SMALL_RE = 7;\n  var SMALL_IM = 7;\n\n  /**\n   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].\n   *\n   * If you cannot access the paper, can also get these values from the formula in [2].\n   *\n   *    1 /     12 = 0.00833333333333333333333333333333\n   *    1 /    360 = 0.00277777777777777777777777777778\n   * ...\n   * 3617 / 133400 = 0.02955065359477124183006535947712\n   */\n  var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];\n\n  /**\n   * Logarithm of the gamma function for real, positive numbers and complex numbers,\n   * using Lanczos approximation for numbers and Stirling series for complex numbers.\n   *\n   * Syntax:\n   *\n   *    math.lgamma(n)\n   *\n   * Examples:\n   *\n   *    math.lgamma(5)       // returns 3.178053830347945\n   *    math.lgamma(0)       // returns Infinity\n   *    math.lgamma(-0.5)    // returns NaN\n   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i\n   *\n   * See also:\n   *\n   *    gamma\n   *\n   * @param {number | Complex} n   A real or complex number\n   * @return {number | Complex}    The log gamma of `n`\n   */\n  return typed(name, {\n    number: lgammaNumber,\n    Complex: lgammaComplex,\n    BigNumber: function BigNumber() {\n      throw new Error(\"mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber\");\n    }\n  });\n  function lgammaComplex(n) {\n    var TWOPI = 6.2831853071795864769252842; // 2*pi\n    var LOGPI = 1.1447298858494001741434262; // log(pi)\n\n    var REFLECTION = 0.1;\n    if (n.isNaN()) {\n      return new Complex(NaN, NaN);\n    } else if (n.im === 0) {\n      return new Complex(lgammaNumber(n.re), 0);\n    } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {\n      return lgammaStirling(n);\n    } else if (n.re <= REFLECTION) {\n      // Reflection formula. see Proposition 3.1 in [1]\n      var tmp = copysign(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);\n      var a = n.mul(Math.PI).sin().log();\n      var b = lgammaComplex(new Complex(1 - n.re, -n.im));\n      return new Complex(LOGPI, tmp).sub(a).sub(b);\n    } else if (n.im >= 0) {\n      return lgammaRecurrence(n);\n    } else {\n      return lgammaRecurrence(n.conjugate()).conjugate();\n    }\n  }\n  function lgammaStirling(z) {\n    // formula ref in [2]\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101\n\n    // left part\n\n    // x (log(x) - 1) + 1/2 (log(2PI) - log(x))\n    // => (x - 0.5) * log(x) - x + log(2PI) / 2\n    var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(lnSqrt2PI);\n\n    // right part\n\n    var rz = new Complex(1, 0).div(z);\n    var rzz = rz.div(z);\n    var a = coeffs[0];\n    var b = coeffs[1];\n    var r = 2 * rzz.re;\n    var s = rzz.re * rzz.re + rzz.im * rzz.im;\n    for (var i = 2; i < 8; i++) {\n      var tmp = b;\n      b = -s * a + coeffs[i];\n      a = r * a + tmp;\n    }\n    var rightPart = rz.mul(rzz.mul(a).add(b));\n\n    // plus left and right\n\n    return leftPart.add(rightPart);\n  }\n  function lgammaRecurrence(z) {\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78\n\n    var signflips = 0;\n    var sb = 0;\n    var shiftprod = z;\n    z = z.add(1);\n    while (z.re <= SMALL_RE) {\n      shiftprod = shiftprod.mul(z);\n      var nsb = shiftprod.im < 0 ? 1 : 0;\n      if (nsb !== 0 && sb === 0) signflips++;\n      sb = nsb;\n      z = z.add(1);\n    }\n    return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'kldivergence';\nvar dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'map', 'dotDivide', 'log', 'isNumeric'];\nexport var createKldivergence = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divide,\n    sum,\n    multiply,\n    map,\n    dotDivide,\n    log,\n    isNumeric\n  } = _ref;\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n  return typed(name, {\n    'Array, Array': function ArrayArray(q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function MatrixArray(q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function ArrayMatrix(q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function MatrixMatrix(q, p) {\n      return _kldiv(q, p);\n    }\n  });\n  function _kldiv(q, p) {\n    var plength = p.size().length;\n    var qlength = q.size().length;\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    }\n\n    // Before calculation, apply normalization\n    var sumq = sum(q);\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n    var sump = sum(p);\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n    var qnorm = divide(q, sum(q));\n    var pnorm = divide(p, sum(p));\n    var result = sum(multiply(qnorm, map(dotDivide(qnorm, pnorm), x => log(x))));\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n});", "import { factory } from '../../utils/factory.js';\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nexport var createLeafCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    typed\n  } = _ref;\n  // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(n => {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n  return typed(name, {\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});", "import { isConstantNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'symbolicEqual';\nvar dependencies = ['parse', 'simplify', 'typed', 'OperatorNode'];\nexport var createSymbolicEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    simplify,\n    typed,\n    OperatorNode\n  } = _ref;\n  /**\n   * Attempts to determine if two expressions are symbolically equal, i.e.\n   * one is the result of valid algebraic manipulations on the other.\n   * Currently, this simply checks if the difference of the two expressions\n   * simplifies down to 0. So there are two important caveats:\n   * 1. whether two expressions are symbolically equal depends on the\n   *     manipulations allowed. Therefore, this function takes an optional\n   *     third argument, which are the options that control the behavior\n   *     as documented for the `simplify()` function.\n   * 2. it is in general intractable to find the minimal simplification of\n   *     an arbitrarily complicated expression. So while a `true` value\n   *     of `symbolicEqual` ensures that the two expressions can be manipulated\n   *     to match each other, a `false` value does not absolutely rule this out.\n   *\n   * Syntax:\n   *\n   *    symbolicEqual(expr1, expr2)\n   *    symbolicEqual(expr1, expr2, options)\n   *\n   * Examples:\n   *\n   *    symbolicEqual('x*y', 'y*x') // Returns true\n   *    symbolicEqual('x*y', 'y*x', {context: {multiply: {commutative: false}}}) // Returns false\n   *    symbolicEqual('x/y', '(y*x^(-1))^(-1)') // Returns true\n   *    symbolicEqual('abs(x)','x') // Returns false\n   *    symbolicEqual('abs(x)','x', simplify.positiveContext) // Returns true\n   *\n   * See also:\n   *\n   *    simplify, evaluate\n   *\n   * @param {Node|string} expr1  The first expression to compare\n   * @param {Node|string} expr2  The second expression to compare\n   * @param {Object} [options] Optional option object, passed to simplify\n   * @returns {boolean}\n   *     Returns true if a valid manipulation making the expressions equal\n   *     is found.\n   */\n  function _symbolicEqual(e1, e2) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var diff = new OperatorNode('-', 'subtract', [e1, e2]);\n    var simplified = simplify(diff, {}, options);\n    return isConstantNode(simplified) && !simplified.value;\n  }\n  return typed(name, {\n    'Node, Node': _symbolicEqual,\n    'Node, Node, Object': _symbolicEqual\n  });\n});", "import { factory } from '../../utils/factory.js';\n\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}", "import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createColumn } from '../../function/matrix/column.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var column = createColumn({\n    typed,\n    Index,\n    matrix,\n    range\n  });\n\n  // @see: comment of column itself\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});", "import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Index\n  } = _ref;\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {\n        // leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});", "import { factory } from '../../utils/factory.js';\nimport { createRow } from '../../function/matrix/row.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\nexport var createRowTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var row = createRow({\n    typed,\n    Index,\n    matrix,\n    range\n  });\n\n  // @see: comment of row itself\n  return typed('row', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n      try {\n        return row.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});", "import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createSubset } from '../../function/matrix/subset.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubsetTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var subset = createSubset({\n    typed,\n    matrix\n  });\n\n  /**\n   * Attach a transform function to math.subset\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n  return typed('subset', {\n    '...any': function any(args) {\n      try {\n        return subset.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});", "import { isBigNumber, isNumber } from '../../utils/is.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createConcat } from '../../function/matrix/concat.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  var concat = createConcat({\n    typed,\n    matrix,\n    isInteger\n  });\n\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function concat\n   * from one-based to zero based\n   */\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});", "import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createDiff } from '../../function/matrix/diff.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];\nexport var createDiffTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  } = _ref;\n  var diff = createDiff({\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  });\n\n  /**\n   * Attach a transform function to math.diff\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return diff.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createBigNumberClass, createComplexClass, createE, createFalse, createFineStructure, createFractionClass, createI, createInfinity, createLN10, createLOG10E, createMatrixClass, createNaN, createNull, createPhi, createRangeClass, createResultSet, createSQRT1_2,\n// eslint-disable-line camelcase\ncreateSackurTetrode, createTau, createTrue, createVersion, createDenseMatrixClass, createEfimovFactor, createLN2, createPi, createReplacer, createSQRT2, createTyped, createUnaryPlus, createWeakMixingAngle, createAbs, createAcos, createAcot, createAcsc, createAddScalar, createArg, createAsech, createAsinh, createAtan, createAtanh, createBignumber, createBitNot, createBoolean, createClone, createCombinations, createComplex, createConj, createCosh, createCoth, createCsc, createCube, createEqualScalar, createErf, createExp, createExpm1, createFilter, createForEach, createFormat, createGetMatrixDataType, createHex, createIm, createIsInteger, createIsNegative, createIsPositive, createIsZero, createLOG2E, createLgamma, createLog10, createLog2, createMap, createMultiplyScalar, createNot, createNumber, createOct, createPickRandom, createPrint, createRandom, createRe, createSec, createSign, createSin, createSparseMatrixClass, createSplitUnit, createSquare, createString, createTan, createTypeOf, createAcosh, createAcsch, createApply, createAsec, createBin, createCombinationsWithRep, createCos, createCsch, createIsNaN, createIsPrime, createRandomInt, createSech, createSinh, createSparse, createSqrt, createTanh, createUnaryMinus, createAcoth, createCot, createFraction, createIsNumeric, createMatrix, createMatrixFromFunction, createMod, createNthRoot, createNumeric, createOr, createProd, createReshape, createSize, createSmaller, createSqueeze, createSubset, createSubtract, createTo, createTranspose, createXgcd, createZeros, createAnd, createBitAnd, createBitXor, createCbrt, createCompare, createCompareText, createConcat, createCount, createCtranspose, createDiag, createDivideScalar, createDotDivide, createEqual, createFft, createFlatten, createGcd, createHasNumericValue, createHypot, createIfft, createKron, createLargerEq, createLeftShift, createLsolve, createMatrixFromColumns, createMin, createMode, createNthRoots, createOnes, createPartitionSelect, createResize, createRightArithShift, createRound, createSmallerEq, createUnequal, createUsolve, createXor, createAdd, createAtan2, createBitOr, createCatalan, createCompareNatural, createCumSum, createDeepEqual, createDiff, createDot, createEqualText, createFloor, createIdentity, createInvmod, createLarger, createLog, createLsolveAll, createMatrixFromRows, createMultiply, createQr, createRange, createRightLogShift, createSetSize, createSlu, createSum, createTrace, createUsolveAll, createAsin, createCeil, createComposition, createCross, createDet, createDistance, createDotMultiply, createFibonacciHeapClass, createFix, createImmutableDenseMatrixClass, createIndexClass, createIntersect, createLcm, createLog1p, createMax, createQuantileSeq, createRow, createSetCartesian, createSetDistinct, createSetIsSubset, createSetPowerset, createSort, createColumn, createIndex, createInv, createPinv, createPow, createSetDifference, createSetMultiplicity, createSpaClass, createSqrtm, createUnitClass, createVacuumImpedance, createWienDisplacement, createAtomicMass, createBohrMagneton, createBoltzmann, createConductanceQuantum, createCreateUnit, createDeuteronMass, createDotPow, createElectricConstant, createElementaryCharge, createExpm, createFaraday, createFirstRadiation, createGamma, createGravitationConstant, createHartreeEnergy, createKlitzing, createLoschmidt, createMagneticConstant, createMolarMass, createMolarPlanckConstant, createNeutronMass, createNuclearMagneton, createPlanckCharge, createPlanckLength, createPlanckTemperature, createProtonMass, createReducedPlanckConstant, createRydberg, createSecondRadiation, createSetSymDifference, createSpeedOfLight, createStefanBoltzmann, createThomsonCrossSection, createAvogadro, createBohrRadius, createCoulomb, createDivide, createElectronMass, createFactorial, createGravity, createInverseConductanceQuantum, createLup, createMagneticFluxQuantum, createMolarMassC12, createMultinomial, createPermutations, createPlanckMass, createPolynomialRoot, createSetIntersect, createStirlingS2, createUnitFunction, createBellNumbers, createEigs, createFermiCoupling, createMean, createMolarVolume, createPlanckConstant, createQuantumOfCirculation, createSetUnion, createVariance, createClassicalElectronRadius, createLusolve, createMedian, createKldivergence, createMad, createStd, createGasConstant, createNorm, createRotationMatrix, createPlanckTime, createSchur, createRotate, createSylvester, createLyap } from '../factoriesAny.js';\nexport var BigNumber = /* #__PURE__ */createBigNumberClass({\n  config\n});\nexport var Complex = /* #__PURE__ */createComplexClass({});\nexport var e = /* #__PURE__ */createE({\n  BigNumber,\n  config\n});\nexport var _false = /* #__PURE__ */createFalse({});\nexport var fineStructure = /* #__PURE__ */createFineStructure({\n  BigNumber,\n  config\n});\nexport var Fraction = /* #__PURE__ */createFractionClass({});\nexport var i = /* #__PURE__ */createI({\n  Complex\n});\nexport var _Infinity = /* #__PURE__ */createInfinity({\n  BigNumber,\n  config\n});\nexport var LN10 = /* #__PURE__ */createLN10({\n  BigNumber,\n  config\n});\nexport var LOG10E = /* #__PURE__ */createLOG10E({\n  BigNumber,\n  config\n});\nexport var Matrix = /* #__PURE__ */createMatrixClass({});\nexport var _NaN = /* #__PURE__ */createNaN({\n  BigNumber,\n  config\n});\nexport var _null = /* #__PURE__ */createNull({});\nexport var phi = /* #__PURE__ */createPhi({\n  BigNumber,\n  config\n});\nexport var Range = /* #__PURE__ */createRangeClass({});\nexport var ResultSet = /* #__PURE__ */createResultSet({});\nexport var SQRT1_2 = /* #__PURE__ */createSQRT1_2({\n  BigNumber,\n  config\n});\nexport var sackurTetrode = /* #__PURE__ */createSackurTetrode({\n  BigNumber,\n  config\n});\nexport var tau = /* #__PURE__ */createTau({\n  BigNumber,\n  config\n});\nexport var _true = /* #__PURE__ */createTrue({});\nexport var version = /* #__PURE__ */createVersion({});\nexport var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({\n  Matrix\n});\nexport var efimovFactor = /* #__PURE__ */createEfimovFactor({\n  BigNumber,\n  config\n});\nexport var LN2 = /* #__PURE__ */createLN2({\n  BigNumber,\n  config\n});\nexport var pi = /* #__PURE__ */createPi({\n  BigNumber,\n  config\n});\nexport var replacer = /* #__PURE__ */createReplacer({});\nexport var SQRT2 = /* #__PURE__ */createSQRT2({\n  BigNumber,\n  config\n});\nexport var typed = /* #__PURE__ */createTyped({\n  BigNumber,\n  Complex,\n  DenseMatrix,\n  Fraction\n});\nexport var unaryPlus = /* #__PURE__ */createUnaryPlus({\n  BigNumber,\n  config,\n  typed\n});\nexport var weakMixingAngle = /* #__PURE__ */createWeakMixingAngle({\n  BigNumber,\n  config\n});\nexport var abs = /* #__PURE__ */createAbs({\n  typed\n});\nexport var acos = /* #__PURE__ */createAcos({\n  Complex,\n  config,\n  typed\n});\nexport var acot = /* #__PURE__ */createAcot({\n  BigNumber,\n  typed\n});\nexport var acsc = /* #__PURE__ */createAcsc({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var addScalar = /* #__PURE__ */createAddScalar({\n  typed\n});\nexport var arg = /* #__PURE__ */createArg({\n  typed\n});\nexport var asech = /* #__PURE__ */createAsech({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var asinh = /* #__PURE__ */createAsinh({\n  typed\n});\nexport var atan = /* #__PURE__ */createAtan({\n  typed\n});\nexport var atanh = /* #__PURE__ */createAtanh({\n  Complex,\n  config,\n  typed\n});\nexport var bignumber = /* #__PURE__ */createBignumber({\n  BigNumber,\n  typed\n});\nexport var bitNot = /* #__PURE__ */createBitNot({\n  typed\n});\nexport var boolean = /* #__PURE__ */createBoolean({\n  typed\n});\nexport var clone = /* #__PURE__ */createClone({\n  typed\n});\nexport var combinations = /* #__PURE__ */createCombinations({\n  typed\n});\nexport var complex = /* #__PURE__ */createComplex({\n  Complex,\n  typed\n});\nexport var conj = /* #__PURE__ */createConj({\n  typed\n});\nexport var cosh = /* #__PURE__ */createCosh({\n  typed\n});\nexport var coth = /* #__PURE__ */createCoth({\n  BigNumber,\n  typed\n});\nexport var csc = /* #__PURE__ */createCsc({\n  BigNumber,\n  typed\n});\nexport var cube = /* #__PURE__ */createCube({\n  typed\n});\nexport var equalScalar = /* #__PURE__ */createEqualScalar({\n  config,\n  typed\n});\nexport var erf = /* #__PURE__ */createErf({\n  typed\n});\nexport var exp = /* #__PURE__ */createExp({\n  typed\n});\nexport var expm1 = /* #__PURE__ */createExpm1({\n  Complex,\n  typed\n});\nexport var filter = /* #__PURE__ */createFilter({\n  typed\n});\nexport var forEach = /* #__PURE__ */createForEach({\n  typed\n});\nexport var format = /* #__PURE__ */createFormat({\n  typed\n});\nexport var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({\n  typed\n});\nexport var hex = /* #__PURE__ */createHex({\n  format,\n  typed\n});\nexport var im = /* #__PURE__ */createIm({\n  typed\n});\nexport var isInteger = /* #__PURE__ */createIsInteger({\n  typed\n});\nexport var isNegative = /* #__PURE__ */createIsNegative({\n  typed\n});\nexport var isPositive = /* #__PURE__ */createIsPositive({\n  typed\n});\nexport var isZero = /* #__PURE__ */createIsZero({\n  typed\n});\nexport var LOG2E = /* #__PURE__ */createLOG2E({\n  BigNumber,\n  config\n});\nexport var lgamma = /* #__PURE__ */createLgamma({\n  Complex,\n  typed\n});\nexport var log10 = /* #__PURE__ */createLog10({\n  Complex,\n  config,\n  typed\n});\nexport var log2 = /* #__PURE__ */createLog2({\n  Complex,\n  config,\n  typed\n});\nexport var map = /* #__PURE__ */createMap({\n  typed\n});\nexport var multiplyScalar = /* #__PURE__ */createMultiplyScalar({\n  typed\n});\nexport var not = /* #__PURE__ */createNot({\n  typed\n});\nexport var number = /* #__PURE__ */createNumber({\n  typed\n});\nexport var oct = /* #__PURE__ */createOct({\n  format,\n  typed\n});\nexport var pickRandom = /* #__PURE__ */createPickRandom({\n  config,\n  typed\n});\nexport var print = /* #__PURE__ */createPrint({\n  typed\n});\nexport var random = /* #__PURE__ */createRandom({\n  config,\n  typed\n});\nexport var re = /* #__PURE__ */createRe({\n  typed\n});\nexport var sec = /* #__PURE__ */createSec({\n  BigNumber,\n  typed\n});\nexport var sign = /* #__PURE__ */createSign({\n  BigNumber,\n  Fraction,\n  complex,\n  typed\n});\nexport var sin = /* #__PURE__ */createSin({\n  typed\n});\nexport var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({\n  Matrix,\n  equalScalar,\n  typed\n});\nexport var splitUnit = /* #__PURE__ */createSplitUnit({\n  typed\n});\nexport var square = /* #__PURE__ */createSquare({\n  typed\n});\nexport var string = /* #__PURE__ */createString({\n  typed\n});\nexport var tan = /* #__PURE__ */createTan({\n  typed\n});\nexport var typeOf = /* #__PURE__ */createTypeOf({\n  typed\n});\nexport var acosh = /* #__PURE__ */createAcosh({\n  Complex,\n  config,\n  typed\n});\nexport var acsch = /* #__PURE__ */createAcsch({\n  BigNumber,\n  typed\n});\nexport var apply = /* #__PURE__ */createApply({\n  isInteger,\n  typed\n});\nexport var asec = /* #__PURE__ */createAsec({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var bin = /* #__PURE__ */createBin({\n  format,\n  typed\n});\nexport var combinationsWithRep = /* #__PURE__ */createCombinationsWithRep({\n  typed\n});\nexport var cos = /* #__PURE__ */createCos({\n  typed\n});\nexport var csch = /* #__PURE__ */createCsch({\n  BigNumber,\n  typed\n});\nexport var isNaN = /* #__PURE__ */createIsNaN({\n  typed\n});\nexport var isPrime = /* #__PURE__ */createIsPrime({\n  typed\n});\nexport var randomInt = /* #__PURE__ */createRandomInt({\n  config,\n  typed\n});\nexport var sech = /* #__PURE__ */createSech({\n  BigNumber,\n  typed\n});\nexport var sinh = /* #__PURE__ */createSinh({\n  typed\n});\nexport var sparse = /* #__PURE__ */createSparse({\n  SparseMatrix,\n  typed\n});\nexport var sqrt = /* #__PURE__ */createSqrt({\n  Complex,\n  config,\n  typed\n});\nexport var tanh = /* #__PURE__ */createTanh({\n  typed\n});\nexport var unaryMinus = /* #__PURE__ */createUnaryMinus({\n  typed\n});\nexport var acoth = /* #__PURE__ */createAcoth({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var cot = /* #__PURE__ */createCot({\n  BigNumber,\n  typed\n});\nexport var fraction = /* #__PURE__ */createFraction({\n  Fraction,\n  typed\n});\nexport var isNumeric = /* #__PURE__ */createIsNumeric({\n  typed\n});\nexport var matrix = /* #__PURE__ */createMatrix({\n  DenseMatrix,\n  Matrix,\n  SparseMatrix,\n  typed\n});\nexport var matrixFromFunction = /* #__PURE__ */createMatrixFromFunction({\n  isZero,\n  matrix,\n  typed\n});\nexport var mod = /* #__PURE__ */createMod({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var nthRoot = /* #__PURE__ */createNthRoot({\n  BigNumber,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var numeric = /* #__PURE__ */createNumeric({\n  bignumber,\n  fraction,\n  number\n});\nexport var or = /* #__PURE__ */createOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var prod = /* #__PURE__ */createProd({\n  config,\n  multiplyScalar,\n  numeric,\n  typed\n});\nexport var reshape = /* #__PURE__ */createReshape({\n  isInteger,\n  matrix,\n  typed\n});\nexport var size = /* #__PURE__ */createSize({\n  matrix,\n  config,\n  typed\n});\nexport var smaller = /* #__PURE__ */createSmaller({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var squeeze = /* #__PURE__ */createSqueeze({\n  matrix,\n  typed\n});\nexport var subset = /* #__PURE__ */createSubset({\n  matrix,\n  typed\n});\nexport var subtract = /* #__PURE__ */createSubtract({\n  DenseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var to = /* #__PURE__ */createTo({\n  matrix,\n  typed\n});\nexport var transpose = /* #__PURE__ */createTranspose({\n  matrix,\n  typed\n});\nexport var xgcd = /* #__PURE__ */createXgcd({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var zeros = /* #__PURE__ */createZeros({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var and = /* #__PURE__ */createAnd({\n  equalScalar,\n  matrix,\n  not,\n  typed,\n  zeros\n});\nexport var bitAnd = /* #__PURE__ */createBitAnd({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitXor = /* #__PURE__ */createBitXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var cbrt = /* #__PURE__ */createCbrt({\n  BigNumber,\n  Complex,\n  Fraction,\n  config,\n  isNegative,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var compare = /* #__PURE__ */createCompare({\n  BigNumber,\n  DenseMatrix,\n  Fraction,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var compareText = /* #__PURE__ */createCompareText({\n  matrix,\n  typed\n});\nexport var concat = /* #__PURE__ */createConcat({\n  isInteger,\n  matrix,\n  typed\n});\nexport var count = /* #__PURE__ */createCount({\n  prod,\n  size,\n  typed\n});\nexport var ctranspose = /* #__PURE__ */createCtranspose({\n  conj,\n  transpose,\n  typed\n});\nexport var diag = /* #__PURE__ */createDiag({\n  DenseMatrix,\n  SparseMatrix,\n  matrix,\n  typed\n});\nexport var divideScalar = /* #__PURE__ */createDivideScalar({\n  numeric,\n  typed\n});\nexport var dotDivide = /* #__PURE__ */createDotDivide({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var equal = /* #__PURE__ */createEqual({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var fft = /* #__PURE__ */createFft({\n  addScalar,\n  divideScalar,\n  exp,\n  i,\n  matrix,\n  multiplyScalar,\n  tau,\n  typed\n});\nexport var flatten = /* #__PURE__ */createFlatten({\n  matrix,\n  typed\n});\nexport var gcd = /* #__PURE__ */createGcd({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var hasNumericValue = /* #__PURE__ */createHasNumericValue({\n  isNumeric,\n  typed\n});\nexport var hypot = /* #__PURE__ */createHypot({\n  abs,\n  addScalar,\n  divideScalar,\n  isPositive,\n  multiplyScalar,\n  smaller,\n  sqrt,\n  typed\n});\nexport var ifft = /* #__PURE__ */createIfft({\n  conj,\n  dotDivide,\n  fft,\n  typed\n});\nexport var kron = /* #__PURE__ */createKron({\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var largerEq = /* #__PURE__ */createLargerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var leftShift = /* #__PURE__ */createLeftShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var lsolve = /* #__PURE__ */createLsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromColumns = /* #__PURE__ */createMatrixFromColumns({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var min = /* #__PURE__ */createMin({\n  config,\n  numeric,\n  smaller,\n  typed\n});\nexport var mode = /* #__PURE__ */createMode({\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var nthRoots = /* #__PURE__ */createNthRoots({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var ones = /* #__PURE__ */createOnes({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var partitionSelect = /* #__PURE__ */createPartitionSelect({\n  compare,\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var resize = /* #__PURE__ */createResize({\n  config,\n  matrix\n});\nexport var rightArithShift = /* #__PURE__ */createRightArithShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var round = /* #__PURE__ */createRound({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var smallerEq = /* #__PURE__ */createSmallerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var unequal = /* #__PURE__ */createUnequal({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var usolve = /* #__PURE__ */createUsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var xor = /* #__PURE__ */createXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var add = /* #__PURE__ */createAdd({\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var atan2 = /* #__PURE__ */createAtan2({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitOr = /* #__PURE__ */createBitOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var catalan = /* #__PURE__ */createCatalan({\n  addScalar,\n  combinations,\n  divideScalar,\n  isInteger,\n  isNegative,\n  multiplyScalar,\n  typed\n});\nexport var compareNatural = /* #__PURE__ */createCompareNatural({\n  compare,\n  typed\n});\nexport var cumsum = /* #__PURE__ */createCumSum({\n  add,\n  typed,\n  unaryPlus\n});\nexport var deepEqual = /* #__PURE__ */createDeepEqual({\n  equal,\n  typed\n});\nexport var diff = /* #__PURE__ */createDiff({\n  matrix,\n  number,\n  subtract,\n  typed\n});\nexport var dot = /* #__PURE__ */createDot({\n  addScalar,\n  conj,\n  multiplyScalar,\n  size,\n  typed\n});\nexport var equalText = /* #__PURE__ */createEqualText({\n  compareText,\n  isZero,\n  typed\n});\nexport var floor = /* #__PURE__ */createFloor({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var identity = /* #__PURE__ */createIdentity({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var invmod = /* #__PURE__ */createInvmod({\n  BigNumber,\n  add,\n  config,\n  equal,\n  isInteger,\n  mod,\n  smaller,\n  typed,\n  xgcd\n});\nexport var larger = /* #__PURE__ */createLarger({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var log = /* #__PURE__ */createLog({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var lsolveAll = /* #__PURE__ */createLsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromRows = /* #__PURE__ */createMatrixFromRows({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var multiply = /* #__PURE__ */createMultiply({\n  addScalar,\n  dot,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var qr = /* #__PURE__ */createQr({\n  addScalar,\n  complex,\n  conj,\n  divideScalar,\n  equal,\n  identity,\n  isZero,\n  matrix,\n  multiplyScalar,\n  sign,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus,\n  zeros\n});\nexport var range = /* #__PURE__ */createRange({\n  bignumber,\n  matrix,\n  config,\n  larger,\n  largerEq,\n  smaller,\n  smallerEq,\n  typed\n});\nexport var rightLogShift = /* #__PURE__ */createRightLogShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var setSize = /* #__PURE__ */createSetSize({\n  compareNatural,\n  typed\n});\nexport var slu = /* #__PURE__ */createSlu({\n  SparseMatrix,\n  abs,\n  add,\n  divideScalar,\n  larger,\n  largerEq,\n  multiply,\n  subtract,\n  transpose,\n  typed\n});\nexport var sum = /* #__PURE__ */createSum({\n  add,\n  config,\n  numeric,\n  typed\n});\nexport var trace = /* #__PURE__ */createTrace({\n  add,\n  matrix,\n  typed\n});\nexport var usolveAll = /* #__PURE__ */createUsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var asin = /* #__PURE__ */createAsin({\n  Complex,\n  config,\n  typed\n});\nexport var ceil = /* #__PURE__ */createCeil({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var composition = /* #__PURE__ */createComposition({\n  addScalar,\n  combinations,\n  isInteger,\n  isNegative,\n  isPositive,\n  larger,\n  typed\n});\nexport var cross = /* #__PURE__ */createCross({\n  matrix,\n  multiply,\n  subtract,\n  typed\n});\nexport var det = /* #__PURE__ */createDet({\n  divideScalar,\n  isZero,\n  matrix,\n  multiply,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var distance = /* #__PURE__ */createDistance({\n  abs,\n  addScalar,\n  divideScalar,\n  multiplyScalar,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var dotMultiply = /* #__PURE__ */createDotMultiply({\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var FibonacciHeap = /* #__PURE__ */createFibonacciHeapClass({\n  larger,\n  smaller\n});\nexport var fix = /* #__PURE__ */createFix({\n  Complex,\n  DenseMatrix,\n  ceil,\n  equalScalar,\n  floor,\n  matrix,\n  typed,\n  zeros\n});\nexport var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({\n  DenseMatrix,\n  smaller\n});\nexport var Index = /* #__PURE__ */createIndexClass({\n  ImmutableDenseMatrix\n});\nexport var intersect = /* #__PURE__ */createIntersect({\n  abs,\n  add,\n  addScalar,\n  config,\n  divideScalar,\n  equalScalar,\n  flatten,\n  isNumeric,\n  isZero,\n  matrix,\n  multiply,\n  multiplyScalar,\n  smaller,\n  subtract,\n  typed\n});\nexport var lcm = /* #__PURE__ */createLcm({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var log1p = /* #__PURE__ */createLog1p({\n  Complex,\n  config,\n  divideScalar,\n  log,\n  typed\n});\nexport var max = /* #__PURE__ */createMax({\n  config,\n  larger,\n  numeric,\n  typed\n});\nexport var quantileSeq = /* #__PURE__ */createQuantileSeq({\n  add,\n  compare,\n  multiply,\n  partitionSelect,\n  typed\n});\nexport var row = /* #__PURE__ */createRow({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var setCartesian = /* #__PURE__ */createSetCartesian({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setDistinct = /* #__PURE__ */createSetDistinct({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setIsSubset = /* #__PURE__ */createSetIsSubset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setPowerset = /* #__PURE__ */createSetPowerset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var sort = /* #__PURE__ */createSort({\n  compare,\n  compareNatural,\n  matrix,\n  typed\n});\nexport var column = /* #__PURE__ */createColumn({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var index = /* #__PURE__ */createIndex({\n  Index,\n  typed\n});\nexport var inv = /* #__PURE__ */createInv({\n  abs,\n  addScalar,\n  det,\n  divideScalar,\n  identity,\n  matrix,\n  multiply,\n  typed,\n  unaryMinus\n});\nexport var pinv = /* #__PURE__ */createPinv({\n  Complex,\n  add,\n  ctranspose,\n  deepEqual,\n  divideScalar,\n  dot,\n  dotDivide,\n  equal,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var pow = /* #__PURE__ */createPow({\n  Complex,\n  config,\n  fraction,\n  identity,\n  inv,\n  matrix,\n  multiply,\n  number,\n  typed\n});\nexport var setDifference = /* #__PURE__ */createSetDifference({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setMultiplicity = /* #__PURE__ */createSetMultiplicity({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var Spa = /* #__PURE__ */createSpaClass({\n  FibonacciHeap,\n  addScalar,\n  equalScalar\n});\nexport var sqrtm = /* #__PURE__ */createSqrtm({\n  abs,\n  add,\n  identity,\n  inv,\n  map,\n  max,\n  multiply,\n  size,\n  sqrt,\n  subtract,\n  typed\n});\nexport var Unit = /* #__PURE__ */createUnitClass({\n  BigNumber,\n  Complex,\n  Fraction,\n  abs,\n  addScalar,\n  config,\n  divideScalar,\n  equal,\n  fix,\n  format,\n  isNumeric,\n  multiplyScalar,\n  number,\n  pow,\n  round,\n  subtract\n});\nexport var vacuumImpedance = /* #__PURE__ */createVacuumImpedance({\n  BigNumber,\n  Unit,\n  config\n});\nexport var wienDisplacement = /* #__PURE__ */createWienDisplacement({\n  BigNumber,\n  Unit,\n  config\n});\nexport var atomicMass = /* #__PURE__ */createAtomicMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrMagneton = /* #__PURE__ */createBohrMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var boltzmann = /* #__PURE__ */createBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var conductanceQuantum = /* #__PURE__ */createConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var createUnit = /* #__PURE__ */createCreateUnit({\n  Unit,\n  typed\n});\nexport var deuteronMass = /* #__PURE__ */createDeuteronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var dotPow = /* #__PURE__ */createDotPow({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  pow,\n  typed\n});\nexport var electricConstant = /* #__PURE__ */createElectricConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var elementaryCharge = /* #__PURE__ */createElementaryCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var expm = /* #__PURE__ */createExpm({\n  abs,\n  add,\n  identity,\n  inv,\n  multiply,\n  typed\n});\nexport var faraday = /* #__PURE__ */createFaraday({\n  BigNumber,\n  Unit,\n  config\n});\nexport var firstRadiation = /* #__PURE__ */createFirstRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var gamma = /* #__PURE__ */createGamma({\n  BigNumber,\n  Complex,\n  config,\n  multiplyScalar,\n  pow,\n  typed\n});\nexport var gravitationConstant = /* #__PURE__ */createGravitationConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var hartreeEnergy = /* #__PURE__ */createHartreeEnergy({\n  BigNumber,\n  Unit,\n  config\n});\nexport var klitzing = /* #__PURE__ */createKlitzing({\n  BigNumber,\n  Unit,\n  config\n});\nexport var loschmidt = /* #__PURE__ */createLoschmidt({\n  BigNumber,\n  Unit,\n  config\n});\nexport var magneticConstant = /* #__PURE__ */createMagneticConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMass = /* #__PURE__ */createMolarMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarPlanckConstant = /* #__PURE__ */createMolarPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var neutronMass = /* #__PURE__ */createNeutronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var nuclearMagneton = /* #__PURE__ */createNuclearMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckCharge = /* #__PURE__ */createPlanckCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckLength = /* #__PURE__ */createPlanckLength({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckTemperature = /* #__PURE__ */createPlanckTemperature({\n  BigNumber,\n  Unit,\n  config\n});\nexport var protonMass = /* #__PURE__ */createProtonMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var reducedPlanckConstant = /* #__PURE__ */createReducedPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var rydberg = /* #__PURE__ */createRydberg({\n  BigNumber,\n  Unit,\n  config\n});\nexport var secondRadiation = /* #__PURE__ */createSecondRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setSymDifference = /* #__PURE__ */createSetSymDifference({\n  Index,\n  concat,\n  setDifference,\n  size,\n  subset,\n  typed\n});\nexport var speedOfLight = /* #__PURE__ */createSpeedOfLight({\n  BigNumber,\n  Unit,\n  config\n});\nexport var stefanBoltzmann = /* #__PURE__ */createStefanBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var thomsonCrossSection = /* #__PURE__ */createThomsonCrossSection({\n  BigNumber,\n  Unit,\n  config\n});\nexport var avogadro = /* #__PURE__ */createAvogadro({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrRadius = /* #__PURE__ */createBohrRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var coulomb = /* #__PURE__ */createCoulomb({\n  BigNumber,\n  Unit,\n  config\n});\nexport var divide = /* #__PURE__ */createDivide({\n  divideScalar,\n  equalScalar,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var electronMass = /* #__PURE__ */createElectronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var factorial = /* #__PURE__ */createFactorial({\n  gamma,\n  typed\n});\nexport var gravity = /* #__PURE__ */createGravity({\n  BigNumber,\n  Unit,\n  config\n});\nexport var inverseConductanceQuantum = /* #__PURE__ */createInverseConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lup = /* #__PURE__ */createLup({\n  DenseMatrix,\n  Spa,\n  SparseMatrix,\n  abs,\n  addScalar,\n  divideScalar,\n  equalScalar,\n  larger,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var magneticFluxQuantum = /* #__PURE__ */createMagneticFluxQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMassC12 = /* #__PURE__ */createMolarMassC12({\n  BigNumber,\n  Unit,\n  config\n});\nexport var multinomial = /* #__PURE__ */createMultinomial({\n  add,\n  divide,\n  factorial,\n  isInteger,\n  isPositive,\n  multiply,\n  typed\n});\nexport var permutations = /* #__PURE__ */createPermutations({\n  factorial,\n  typed\n});\nexport var planckMass = /* #__PURE__ */createPlanckMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var polynomialRoot = /* #__PURE__ */createPolynomialRoot({\n  add,\n  cbrt,\n  divide,\n  equalScalar,\n  im,\n  isZero,\n  multiply,\n  re,\n  sqrt,\n  subtract,\n  typeOf,\n  typed,\n  unaryMinus\n});\nexport var setIntersect = /* #__PURE__ */createSetIntersect({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var stirlingS2 = /* #__PURE__ */createStirlingS2({\n  bignumber,\n  addScalar,\n  combinations,\n  divideScalar,\n  factorial,\n  isInteger,\n  isNegative,\n  larger,\n  multiplyScalar,\n  number,\n  pow,\n  subtract,\n  typed\n});\nexport var unit = /* #__PURE__ */createUnitFunction({\n  Unit,\n  typed\n});\nexport var bellNumbers = /* #__PURE__ */createBellNumbers({\n  addScalar,\n  isInteger,\n  isNegative,\n  stirlingS2,\n  typed\n});\nexport var eigs = /* #__PURE__ */createEigs({\n  abs,\n  add,\n  addScalar,\n  atan,\n  bignumber,\n  column,\n  complex,\n  config,\n  cos,\n  diag,\n  divideScalar,\n  dot,\n  equal,\n  flatten,\n  im,\n  inv,\n  larger,\n  matrix,\n  matrixFromColumns,\n  multiply,\n  multiplyScalar,\n  number,\n  qr,\n  re,\n  sin,\n  smaller,\n  sqrt,\n  subtract,\n  typed,\n  usolve,\n  usolveAll\n});\nexport var fermiCoupling = /* #__PURE__ */createFermiCoupling({\n  BigNumber,\n  Unit,\n  config\n});\nexport var mean = /* #__PURE__ */createMean({\n  add,\n  divide,\n  typed\n});\nexport var molarVolume = /* #__PURE__ */createMolarVolume({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckConstant = /* #__PURE__ */createPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var quantumOfCirculation = /* #__PURE__ */createQuantumOfCirculation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setUnion = /* #__PURE__ */createSetUnion({\n  Index,\n  concat,\n  setIntersect,\n  setSymDifference,\n  size,\n  subset,\n  typed\n});\nexport var variance = /* #__PURE__ */createVariance({\n  add,\n  apply,\n  divide,\n  isNaN,\n  multiply,\n  subtract,\n  typed\n});\nexport var classicalElectronRadius = /* #__PURE__ */createClassicalElectronRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lusolve = /* #__PURE__ */createLusolve({\n  DenseMatrix,\n  lsolve,\n  lup,\n  matrix,\n  slu,\n  typed,\n  usolve\n});\nexport var median = /* #__PURE__ */createMedian({\n  add,\n  compare,\n  divide,\n  partitionSelect,\n  typed\n});\nexport var kldivergence = /* #__PURE__ */createKldivergence({\n  divide,\n  dotDivide,\n  isNumeric,\n  log,\n  map,\n  matrix,\n  multiply,\n  sum,\n  typed\n});\nexport var mad = /* #__PURE__ */createMad({\n  abs,\n  map,\n  median,\n  subtract,\n  typed\n});\nexport var std = /* #__PURE__ */createStd({\n  map,\n  sqrt,\n  typed,\n  variance\n});\nexport var gasConstant = /* #__PURE__ */createGasConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var norm = /* #__PURE__ */createNorm({\n  abs,\n  add,\n  conj,\n  ctranspose,\n  eigs,\n  equalScalar,\n  larger,\n  matrix,\n  multiply,\n  pow,\n  smaller,\n  sqrt,\n  typed\n});\nexport var rotationMatrix = /* #__PURE__ */createRotationMatrix({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  config,\n  cos,\n  matrix,\n  multiplyScalar,\n  norm,\n  sin,\n  typed,\n  unaryMinus\n});\nexport var planckTime = /* #__PURE__ */createPlanckTime({\n  BigNumber,\n  Unit,\n  config\n});\nexport var schur = /* #__PURE__ */createSchur({\n  identity,\n  matrix,\n  multiply,\n  norm,\n  qr,\n  subtract,\n  typed\n});\nexport var rotate = /* #__PURE__ */createRotate({\n  multiply,\n  rotationMatrix,\n  typed\n});\nexport var sylvester = /* #__PURE__ */createSylvester({\n  abs,\n  add,\n  concat,\n  identity,\n  index,\n  lusolve,\n  matrix,\n  matrixFromColumns,\n  multiply,\n  range,\n  schur,\n  subset,\n  subtract,\n  transpose,\n  typed\n});\nexport var lyap = /* #__PURE__ */createLyap({\n  matrix,\n  multiply,\n  sylvester,\n  transpose,\n  typed\n});", "import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createNode, createObjectNode, createOperatorNode, createParenthesisNode, createRelationalNode, createArrayNode, createBlockNode, createConditionalNode, createConstantNode, createRangeNode, createReviver, createChainClass, createFunctionAssignmentNode, createChain, createAccessorNode, createAssignmentNode, createIndexNode, createSymbolNode, createFunctionNode, createParse, createResolve, createSimplifyConstant, createCompile, createHelpClass, createLeafCount, createSimplifyCore, createEvaluate, createHelp, createParserClass, createSimplify, createSymbolicEqual, createDerivative, createParser, createRationalize, createFilterTransform, createForEachTransform, createMapTransform, createApplyTransform, createDiffTransform, createSubsetTransform, createConcatTransform, createMaxTransform, createMinTransform, createRangeTransform, createSumTransform, createCumSumTransform, createRowTransform, createColumnTransform, createIndexTransform, createMeanTransform, createVarianceTransform, createStdTransform } from '../factoriesAny.js';\nimport { BigNumber, Complex, e, _false, fineStructure, Fraction, i, _Infinity, LN10, LOG10E, Matrix, _NaN, _null, phi, Range, ResultSet, SQRT1_2,\n// eslint-disable-line camelcase\nsackurTetrode, tau, _true, version, DenseMatrix, efimovFactor, LN2, pi, replacer, SQRT2, typed, unaryPlus, weakMixingAngle, abs, acos, acot, acsc, addScalar, arg, asech, asinh, atan, atanh, bignumber, bitNot, boolean, clone, combinations, complex, conj, cosh, coth, csc, cube, equalScalar, erf, exp, expm1, filter, forEach, format, getMatrixDataType, hex, im, isInteger, isNegative, isPositive, isZero, LOG2E, lgamma, log10, log2, map, multiplyScalar, not, number, oct, pickRandom, print, random, re, sec, sign, sin, SparseMatrix, splitUnit, square, string, tan, typeOf, acosh, acsch, apply, asec, bin, combinationsWithRep, cos, csch, isNaN, isPrime, randomInt, sech, sinh, sparse, sqrt, tanh, unaryMinus, acoth, cot, fraction, isNumeric, matrix, matrixFromFunction, mod, nthRoot, numeric, or, prod, reshape, size, smaller, squeeze, subset, subtract, to, transpose, xgcd, zeros, and, bitAnd, bitXor, cbrt, compare, compareText, concat, count, ctranspose, diag, divideScalar, dotDivide, equal, fft, flatten, gcd, hasNumericValue, hypot, ifft, kron, largerEq, leftShift, lsolve, matrixFromColumns, min, mode, nthRoots, ones, partitionSelect, resize, rightArithShift, round, smallerEq, unequal, usolve, xor, add, atan2, bitOr, catalan, compareNatural, cumsum, deepEqual, diff, dot, equalText, floor, identity, invmod, larger, log, lsolveAll, matrixFromRows, multiply, qr, range, rightLogShift, setSize, slu, sum, trace, usolveAll, asin, ceil, composition, cross, det, distance, dotMultiply, FibonacciHeap, fix, ImmutableDenseMatrix, Index, intersect, lcm, log1p, max, quantileSeq, row, setCartesian, setDistinct, setIsSubset, setPowerset, sort, column, index, inv, pinv, pow, setDifference, setMultiplicity, Spa, sqrtm, Unit, vacuumImpedance, wienDisplacement, atomicMass, bohrMagneton, boltzmann, conductanceQuantum, createUnit, deuteronMass, dotPow, electricConstant, elementaryCharge, expm, faraday, firstRadiation, gamma, gravitationConstant, hartreeEnergy, klitzing, loschmidt, magneticConstant, molarMass, molarPlanckConstant, neutronMass, nuclearMagneton, planckCharge, planckLength, planckTemperature, protonMass, reducedPlanckConstant, rydberg, secondRadiation, setSymDifference, speedOfLight, stefanBoltzmann, thomsonCrossSection, avogadro, bohrRadius, coulomb, divide, electronMass, factorial, gravity, inverseConductanceQuantum, lup, magneticFluxQuantum, molarMassC12, multinomial, permutations, planckMass, polynomialRoot, setIntersect, stirlingS2, unit, bellNumbers, eigs, fermiCoupling, mean, molarVolume, planckConstant, quantumOfCirculation, setUnion, variance, classicalElectronRadius, lusolve, median, kldivergence, mad, std, gasConstant, norm, rotationMatrix, planckTime, schur, rotate, sylvester, lyap } from './pureFunctionsAny.generated.js';\nvar math = {}; // NOT pure!\nvar mathWithTransform = {}; // NOT pure!\nvar classes = {}; // NOT pure!\n\nexport var Node = createNode({\n  mathWithTransform\n});\nexport var ObjectNode = createObjectNode({\n  Node\n});\nexport var OperatorNode = createOperatorNode({\n  Node\n});\nexport var ParenthesisNode = createParenthesisNode({\n  Node\n});\nexport var RelationalNode = createRelationalNode({\n  Node\n});\nexport var ArrayNode = createArrayNode({\n  Node\n});\nexport var BlockNode = createBlockNode({\n  Node,\n  ResultSet\n});\nexport var ConditionalNode = createConditionalNode({\n  Node\n});\nexport var ConstantNode = createConstantNode({\n  Node\n});\nexport var RangeNode = createRangeNode({\n  Node\n});\nexport var reviver = createReviver({\n  classes\n});\nexport var Chain = createChainClass({\n  math,\n  typed\n});\nexport var FunctionAssignmentNode = createFunctionAssignmentNode({\n  Node,\n  typed\n});\nexport var chain = createChain({\n  Chain,\n  typed\n});\nexport var AccessorNode = createAccessorNode({\n  Node,\n  subset\n});\nexport var AssignmentNode = createAssignmentNode({\n  matrix,\n  Node,\n  subset\n});\nexport var IndexNode = createIndexNode({\n  Node,\n  size\n});\nexport var SymbolNode = createSymbolNode({\n  Unit,\n  Node,\n  math\n});\nexport var FunctionNode = createFunctionNode({\n  Node,\n  SymbolNode,\n  math\n});\nexport var parse = createParse({\n  AccessorNode,\n  ArrayNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  config,\n  numeric,\n  typed\n});\nexport var resolve = createResolve({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  parse,\n  typed\n});\nexport var simplifyConstant = createSimplifyConstant({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  SymbolNode,\n  config,\n  mathWithTransform,\n  matrix,\n  parse,\n  typed\n});\nexport var compile = createCompile({\n  parse,\n  typed\n});\nexport var Help = createHelpClass({\n  parse\n});\nexport var leafCount = createLeafCount({\n  parse,\n  typed\n});\nexport var simplifyCore = createSimplifyCore({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  divide,\n  equal,\n  isZero,\n  multiply,\n  parse,\n  pow,\n  subtract,\n  typed\n});\nexport var evaluate = createEvaluate({\n  parse,\n  typed\n});\nexport var help = createHelp({\n  Help,\n  mathWithTransform,\n  typed\n});\nexport var Parser = createParserClass({\n  evaluate\n});\nexport var simplify = createSimplify({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  resolve,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var symbolicEqual = createSymbolicEqual({\n  OperatorNode,\n  parse,\n  simplify,\n  typed\n});\nexport var derivative = createDerivative({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  config,\n  equal,\n  isZero,\n  numeric,\n  parse,\n  simplify,\n  typed\n});\nexport var parser = createParser({\n  Parser,\n  typed\n});\nexport var rationalize = createRationalize({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  simplify,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\n_extends(math, {\n  e,\n  false: _false,\n  fineStructure,\n  i,\n  Infinity: _Infinity,\n  LN10,\n  LOG10E,\n  NaN: _NaN,\n  null: _null,\n  phi,\n  SQRT1_2,\n  sackurTetrode,\n  tau,\n  true: _true,\n  'E': e,\n  version,\n  efimovFactor,\n  LN2,\n  pi,\n  replacer,\n  reviver,\n  SQRT2,\n  typed,\n  unaryPlus,\n  'PI': pi,\n  weakMixingAngle,\n  abs,\n  acos,\n  acot,\n  acsc,\n  addScalar,\n  arg,\n  asech,\n  asinh,\n  atan,\n  atanh,\n  bignumber,\n  bitNot,\n  boolean,\n  clone,\n  combinations,\n  complex,\n  conj,\n  cosh,\n  coth,\n  csc,\n  cube,\n  equalScalar,\n  erf,\n  exp,\n  expm1,\n  filter,\n  forEach,\n  format,\n  getMatrixDataType,\n  hex,\n  im,\n  isInteger,\n  isNegative,\n  isPositive,\n  isZero,\n  LOG2E,\n  lgamma,\n  log10,\n  log2,\n  map,\n  multiplyScalar,\n  not,\n  number,\n  oct,\n  pickRandom,\n  print,\n  random,\n  re,\n  sec,\n  sign,\n  sin,\n  splitUnit,\n  square,\n  string,\n  tan,\n  typeOf,\n  acosh,\n  acsch,\n  apply,\n  asec,\n  bin,\n  chain,\n  combinationsWithRep,\n  cos,\n  csch,\n  isNaN,\n  isPrime,\n  randomInt,\n  sech,\n  sinh,\n  sparse,\n  sqrt,\n  tanh,\n  unaryMinus,\n  acoth,\n  cot,\n  fraction,\n  isNumeric,\n  matrix,\n  matrixFromFunction,\n  mod,\n  nthRoot,\n  numeric,\n  or,\n  prod,\n  reshape,\n  size,\n  smaller,\n  squeeze,\n  subset,\n  subtract,\n  to,\n  transpose,\n  xgcd,\n  zeros,\n  and,\n  bitAnd,\n  bitXor,\n  cbrt,\n  compare,\n  compareText,\n  concat,\n  count,\n  ctranspose,\n  diag,\n  divideScalar,\n  dotDivide,\n  equal,\n  fft,\n  flatten,\n  gcd,\n  hasNumericValue,\n  hypot,\n  ifft,\n  kron,\n  largerEq,\n  leftShift,\n  lsolve,\n  matrixFromColumns,\n  min,\n  mode,\n  nthRoots,\n  ones,\n  partitionSelect,\n  resize,\n  rightArithShift,\n  round,\n  smallerEq,\n  unequal,\n  usolve,\n  xor,\n  add,\n  atan2,\n  bitOr,\n  catalan,\n  compareNatural,\n  cumsum,\n  deepEqual,\n  diff,\n  dot,\n  equalText,\n  floor,\n  identity,\n  invmod,\n  larger,\n  log,\n  lsolveAll,\n  matrixFromRows,\n  multiply,\n  qr,\n  range,\n  rightLogShift,\n  setSize,\n  slu,\n  sum,\n  trace,\n  usolveAll,\n  asin,\n  ceil,\n  composition,\n  cross,\n  det,\n  distance,\n  dotMultiply,\n  fix,\n  intersect,\n  lcm,\n  log1p,\n  max,\n  quantileSeq,\n  row,\n  setCartesian,\n  setDistinct,\n  setIsSubset,\n  setPowerset,\n  sort,\n  column,\n  index,\n  inv,\n  pinv,\n  pow,\n  setDifference,\n  setMultiplicity,\n  sqrtm,\n  vacuumImpedance,\n  wienDisplacement,\n  atomicMass,\n  bohrMagneton,\n  boltzmann,\n  conductanceQuantum,\n  createUnit,\n  deuteronMass,\n  dotPow,\n  electricConstant,\n  elementaryCharge,\n  expm,\n  faraday,\n  firstRadiation,\n  gamma,\n  gravitationConstant,\n  hartreeEnergy,\n  klitzing,\n  loschmidt,\n  magneticConstant,\n  molarMass,\n  molarPlanckConstant,\n  neutronMass,\n  nuclearMagneton,\n  planckCharge,\n  planckLength,\n  planckTemperature,\n  protonMass,\n  reducedPlanckConstant,\n  rydberg,\n  secondRadiation,\n  setSymDifference,\n  speedOfLight,\n  stefanBoltzmann,\n  thomsonCrossSection,\n  avogadro,\n  bohrRadius,\n  coulomb,\n  divide,\n  electronMass,\n  factorial,\n  gravity,\n  inverseConductanceQuantum,\n  lup,\n  magneticFluxQuantum,\n  molarMassC12,\n  multinomial,\n  parse,\n  permutations,\n  planckMass,\n  polynomialRoot,\n  resolve,\n  setIntersect,\n  simplifyConstant,\n  stirlingS2,\n  unit,\n  bellNumbers,\n  compile,\n  eigs,\n  fermiCoupling,\n  leafCount,\n  mean,\n  molarVolume,\n  planckConstant,\n  quantumOfCirculation,\n  setUnion,\n  simplifyCore,\n  variance,\n  classicalElectronRadius,\n  evaluate,\n  help,\n  lusolve,\n  median,\n  simplify,\n  symbolicEqual,\n  derivative,\n  kldivergence,\n  mad,\n  parser,\n  rationalize,\n  std,\n  gasConstant,\n  norm,\n  rotationMatrix,\n  planckTime,\n  schur,\n  rotate,\n  sylvester,\n  lyap,\n  config\n});\n_extends(mathWithTransform, math, {\n  filter: createFilterTransform({\n    typed\n  }),\n  forEach: createForEachTransform({\n    typed\n  }),\n  map: createMapTransform({\n    typed\n  }),\n  apply: createApplyTransform({\n    isInteger,\n    typed\n  }),\n  diff: createDiffTransform({\n    bignumber,\n    matrix,\n    number,\n    subtract,\n    typed\n  }),\n  subset: createSubsetTransform({\n    matrix,\n    typed\n  }),\n  concat: createConcatTransform({\n    isInteger,\n    matrix,\n    typed\n  }),\n  max: createMaxTransform({\n    config,\n    larger,\n    numeric,\n    typed\n  }),\n  min: createMinTransform({\n    config,\n    numeric,\n    smaller,\n    typed\n  }),\n  range: createRangeTransform({\n    bignumber,\n    matrix,\n    config,\n    larger,\n    largerEq,\n    smaller,\n    smallerEq,\n    typed\n  }),\n  sum: createSumTransform({\n    add,\n    config,\n    numeric,\n    typed\n  }),\n  cumsum: createCumSumTransform({\n    add,\n    typed,\n    unaryPlus\n  }),\n  row: createRowTransform({\n    Index,\n    matrix,\n    range,\n    typed\n  }),\n  column: createColumnTransform({\n    Index,\n    matrix,\n    range,\n    typed\n  }),\n  index: createIndexTransform({\n    Index\n  }),\n  mean: createMeanTransform({\n    add,\n    divide,\n    typed\n  }),\n  variance: createVarianceTransform({\n    add,\n    apply,\n    divide,\n    isNaN,\n    multiply,\n    subtract,\n    typed\n  }),\n  std: createStdTransform({\n    map,\n    sqrt,\n    typed,\n    variance\n  })\n});\n_extends(classes, {\n  BigNumber,\n  Complex,\n  Fraction,\n  Matrix,\n  Node,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  Range,\n  RelationalNode,\n  ResultSet,\n  ArrayNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  DenseMatrix,\n  RangeNode,\n  Chain,\n  FunctionAssignmentNode,\n  SparseMatrix,\n  AccessorNode,\n  AssignmentNode,\n  IndexNode,\n  FibonacciHeap,\n  ImmutableDenseMatrix,\n  Index,\n  Spa,\n  Unit,\n  SymbolNode,\n  FunctionNode,\n  Help,\n  Parser\n});\nChain.createProxy(math);\nexport { embeddedDocs as docs } from '../expression/embeddedDocs/embeddedDocs.js';", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createBigNumberClass } from '../../factoriesAny.js';\nexport var BigNumberDependencies = {\n  createBigNumberClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createComplexClass } from '../../factoriesAny.js';\nexport var ComplexDependencies = {\n  createComplexClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createMatrixClass } from '../../factoriesAny.js';\nexport var MatrixDependencies = {\n  createMatrixClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { createDenseMatrixClass } from '../../factoriesAny.js';\nexport var DenseMatrixDependencies = {\n  MatrixDependencies,\n  createDenseMatrixClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createFractionClass } from '../../factoriesAny.js';\nexport var FractionDependencies = {\n  createFractionClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { createTyped } from '../../factoriesAny.js';\nexport var typedDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  DenseMatrixDependencies,\n  FractionDependencies,\n  createTyped\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAbs } from '../../factoriesAny.js';\nexport var absDependencies = {\n  typedDependencies,\n  createAbs\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createNode } from '../../factoriesAny.js';\nexport var NodeDependencies = {\n  createNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqualScalar } from '../../factoriesAny.js';\nexport var equalScalarDependencies = {\n  typedDependencies,\n  createEqualScalar\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSparseMatrixClass } from '../../factoriesAny.js';\nexport var SparseMatrixDependencies = {\n  MatrixDependencies,\n  equalScalarDependencies,\n  typedDependencies,\n  createSparseMatrixClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrix } from '../../factoriesAny.js';\nexport var matrixDependencies = {\n  DenseMatrixDependencies,\n  MatrixDependencies,\n  SparseMatrixDependencies,\n  typedDependencies,\n  createMatrix\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSubset } from '../../factoriesAny.js';\nexport var subsetDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSubset\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { createAccessorNode } from '../../factoriesAny.js';\nexport var AccessorNodeDependencies = {\n  NodeDependencies,\n  subsetDependencies,\n  createAccessorNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcos } from '../../factoriesAny.js';\nexport var acosDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAcos\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcosh } from '../../factoriesAny.js';\nexport var acoshDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAcosh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcot } from '../../factoriesAny.js';\nexport var acotDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createAcot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcoth } from '../../factoriesAny.js';\nexport var acothDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAcoth\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcsc } from '../../factoriesAny.js';\nexport var acscDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAcsc\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcsch } from '../../factoriesAny.js';\nexport var acschDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createAcsch\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAddScalar } from '../../factoriesAny.js';\nexport var addScalarDependencies = {\n  typedDependencies,\n  createAddScalar\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAdd } from '../../factoriesAny.js';\nexport var addDependencies = {\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createAdd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNot } from '../../factoriesAny.js';\nexport var notDependencies = {\n  typedDependencies,\n  createNot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createZeros } from '../../factoriesAny.js';\nexport var zerosDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createZeros\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { notDependencies } from './dependenciesNot.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createAnd } from '../../factoriesAny.js';\nexport var andDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  notDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createAnd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsInteger } from '../../factoriesAny.js';\nexport var isIntegerDependencies = {\n  typedDependencies,\n  createIsInteger\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createApply } from '../../factoriesAny.js';\nexport var applyDependencies = {\n  isIntegerDependencies,\n  typedDependencies,\n  createApply\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createApplyTransform } from '../../factoriesAny.js';\nexport var applyTransformDependencies = {\n  isIntegerDependencies,\n  typedDependencies,\n  createApplyTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createArg } from '../../factoriesAny.js';\nexport var argDependencies = {\n  typedDependencies,\n  createArg\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createArrayNode } from '../../factoriesAny.js';\nexport var ArrayNodeDependencies = {\n  NodeDependencies,\n  createArrayNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsec } from '../../factoriesAny.js';\nexport var asecDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAsec\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsech } from '../../factoriesAny.js';\nexport var asechDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAsech\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsin } from '../../factoriesAny.js';\nexport var asinDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAsin\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsinh } from '../../factoriesAny.js';\nexport var asinhDependencies = {\n  typedDependencies,\n  createAsinh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { createAssignmentNode } from '../../factoriesAny.js';\nexport var AssignmentNodeDependencies = {\n  matrixDependencies,\n  NodeDependencies,\n  subsetDependencies,\n  createAssignmentNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtan } from '../../factoriesAny.js';\nexport var atanDependencies = {\n  typedDependencies,\n  createAtan\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtan2 } from '../../factoriesAny.js';\nexport var atan2Dependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createAtan2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtanh } from '../../factoriesAny.js';\nexport var atanhDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAtanh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBignumber } from '../../factoriesAny.js';\nexport var bignumberDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createBignumber\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFraction } from '../../factoriesAny.js';\nexport var fractionDependencies = {\n  FractionDependencies,\n  typedDependencies,\n  createFraction\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNumber } from '../../factoriesAny.js';\nexport var numberDependencies = {\n  typedDependencies,\n  createNumber\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { createNumeric } from '../../factoriesAny.js';\nexport var numericDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  numberDependencies,\n  createNumeric\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDivideScalar } from '../../factoriesAny.js';\nexport var divideScalarDependencies = {\n  numericDependencies,\n  typedDependencies,\n  createDivideScalar\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqual } from '../../factoriesAny.js';\nexport var equalDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createEqual\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRound } from '../../factoriesAny.js';\nexport var roundDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRound\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createCeil } from '../../factoriesAny.js';\nexport var ceilDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  roundDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createCeil\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createFloor } from '../../factoriesAny.js';\nexport var floorDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  roundDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createFloor\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { ceilDependencies } from './dependenciesCeil.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { floorDependencies } from './dependenciesFloor.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createFix } from '../../factoriesAny.js';\nexport var fixDependencies = {\n  ComplexDependencies,\n  DenseMatrixDependencies,\n  ceilDependencies,\n  equalScalarDependencies,\n  floorDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createFix\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFormat } from '../../factoriesAny.js';\nexport var formatDependencies = {\n  typedDependencies,\n  createFormat\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNumeric } from '../../factoriesAny.js';\nexport var isNumericDependencies = {\n  typedDependencies,\n  createIsNumeric\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultiplyScalar } from '../../factoriesAny.js';\nexport var multiplyScalarDependencies = {\n  typedDependencies,\n  createMultiplyScalar\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIdentity } from '../../factoriesAny.js';\nexport var identityDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createIdentity\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsZero } from '../../factoriesAny.js';\nexport var isZeroDependencies = {\n  typedDependencies,\n  createIsZero\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConj } from '../../factoriesAny.js';\nexport var conjDependencies = {\n  typedDependencies,\n  createConj\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSize } from '../../factoriesAny.js';\nexport var sizeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSize\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDot } from '../../factoriesAny.js';\nexport var dotDependencies = {\n  addScalarDependencies,\n  conjDependencies,\n  multiplyScalarDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createDot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultiply } from '../../factoriesAny.js';\nexport var multiplyDependencies = {\n  addScalarDependencies,\n  dotDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createMultiply\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnaryMinus } from '../../factoriesAny.js';\nexport var unaryMinusDependencies = {\n  typedDependencies,\n  createUnaryMinus\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createSubtract } from '../../factoriesAny.js';\nexport var subtractDependencies = {\n  DenseMatrixDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createSubtract\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createDet } from '../../factoriesAny.js';\nexport var detDependencies = {\n  divideScalarDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createDet\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { detDependencies } from './dependenciesDet.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createInv } from '../../factoriesAny.js';\nexport var invDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  detDependencies,\n  divideScalarDependencies,\n  identityDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createInv\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPow } from '../../factoriesAny.js';\nexport var powDependencies = {\n  ComplexDependencies,\n  fractionDependencies,\n  identityDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  numberDependencies,\n  typedDependencies,\n  createPow\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { fixDependencies } from './dependenciesFix.generated.js';\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { createUnitClass } from '../../factoriesAny.js';\nexport var UnitDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  FractionDependencies,\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalDependencies,\n  fixDependencies,\n  formatDependencies,\n  isNumericDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  powDependencies,\n  roundDependencies,\n  subtractDependencies,\n  createUnitClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createAtomicMass } from '../../factoriesAny.js';\nexport var atomicMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createAtomicMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createAvogadro } from '../../factoriesAny.js';\nexport var avogadroDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createAvogadro\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNegative } from '../../factoriesAny.js';\nexport var isNegativeDependencies = {\n  typedDependencies,\n  createIsNegative\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCombinations } from '../../factoriesAny.js';\nexport var combinationsDependencies = {\n  typedDependencies,\n  createCombinations\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGamma } from '../../factoriesAny.js';\nexport var gammaDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  multiplyScalarDependencies,\n  powDependencies,\n  typedDependencies,\n  createGamma\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { gammaDependencies } from './dependenciesGamma.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFactorial } from '../../factoriesAny.js';\nexport var factorialDependencies = {\n  gammaDependencies,\n  typedDependencies,\n  createFactorial\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLarger } from '../../factoriesAny.js';\nexport var largerDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLarger\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createStirlingS2 } from '../../factoriesAny.js';\nexport var stirlingS2Dependencies = {\n  bignumberDependencies,\n  addScalarDependencies,\n  combinationsDependencies,\n  divideScalarDependencies,\n  factorialDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  largerDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  powDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createStirlingS2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { stirlingS2Dependencies } from './dependenciesStirlingS2.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBellNumbers } from '../../factoriesAny.js';\nexport var bellNumbersDependencies = {\n  addScalarDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  stirlingS2Dependencies,\n  typedDependencies,\n  createBellNumbers\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBin } from '../../factoriesAny.js';\nexport var binDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createBin\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitAnd } from '../../factoriesAny.js';\nexport var bitAndDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitAnd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitNot } from '../../factoriesAny.js';\nexport var bitNotDependencies = {\n  typedDependencies,\n  createBitNot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitOr } from '../../factoriesAny.js';\nexport var bitOrDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitOr\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitXor } from '../../factoriesAny.js';\nexport var bitXorDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitXor\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createResultSet } from '../../factoriesAny.js';\nexport var ResultSetDependencies = {\n  createResultSet\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { ResultSetDependencies } from './dependenciesResultSet.generated.js';\nimport { createBlockNode } from '../../factoriesAny.js';\nexport var BlockNodeDependencies = {\n  NodeDependencies,\n  ResultSetDependencies,\n  createBlockNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBohrMagneton } from '../../factoriesAny.js';\nexport var bohrMagnetonDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBohrMagneton\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBohrRadius } from '../../factoriesAny.js';\nexport var bohrRadiusDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBohrRadius\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBoltzmann } from '../../factoriesAny.js';\nexport var boltzmannDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBoltzmann\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBoolean } from '../../factoriesAny.js';\nexport var booleanDependencies = {\n  typedDependencies,\n  createBoolean\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCatalan } from '../../factoriesAny.js';\nexport var catalanDependencies = {\n  addScalarDependencies,\n  combinationsDependencies,\n  divideScalarDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createCatalan\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createCbrt } from '../../factoriesAny.js';\nexport var cbrtDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  FractionDependencies,\n  isNegativeDependencies,\n  matrixDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createCbrt\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createChainClass } from '../../factoriesAny.js';\nexport var ChainDependencies = {\n  typedDependencies,\n  createChainClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ChainDependencies } from './dependenciesChainClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createChain } from '../../factoriesAny.js';\nexport var chainDependencies = {\n  ChainDependencies,\n  typedDependencies,\n  createChain\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createClassicalElectronRadius } from '../../factoriesAny.js';\nexport var classicalElectronRadiusDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createClassicalElectronRadius\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createClone } from '../../factoriesAny.js';\nexport var cloneDependencies = {\n  typedDependencies,\n  createClone\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSmaller } from '../../factoriesAny.js';\nexport var smallerDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSmaller\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { createImmutableDenseMatrixClass } from '../../factoriesAny.js';\nexport var ImmutableDenseMatrixDependencies = {\n  DenseMatrixDependencies,\n  smallerDependencies,\n  createImmutableDenseMatrixClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ImmutableDenseMatrixDependencies } from './dependenciesImmutableDenseMatrixClass.generated.js';\nimport { createIndexClass } from '../../factoriesAny.js';\nexport var IndexDependencies = {\n  ImmutableDenseMatrixDependencies,\n  createIndexClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLargerEq } from '../../factoriesAny.js';\nexport var largerEqDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLargerEq\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSmallerEq } from '../../factoriesAny.js';\nexport var smallerEqDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSmallerEq\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { smallerEqDependencies } from './dependenciesSmallerEq.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRange } from '../../factoriesAny.js';\nexport var rangeDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  smallerDependencies,\n  smallerEqDependencies,\n  typedDependencies,\n  createRange\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createColumn } from '../../factoriesAny.js';\nexport var columnDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createColumn\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createColumnTransform } from '../../factoriesAny.js';\nexport var columnTransformDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createColumnTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCombinationsWithRep } from '../../factoriesAny.js';\nexport var combinationsWithRepDependencies = {\n  typedDependencies,\n  createCombinationsWithRep\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompare } from '../../factoriesAny.js';\nexport var compareDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  FractionDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createCompare\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompareNatural } from '../../factoriesAny.js';\nexport var compareNaturalDependencies = {\n  compareDependencies,\n  typedDependencies,\n  createCompareNatural\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompareText } from '../../factoriesAny.js';\nexport var compareTextDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createCompareText\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createConditionalNode } from '../../factoriesAny.js';\nexport var ConditionalNodeDependencies = {\n  NodeDependencies,\n  createConditionalNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createConstantNode } from '../../factoriesAny.js';\nexport var ConstantNodeDependencies = {\n  NodeDependencies,\n  createConstantNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFunctionAssignmentNode } from '../../factoriesAny.js';\nexport var FunctionAssignmentNodeDependencies = {\n  NodeDependencies,\n  typedDependencies,\n  createFunctionAssignmentNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createSymbolNode } from '../../factoriesAny.js';\nexport var SymbolNodeDependencies = {\n  UnitDependencies,\n  NodeDependencies,\n  createSymbolNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { createFunctionNode } from '../../factoriesAny.js';\nexport var FunctionNodeDependencies = {\n  NodeDependencies,\n  SymbolNodeDependencies,\n  createFunctionNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { createIndexNode } from '../../factoriesAny.js';\nexport var IndexNodeDependencies = {\n  NodeDependencies,\n  sizeDependencies,\n  createIndexNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createObjectNode } from '../../factoriesAny.js';\nexport var ObjectNodeDependencies = {\n  NodeDependencies,\n  createObjectNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createOperatorNode } from '../../factoriesAny.js';\nexport var OperatorNodeDependencies = {\n  NodeDependencies,\n  createOperatorNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createParenthesisNode } from '../../factoriesAny.js';\nexport var ParenthesisNodeDependencies = {\n  NodeDependencies,\n  createParenthesisNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createRangeNode } from '../../factoriesAny.js';\nexport var RangeNodeDependencies = {\n  NodeDependencies,\n  createRangeNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createRelationalNode } from '../../factoriesAny.js';\nexport var RelationalNodeDependencies = {\n  NodeDependencies,\n  createRelationalNode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { AssignmentNodeDependencies } from './dependenciesAssignmentNode.generated.js';\nimport { BlockNodeDependencies } from './dependenciesBlockNode.generated.js';\nimport { ConditionalNodeDependencies } from './dependenciesConditionalNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionAssignmentNodeDependencies } from './dependenciesFunctionAssignmentNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { RangeNodeDependencies } from './dependenciesRangeNode.generated.js';\nimport { RelationalNodeDependencies } from './dependenciesRelationalNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createParse } from '../../factoriesAny.js';\nexport var parseDependencies = {\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  AssignmentNodeDependencies,\n  BlockNodeDependencies,\n  ConditionalNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionAssignmentNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  RangeNodeDependencies,\n  RelationalNodeDependencies,\n  SymbolNodeDependencies,\n  numericDependencies,\n  typedDependencies,\n  createParse\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompile } from '../../factoriesAny.js';\nexport var compileDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createCompile\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createComplex } from '../../factoriesAny.js';\nexport var complexDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createComplex\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsPositive } from '../../factoriesAny.js';\nexport var isPositiveDependencies = {\n  typedDependencies,\n  createIsPositive\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createComposition } from '../../factoriesAny.js';\nexport var compositionDependencies = {\n  addScalarDependencies,\n  combinationsDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  isPositiveDependencies,\n  largerDependencies,\n  typedDependencies,\n  createComposition\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConcat } from '../../factoriesAny.js';\nexport var concatDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createConcat\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConcatTransform } from '../../factoriesAny.js';\nexport var concatTransformDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createConcatTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createConductanceQuantum } from '../../factoriesAny.js';\nexport var conductanceQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createConductanceQuantum\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCos } from '../../factoriesAny.js';\nexport var cosDependencies = {\n  typedDependencies,\n  createCos\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCosh } from '../../factoriesAny.js';\nexport var coshDependencies = {\n  typedDependencies,\n  createCosh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCot } from '../../factoriesAny.js';\nexport var cotDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCoth } from '../../factoriesAny.js';\nexport var cothDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCoth\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createCoulomb } from '../../factoriesAny.js';\nexport var coulombDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createCoulomb\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createProd } from '../../factoriesAny.js';\nexport var prodDependencies = {\n  multiplyScalarDependencies,\n  numericDependencies,\n  typedDependencies,\n  createProd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { prodDependencies } from './dependenciesProd.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCount } from '../../factoriesAny.js';\nexport var countDependencies = {\n  prodDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createCount\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCreateUnit } from '../../factoriesAny.js';\nexport var createUnitDependencies = {\n  UnitDependencies,\n  typedDependencies,\n  createCreateUnit\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCross } from '../../factoriesAny.js';\nexport var crossDependencies = {\n  matrixDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createCross\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCsc } from '../../factoriesAny.js';\nexport var cscDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCsc\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCsch } from '../../factoriesAny.js';\nexport var cschDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCsch\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTranspose } from '../../factoriesAny.js';\nexport var transposeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createTranspose\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCtranspose } from '../../factoriesAny.js';\nexport var ctransposeDependencies = {\n  conjDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createCtranspose\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCube } from '../../factoriesAny.js';\nexport var cubeDependencies = {\n  typedDependencies,\n  createCube\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnaryPlus } from '../../factoriesAny.js';\nexport var unaryPlusDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createUnaryPlus\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryPlusDependencies } from './dependenciesUnaryPlus.generated.js';\nimport { createCumSum } from '../../factoriesAny.js';\nexport var cumsumDependencies = {\n  addDependencies,\n  typedDependencies,\n  unaryPlusDependencies,\n  createCumSum\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryPlusDependencies } from './dependenciesUnaryPlus.generated.js';\nimport { createCumSumTransform } from '../../factoriesAny.js';\nexport var cumsumTransformDependencies = {\n  addDependencies,\n  typedDependencies,\n  unaryPlusDependencies,\n  createCumSumTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDeepEqual } from '../../factoriesAny.js';\nexport var deepEqualDependencies = {\n  equalDependencies,\n  typedDependencies,\n  createDeepEqual\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDivide } from '../../factoriesAny.js';\nexport var divideDependencies = {\n  divideScalarDependencies,\n  equalScalarDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createDivide\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createResolve } from '../../factoriesAny.js';\nexport var resolveDependencies = {\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  parseDependencies,\n  typedDependencies,\n  createResolve\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplifyConstant } from '../../factoriesAny.js';\nexport var simplifyConstantDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  SymbolNodeDependencies,\n  matrixDependencies,\n  parseDependencies,\n  typedDependencies,\n  createSimplifyConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplifyCore } from '../../factoriesAny.js';\nexport var simplifyCoreDependencies = {\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSimplifyCore\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { resolveDependencies } from './dependenciesResolve.generated.js';\nimport { simplifyConstantDependencies } from './dependenciesSimplifyConstant.generated.js';\nimport { simplifyCoreDependencies } from './dependenciesSimplifyCore.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplify } from '../../factoriesAny.js';\nexport var simplifyDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  resolveDependencies,\n  simplifyConstantDependencies,\n  simplifyCoreDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSimplify\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDerivative } from '../../factoriesAny.js';\nexport var derivativeDependencies = {\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  numericDependencies,\n  parseDependencies,\n  simplifyDependencies,\n  typedDependencies,\n  createDerivative\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createDeuteronMass } from '../../factoriesAny.js';\nexport var deuteronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createDeuteronMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiag } from '../../factoriesAny.js';\nexport var diagDependencies = {\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createDiag\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiff } from '../../factoriesAny.js';\nexport var diffDependencies = {\n  matrixDependencies,\n  numberDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createDiff\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiffTransform } from '../../factoriesAny.js';\nexport var diffTransformDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  numberDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createDiffTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqrt } from '../../factoriesAny.js';\nexport var sqrtDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createSqrt\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createDistance } from '../../factoriesAny.js';\nexport var distanceDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  multiplyScalarDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createDistance\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotDivide } from '../../factoriesAny.js';\nexport var dotDivideDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createDotDivide\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotMultiply } from '../../factoriesAny.js';\nexport var dotMultiplyDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createDotMultiply\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotPow } from '../../factoriesAny.js';\nexport var dotPowDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  powDependencies,\n  typedDependencies,\n  createDotPow\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createE } from '../../factoriesAny.js';\nexport var eDependencies = {\n  BigNumberDependencies,\n  createE\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createEfimovFactor } from '../../factoriesAny.js';\nexport var efimovFactorDependencies = {\n  BigNumberDependencies,\n  createEfimovFactor\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFlatten } from '../../factoriesAny.js';\nexport var flattenDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createFlatten\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIm } from '../../factoriesAny.js';\nexport var imDependencies = {\n  typedDependencies,\n  createIm\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromColumns } from '../../factoriesAny.js';\nexport var matrixFromColumnsDependencies = {\n  flattenDependencies,\n  matrixDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createMatrixFromColumns\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSign } from '../../factoriesAny.js';\nexport var signDependencies = {\n  BigNumberDependencies,\n  FractionDependencies,\n  complexDependencies,\n  typedDependencies,\n  createSign\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { signDependencies } from './dependenciesSign.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createQr } from '../../factoriesAny.js';\nexport var qrDependencies = {\n  addScalarDependencies,\n  complexDependencies,\n  conjDependencies,\n  divideScalarDependencies,\n  equalDependencies,\n  identityDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  signDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  zerosDependencies,\n  createQr\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRe } from '../../factoriesAny.js';\nexport var reDependencies = {\n  typedDependencies,\n  createRe\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSin } from '../../factoriesAny.js';\nexport var sinDependencies = {\n  typedDependencies,\n  createSin\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUsolve } from '../../factoriesAny.js';\nexport var usolveDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createUsolve\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUsolveAll } from '../../factoriesAny.js';\nexport var usolveAllDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createUsolveAll\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { atanDependencies } from './dependenciesAtan.generated.js';\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { columnDependencies } from './dependenciesColumn.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { cosDependencies } from './dependenciesCos.generated.js';\nimport { diagDependencies } from './dependenciesDiag.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { imDependencies } from './dependenciesIm.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { matrixFromColumnsDependencies } from './dependenciesMatrixFromColumns.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { qrDependencies } from './dependenciesQr.generated.js';\nimport { reDependencies } from './dependenciesRe.generated.js';\nimport { sinDependencies } from './dependenciesSin.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { usolveDependencies } from './dependenciesUsolve.generated.js';\nimport { usolveAllDependencies } from './dependenciesUsolveAll.generated.js';\nimport { createEigs } from '../../factoriesAny.js';\nexport var eigsDependencies = {\n  absDependencies,\n  addDependencies,\n  addScalarDependencies,\n  atanDependencies,\n  bignumberDependencies,\n  columnDependencies,\n  complexDependencies,\n  cosDependencies,\n  diagDependencies,\n  divideScalarDependencies,\n  dotDependencies,\n  equalDependencies,\n  flattenDependencies,\n  imDependencies,\n  invDependencies,\n  largerDependencies,\n  matrixDependencies,\n  matrixFromColumnsDependencies,\n  multiplyDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  qrDependencies,\n  reDependencies,\n  sinDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  usolveDependencies,\n  usolveAllDependencies,\n  createEigs\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElectricConstant } from '../../factoriesAny.js';\nexport var electricConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElectricConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElectronMass } from '../../factoriesAny.js';\nexport var electronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElectronMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElementaryCharge } from '../../factoriesAny.js';\nexport var elementaryChargeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElementaryCharge\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareTextDependencies } from './dependenciesCompareText.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqualText } from '../../factoriesAny.js';\nexport var equalTextDependencies = {\n  compareTextDependencies,\n  isZeroDependencies,\n  typedDependencies,\n  createEqualText\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createErf } from '../../factoriesAny.js';\nexport var erfDependencies = {\n  typedDependencies,\n  createErf\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEvaluate } from '../../factoriesAny.js';\nexport var evaluateDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createEvaluate\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExp } from '../../factoriesAny.js';\nexport var expDependencies = {\n  typedDependencies,\n  createExp\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExpm } from '../../factoriesAny.js';\nexport var expmDependencies = {\n  absDependencies,\n  addDependencies,\n  identityDependencies,\n  invDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createExpm\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExpm1 } from '../../factoriesAny.js';\nexport var expm1Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createExpm1\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createFalse } from '../../factoriesAny.js';\nexport var falseDependencies = {\n  createFalse\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFaraday } from '../../factoriesAny.js';\nexport var faradayDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFaraday\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFermiCoupling } from '../../factoriesAny.js';\nexport var fermiCouplingDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFermiCoupling\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { createI } from '../../factoriesAny.js';\nexport var iDependencies = {\n  ComplexDependencies,\n  createI\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createTau } from '../../factoriesAny.js';\nexport var tauDependencies = {\n  BigNumberDependencies,\n  createTau\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { expDependencies } from './dependenciesExp.generated.js';\nimport { iDependencies } from './dependenciesI.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { tauDependencies } from './dependenciesTau.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFft } from '../../factoriesAny.js';\nexport var fftDependencies = {\n  addScalarDependencies,\n  divideScalarDependencies,\n  expDependencies,\n  iDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  tauDependencies,\n  typedDependencies,\n  createFft\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { createFibonacciHeapClass } from '../../factoriesAny.js';\nexport var FibonacciHeapDependencies = {\n  largerDependencies,\n  smallerDependencies,\n  createFibonacciHeapClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFilter } from '../../factoriesAny.js';\nexport var filterDependencies = {\n  typedDependencies,\n  createFilter\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFilterTransform } from '../../factoriesAny.js';\nexport var filterTransformDependencies = {\n  typedDependencies,\n  createFilterTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createFineStructure } from '../../factoriesAny.js';\nexport var fineStructureDependencies = {\n  BigNumberDependencies,\n  createFineStructure\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFirstRadiation } from '../../factoriesAny.js';\nexport var firstRadiationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFirstRadiation\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createForEach } from '../../factoriesAny.js';\nexport var forEachDependencies = {\n  typedDependencies,\n  createForEach\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createForEachTransform } from '../../factoriesAny.js';\nexport var forEachTransformDependencies = {\n  typedDependencies,\n  createForEachTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGasConstant } from '../../factoriesAny.js';\nexport var gasConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGasConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGcd } from '../../factoriesAny.js';\nexport var gcdDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createGcd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGetMatrixDataType } from '../../factoriesAny.js';\nexport var getMatrixDataTypeDependencies = {\n  typedDependencies,\n  createGetMatrixDataType\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGravitationConstant } from '../../factoriesAny.js';\nexport var gravitationConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGravitationConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGravity } from '../../factoriesAny.js';\nexport var gravityDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGravity\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createHartreeEnergy } from '../../factoriesAny.js';\nexport var hartreeEnergyDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createHartreeEnergy\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHasNumericValue } from '../../factoriesAny.js';\nexport var hasNumericValueDependencies = {\n  isNumericDependencies,\n  typedDependencies,\n  createHasNumericValue\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { createHelpClass } from '../../factoriesAny.js';\nexport var HelpDependencies = {\n  parseDependencies,\n  createHelpClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { HelpDependencies } from './dependenciesHelpClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHelp } from '../../factoriesAny.js';\nexport var helpDependencies = {\n  HelpDependencies,\n  typedDependencies,\n  createHelp\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHex } from '../../factoriesAny.js';\nexport var hexDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createHex\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHypot } from '../../factoriesAny.js';\nexport var hypotDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  isPositiveDependencies,\n  multiplyScalarDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  createHypot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { fftDependencies } from './dependenciesFft.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIfft } from '../../factoriesAny.js';\nexport var ifftDependencies = {\n  conjDependencies,\n  dotDivideDependencies,\n  fftDependencies,\n  typedDependencies,\n  createIfft\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIndex } from '../../factoriesAny.js';\nexport var indexDependencies = {\n  IndexDependencies,\n  typedDependencies,\n  createIndex\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { createIndexTransform } from '../../factoriesAny.js';\nexport var indexTransformDependencies = {\n  IndexDependencies,\n  createIndexTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createInfinity } from '../../factoriesAny.js';\nexport var InfinityDependencies = {\n  BigNumberDependencies,\n  createInfinity\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIntersect } from '../../factoriesAny.js';\nexport var intersectDependencies = {\n  absDependencies,\n  addDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  flattenDependencies,\n  isNumericDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  multiplyScalarDependencies,\n  smallerDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createIntersect\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createInverseConductanceQuantum } from '../../factoriesAny.js';\nexport var inverseConductanceQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createInverseConductanceQuantum\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMod } from '../../factoriesAny.js';\nexport var modDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createMod\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createXgcd } from '../../factoriesAny.js';\nexport var xgcdDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createXgcd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { modDependencies } from './dependenciesMod.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { xgcdDependencies } from './dependenciesXgcd.generated.js';\nimport { createInvmod } from '../../factoriesAny.js';\nexport var invmodDependencies = {\n  BigNumberDependencies,\n  addDependencies,\n  equalDependencies,\n  isIntegerDependencies,\n  modDependencies,\n  smallerDependencies,\n  typedDependencies,\n  xgcdDependencies,\n  createInvmod\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNaN } from '../../factoriesAny.js';\nexport var isNaNDependencies = {\n  typedDependencies,\n  createIsNaN\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsPrime } from '../../factoriesAny.js';\nexport var isPrimeDependencies = {\n  typedDependencies,\n  createIsPrime\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog } from '../../factoriesAny.js';\nexport var logDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  typedDependencies,\n  createLog\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMap } from '../../factoriesAny.js';\nexport var mapDependencies = {\n  typedDependencies,\n  createMap\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSum } from '../../factoriesAny.js';\nexport var sumDependencies = {\n  addDependencies,\n  numericDependencies,\n  typedDependencies,\n  createSum\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { logDependencies } from './dependenciesLog.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sumDependencies } from './dependenciesSum.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createKldivergence } from '../../factoriesAny.js';\nexport var kldivergenceDependencies = {\n  divideDependencies,\n  dotDivideDependencies,\n  isNumericDependencies,\n  logDependencies,\n  mapDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  sumDependencies,\n  typedDependencies,\n  createKldivergence\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createKlitzing } from '../../factoriesAny.js';\nexport var klitzingDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createKlitzing\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createKron } from '../../factoriesAny.js';\nexport var kronDependencies = {\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createKron\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLN10 } from '../../factoriesAny.js';\nexport var LN10Dependencies = {\n  BigNumberDependencies,\n  createLN10\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLN2 } from '../../factoriesAny.js';\nexport var LN2Dependencies = {\n  BigNumberDependencies,\n  createLN2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLOG10E } from '../../factoriesAny.js';\nexport var LOG10EDependencies = {\n  BigNumberDependencies,\n  createLOG10E\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLOG2E } from '../../factoriesAny.js';\nexport var LOG2EDependencies = {\n  BigNumberDependencies,\n  createLOG2E\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLcm } from '../../factoriesAny.js';\nexport var lcmDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLcm\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLeafCount } from '../../factoriesAny.js';\nexport var leafCountDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createLeafCount\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createLeftShift } from '../../factoriesAny.js';\nexport var leftShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createLeftShift\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLgamma } from '../../factoriesAny.js';\nexport var lgammaDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLgamma\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog10 } from '../../factoriesAny.js';\nexport var log10Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLog10\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { logDependencies } from './dependenciesLog.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog1p } from '../../factoriesAny.js';\nexport var log1pDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  logDependencies,\n  typedDependencies,\n  createLog1p\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog2 } from '../../factoriesAny.js';\nexport var log2Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLog2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createLoschmidt } from '../../factoriesAny.js';\nexport var loschmidtDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createLoschmidt\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLsolve } from '../../factoriesAny.js';\nexport var lsolveDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createLsolve\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLsolveAll } from '../../factoriesAny.js';\nexport var lsolveAllDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createLsolveAll\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { FibonacciHeapDependencies } from './dependenciesFibonacciHeapClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { createSpaClass } from '../../factoriesAny.js';\nexport var SpaDependencies = {\n  FibonacciHeapDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  createSpaClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SpaDependencies } from './dependenciesSpaClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createLup } from '../../factoriesAny.js';\nexport var lupDependencies = {\n  DenseMatrixDependencies,\n  SpaDependencies,\n  SparseMatrixDependencies,\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  largerDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createLup\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSlu } from '../../factoriesAny.js';\nexport var sluDependencies = {\n  SparseMatrixDependencies,\n  absDependencies,\n  addDependencies,\n  divideScalarDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createSlu\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { lsolveDependencies } from './dependenciesLsolve.generated.js';\nimport { lupDependencies } from './dependenciesLup.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sluDependencies } from './dependenciesSlu.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { usolveDependencies } from './dependenciesUsolve.generated.js';\nimport { createLusolve } from '../../factoriesAny.js';\nexport var lusolveDependencies = {\n  DenseMatrixDependencies,\n  lsolveDependencies,\n  lupDependencies,\n  matrixDependencies,\n  sluDependencies,\n  typedDependencies,\n  usolveDependencies,\n  createLusolve\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { ctransposeDependencies } from './dependenciesCtranspose.generated.js';\nimport { eigsDependencies } from './dependenciesEigs.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNorm } from '../../factoriesAny.js';\nexport var normDependencies = {\n  absDependencies,\n  addDependencies,\n  conjDependencies,\n  ctransposeDependencies,\n  eigsDependencies,\n  equalScalarDependencies,\n  largerDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  powDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  createNorm\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { normDependencies } from './dependenciesNorm.generated.js';\nimport { qrDependencies } from './dependenciesQr.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSchur } from '../../factoriesAny.js';\nexport var schurDependencies = {\n  identityDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  normDependencies,\n  qrDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSchur\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { indexDependencies } from './dependenciesIndex.generated.js';\nimport { lusolveDependencies } from './dependenciesLusolve.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { matrixFromColumnsDependencies } from './dependenciesMatrixFromColumns.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { schurDependencies } from './dependenciesSchur.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSylvester } from '../../factoriesAny.js';\nexport var sylvesterDependencies = {\n  absDependencies,\n  addDependencies,\n  concatDependencies,\n  identityDependencies,\n  indexDependencies,\n  lusolveDependencies,\n  matrixDependencies,\n  matrixFromColumnsDependencies,\n  multiplyDependencies,\n  rangeDependencies,\n  schurDependencies,\n  subsetDependencies,\n  subtractDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createSylvester\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sylvesterDependencies } from './dependenciesSylvester.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLyap } from '../../factoriesAny.js';\nexport var lyapDependencies = {\n  matrixDependencies,\n  multiplyDependencies,\n  sylvesterDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createLyap\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPartitionSelect } from '../../factoriesAny.js';\nexport var partitionSelectDependencies = {\n  compareDependencies,\n  isNaNDependencies,\n  isNumericDependencies,\n  typedDependencies,\n  createPartitionSelect\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { partitionSelectDependencies } from './dependenciesPartitionSelect.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMedian } from '../../factoriesAny.js';\nexport var medianDependencies = {\n  addDependencies,\n  compareDependencies,\n  divideDependencies,\n  partitionSelectDependencies,\n  typedDependencies,\n  createMedian\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { medianDependencies } from './dependenciesMedian.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMad } from '../../factoriesAny.js';\nexport var madDependencies = {\n  absDependencies,\n  mapDependencies,\n  medianDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createMad\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMagneticConstant } from '../../factoriesAny.js';\nexport var magneticConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMagneticConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMagneticFluxQuantum } from '../../factoriesAny.js';\nexport var magneticFluxQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMagneticFluxQuantum\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMapTransform } from '../../factoriesAny.js';\nexport var mapTransformDependencies = {\n  typedDependencies,\n  createMapTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromFunction } from '../../factoriesAny.js';\nexport var matrixFromFunctionDependencies = {\n  isZeroDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createMatrixFromFunction\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromRows } from '../../factoriesAny.js';\nexport var matrixFromRowsDependencies = {\n  flattenDependencies,\n  matrixDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createMatrixFromRows\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMax } from '../../factoriesAny.js';\nexport var maxDependencies = {\n  largerDependencies,\n  numericDependencies,\n  typedDependencies,\n  createMax\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMaxTransform } from '../../factoriesAny.js';\nexport var maxTransformDependencies = {\n  largerDependencies,\n  numericDependencies,\n  typedDependencies,\n  createMaxTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMean } from '../../factoriesAny.js';\nexport var meanDependencies = {\n  addDependencies,\n  divideDependencies,\n  typedDependencies,\n  createMean\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMeanTransform } from '../../factoriesAny.js';\nexport var meanTransformDependencies = {\n  addDependencies,\n  divideDependencies,\n  typedDependencies,\n  createMeanTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMin } from '../../factoriesAny.js';\nexport var minDependencies = {\n  numericDependencies,\n  smallerDependencies,\n  typedDependencies,\n  createMin\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMinTransform } from '../../factoriesAny.js';\nexport var minTransformDependencies = {\n  numericDependencies,\n  smallerDependencies,\n  typedDependencies,\n  createMinTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMode } from '../../factoriesAny.js';\nexport var modeDependencies = {\n  isNaNDependencies,\n  isNumericDependencies,\n  typedDependencies,\n  createMode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarMass } from '../../factoriesAny.js';\nexport var molarMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarMassC12 } from '../../factoriesAny.js';\nexport var molarMassC12Dependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarMassC12\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarPlanckConstant } from '../../factoriesAny.js';\nexport var molarPlanckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarPlanckConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarVolume } from '../../factoriesAny.js';\nexport var molarVolumeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarVolume\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultinomial } from '../../factoriesAny.js';\nexport var multinomialDependencies = {\n  addDependencies,\n  divideDependencies,\n  factorialDependencies,\n  isIntegerDependencies,\n  isPositiveDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createMultinomial\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createNaN } from '../../factoriesAny.js';\nexport var NaNDependencies = {\n  BigNumberDependencies,\n  createNaN\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createNeutronMass } from '../../factoriesAny.js';\nexport var neutronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createNeutronMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNthRoot } from '../../factoriesAny.js';\nexport var nthRootDependencies = {\n  BigNumberDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createNthRoot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNthRoots } from '../../factoriesAny.js';\nexport var nthRootsDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  typedDependencies,\n  createNthRoots\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createNuclearMagneton } from '../../factoriesAny.js';\nexport var nuclearMagnetonDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createNuclearMagneton\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createNull } from '../../factoriesAny.js';\nexport var nullDependencies = {\n  createNull\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOct } from '../../factoriesAny.js';\nexport var octDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createOct\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOnes } from '../../factoriesAny.js';\nexport var onesDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createOnes\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOr } from '../../factoriesAny.js';\nexport var orDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createOr\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { evaluateDependencies } from './dependenciesEvaluate.generated.js';\nimport { createParserClass } from '../../factoriesAny.js';\nexport var ParserDependencies = {\n  evaluateDependencies,\n  createParserClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ParserDependencies } from './dependenciesParserClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createParser } from '../../factoriesAny.js';\nexport var parserDependencies = {\n  ParserDependencies,\n  typedDependencies,\n  createParser\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPermutations } from '../../factoriesAny.js';\nexport var permutationsDependencies = {\n  factorialDependencies,\n  typedDependencies,\n  createPermutations\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createPhi } from '../../factoriesAny.js';\nexport var phiDependencies = {\n  BigNumberDependencies,\n  createPhi\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createPi } from '../../factoriesAny.js';\nexport var piDependencies = {\n  BigNumberDependencies,\n  createPi\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPickRandom } from '../../factoriesAny.js';\nexport var pickRandomDependencies = {\n  typedDependencies,\n  createPickRandom\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { ctransposeDependencies } from './dependenciesCtranspose.generated.js';\nimport { deepEqualDependencies } from './dependenciesDeepEqual.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPinv } from '../../factoriesAny.js';\nexport var pinvDependencies = {\n  ComplexDependencies,\n  addDependencies,\n  ctransposeDependencies,\n  deepEqualDependencies,\n  divideScalarDependencies,\n  dotDependencies,\n  dotDivideDependencies,\n  equalDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createPinv\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckCharge } from '../../factoriesAny.js';\nexport var planckChargeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckCharge\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckConstant } from '../../factoriesAny.js';\nexport var planckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckLength } from '../../factoriesAny.js';\nexport var planckLengthDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckLength\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckMass } from '../../factoriesAny.js';\nexport var planckMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckTemperature } from '../../factoriesAny.js';\nexport var planckTemperatureDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckTemperature\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckTime } from '../../factoriesAny.js';\nexport var planckTimeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckTime\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTypeOf } from '../../factoriesAny.js';\nexport var typeOfDependencies = {\n  typedDependencies,\n  createTypeOf\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { cbrtDependencies } from './dependenciesCbrt.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { imDependencies } from './dependenciesIm.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { reDependencies } from './dependenciesRe.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typeOfDependencies } from './dependenciesTypeOf.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createPolynomialRoot } from '../../factoriesAny.js';\nexport var polynomialRootDependencies = {\n  addDependencies,\n  cbrtDependencies,\n  divideDependencies,\n  equalScalarDependencies,\n  imDependencies,\n  isZeroDependencies,\n  multiplyDependencies,\n  reDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typeOfDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createPolynomialRoot\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPrint } from '../../factoriesAny.js';\nexport var printDependencies = {\n  typedDependencies,\n  createPrint\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createProtonMass } from '../../factoriesAny.js';\nexport var protonMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createProtonMass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { partitionSelectDependencies } from './dependenciesPartitionSelect.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createQuantileSeq } from '../../factoriesAny.js';\nexport var quantileSeqDependencies = {\n  addDependencies,\n  compareDependencies,\n  multiplyDependencies,\n  partitionSelectDependencies,\n  typedDependencies,\n  createQuantileSeq\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createQuantumOfCirculation } from '../../factoriesAny.js';\nexport var quantumOfCirculationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createQuantumOfCirculation\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRandom } from '../../factoriesAny.js';\nexport var randomDependencies = {\n  typedDependencies,\n  createRandom\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRandomInt } from '../../factoriesAny.js';\nexport var randomIntDependencies = {\n  typedDependencies,\n  createRandomInt\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createRangeClass } from '../../factoriesAny.js';\nexport var RangeDependencies = {\n  createRangeClass\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { smallerEqDependencies } from './dependenciesSmallerEq.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRangeTransform } from '../../factoriesAny.js';\nexport var rangeTransformDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  smallerDependencies,\n  smallerEqDependencies,\n  typedDependencies,\n  createRangeTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { simplifyConstantDependencies } from './dependenciesSimplifyConstant.generated.js';\nimport { simplifyCoreDependencies } from './dependenciesSimplifyCore.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRationalize } from '../../factoriesAny.js';\nexport var rationalizeDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  simplifyDependencies,\n  simplifyConstantDependencies,\n  simplifyCoreDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createRationalize\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createReducedPlanckConstant } from '../../factoriesAny.js';\nexport var reducedPlanckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createReducedPlanckConstant\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createReplacer } from '../../factoriesAny.js';\nexport var replacerDependencies = {\n  createReplacer\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createReshape } from '../../factoriesAny.js';\nexport var reshapeDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createReshape\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { createResize } from '../../factoriesAny.js';\nexport var resizeDependencies = {\n  matrixDependencies,\n  createResize\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createReviver } from '../../factoriesAny.js';\nexport var reviverDependencies = {\n  createReviver\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRightArithShift } from '../../factoriesAny.js';\nexport var rightArithShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRightArithShift\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRightLogShift } from '../../factoriesAny.js';\nexport var rightLogShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRightLogShift\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { cosDependencies } from './dependenciesCos.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { normDependencies } from './dependenciesNorm.generated.js';\nimport { sinDependencies } from './dependenciesSin.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createRotationMatrix } from '../../factoriesAny.js';\nexport var rotationMatrixDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  addScalarDependencies,\n  cosDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  normDependencies,\n  sinDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createRotationMatrix\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { rotationMatrixDependencies } from './dependenciesRotationMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRotate } from '../../factoriesAny.js';\nexport var rotateDependencies = {\n  multiplyDependencies,\n  rotationMatrixDependencies,\n  typedDependencies,\n  createRotate\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRow } from '../../factoriesAny.js';\nexport var rowDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createRow\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRowTransform } from '../../factoriesAny.js';\nexport var rowTransformDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createRowTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createRydberg } from '../../factoriesAny.js';\nexport var rydbergDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createRydberg\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSQRT1_2 } from '../../factoriesAny.js'; // eslint-disable-line camelcase\n\nexport var SQRT1_2Dependencies = {\n  // eslint-disable-line camelcase\n  BigNumberDependencies,\n  createSQRT1_2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSQRT2 } from '../../factoriesAny.js';\nexport var SQRT2Dependencies = {\n  BigNumberDependencies,\n  createSQRT2\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSackurTetrode } from '../../factoriesAny.js';\nexport var sackurTetrodeDependencies = {\n  BigNumberDependencies,\n  createSackurTetrode\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSec } from '../../factoriesAny.js';\nexport var secDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createSec\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSech } from '../../factoriesAny.js';\nexport var sechDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createSech\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createSecondRadiation } from '../../factoriesAny.js';\nexport var secondRadiationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createSecondRadiation\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetCartesian } from '../../factoriesAny.js';\nexport var setCartesianDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetCartesian\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetDifference } from '../../factoriesAny.js';\nexport var setDifferenceDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetDifference\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetDistinct } from '../../factoriesAny.js';\nexport var setDistinctDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetDistinct\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetIntersect } from '../../factoriesAny.js';\nexport var setIntersectDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetIntersect\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetIsSubset } from '../../factoriesAny.js';\nexport var setIsSubsetDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetIsSubset\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetMultiplicity } from '../../factoriesAny.js';\nexport var setMultiplicityDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetMultiplicity\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetPowerset } from '../../factoriesAny.js';\nexport var setPowersetDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetPowerset\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetSize } from '../../factoriesAny.js';\nexport var setSizeDependencies = {\n  compareNaturalDependencies,\n  typedDependencies,\n  createSetSize\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { setDifferenceDependencies } from './dependenciesSetDifference.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetSymDifference } from '../../factoriesAny.js';\nexport var setSymDifferenceDependencies = {\n  IndexDependencies,\n  concatDependencies,\n  setDifferenceDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetSymDifference\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { setIntersectDependencies } from './dependenciesSetIntersect.generated.js';\nimport { setSymDifferenceDependencies } from './dependenciesSetSymDifference.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetUnion } from '../../factoriesAny.js';\nexport var setUnionDependencies = {\n  IndexDependencies,\n  concatDependencies,\n  setIntersectDependencies,\n  setSymDifferenceDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetUnion\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSinh } from '../../factoriesAny.js';\nexport var sinhDependencies = {\n  typedDependencies,\n  createSinh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSort } from '../../factoriesAny.js';\nexport var sortDependencies = {\n  compareDependencies,\n  compareNaturalDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSort\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSparse } from '../../factoriesAny.js';\nexport var sparseDependencies = {\n  SparseMatrixDependencies,\n  typedDependencies,\n  createSparse\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createSpeedOfLight } from '../../factoriesAny.js';\nexport var speedOfLightDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createSpeedOfLight\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSplitUnit } from '../../factoriesAny.js';\nexport var splitUnitDependencies = {\n  typedDependencies,\n  createSplitUnit\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { maxDependencies } from './dependenciesMax.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqrtm } from '../../factoriesAny.js';\nexport var sqrtmDependencies = {\n  absDependencies,\n  addDependencies,\n  identityDependencies,\n  invDependencies,\n  mapDependencies,\n  maxDependencies,\n  multiplyDependencies,\n  sizeDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSqrtm\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSquare } from '../../factoriesAny.js';\nexport var squareDependencies = {\n  typedDependencies,\n  createSquare\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqueeze } from '../../factoriesAny.js';\nexport var squeezeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSqueeze\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { applyDependencies } from './dependenciesApply.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createVariance } from '../../factoriesAny.js';\nexport var varianceDependencies = {\n  addDependencies,\n  applyDependencies,\n  divideDependencies,\n  isNaNDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createVariance\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { varianceDependencies } from './dependenciesVariance.generated.js';\nimport { createStd } from '../../factoriesAny.js';\nexport var stdDependencies = {\n  mapDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  varianceDependencies,\n  createStd\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { varianceDependencies } from './dependenciesVariance.generated.js';\nimport { createStdTransform } from '../../factoriesAny.js';\nexport var stdTransformDependencies = {\n  mapDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  varianceDependencies,\n  createStdTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createStefanBoltzmann } from '../../factoriesAny.js';\nexport var stefanBoltzmannDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createStefanBoltzmann\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createString } from '../../factoriesAny.js';\nexport var stringDependencies = {\n  typedDependencies,\n  createString\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSubsetTransform } from '../../factoriesAny.js';\nexport var subsetTransformDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSubsetTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSumTransform } from '../../factoriesAny.js';\nexport var sumTransformDependencies = {\n  addDependencies,\n  numericDependencies,\n  typedDependencies,\n  createSumTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSymbolicEqual } from '../../factoriesAny.js';\nexport var symbolicEqualDependencies = {\n  OperatorNodeDependencies,\n  parseDependencies,\n  simplifyDependencies,\n  typedDependencies,\n  createSymbolicEqual\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTan } from '../../factoriesAny.js';\nexport var tanDependencies = {\n  typedDependencies,\n  createTan\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTanh } from '../../factoriesAny.js';\nexport var tanhDependencies = {\n  typedDependencies,\n  createTanh\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createThomsonCrossSection } from '../../factoriesAny.js';\nexport var thomsonCrossSectionDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createThomsonCrossSection\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTo } from '../../factoriesAny.js';\nexport var toDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createTo\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTrace } from '../../factoriesAny.js';\nexport var traceDependencies = {\n  addDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createTrace\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createTrue } from '../../factoriesAny.js';\nexport var trueDependencies = {\n  createTrue\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnequal } from '../../factoriesAny.js';\nexport var unequalDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createUnequal\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnitFunction } from '../../factoriesAny.js';\nexport var unitDependencies = {\n  UnitDependencies,\n  typedDependencies,\n  createUnitFunction\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { eDependencies } from './dependenciesE.generated.js';\nimport { createUppercaseE } from '../../factoriesAny.js';\nexport var EDependencies = {\n  eDependencies,\n  createUppercaseE\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { piDependencies } from './dependenciesPi.generated.js';\nimport { createUppercasePi } from '../../factoriesAny.js';\nexport var PIDependencies = {\n  piDependencies,\n  createUppercasePi\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createVacuumImpedance } from '../../factoriesAny.js';\nexport var vacuumImpedanceDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createVacuumImpedance\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { applyDependencies } from './dependenciesApply.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createVarianceTransform } from '../../factoriesAny.js';\nexport var varianceTransformDependencies = {\n  addDependencies,\n  applyDependencies,\n  divideDependencies,\n  isNaNDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createVarianceTransform\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createVersion } from '../../factoriesAny.js';\nexport var versionDependencies = {\n  createVersion\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createWeakMixingAngle } from '../../factoriesAny.js';\nexport var weakMixingAngleDependencies = {\n  BigNumberDependencies,\n  createWeakMixingAngle\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createWienDisplacement } from '../../factoriesAny.js';\nexport var wienDisplacementDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createWienDisplacement\n};", "/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createXor } from '../../factoriesAny.js';\nexport var xorDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createXor\n};", "// creating all factories here in a separate file is needed to get tree-shaking working\nimport * as allFactories from '../factoriesAny.js';\nexport var all = allFactories;"],
  "mappings": "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,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAC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",
  "names": ["cosh", "sinh", "hypot", "parse", "Complex", "i", "abs", "arg", "re", "im", "Fraction", "gcd", "i", "parse", "e", "config", "BigNumber", "name", "dependencies", "Complex", "im", "re", "arg", "phi", "name", "dependencies", "Fraction", "name", "dependencies", "Matrix", "index", "size", "name", "dependencies", "Matrix", "DenseMatrix", "index", "i", "size", "matrix", "min", "max", "range", "recurse", "row", "_loop", "format", "_value", "name", "dependencies", "typed", "BigNumber", "Fraction", "name", "dependencies", "typed", "BigNumber", "Fraction", "name", "dependencies", "typed", "BigNumber", "Fraction", "name", "dependencies", "typed", "BigNumber", "Complex", "Fraction", "name", "dependencies", "typed", "BigNumber", "Fraction", "Complex", "Unit", "name", "dependencies", "typed", "equalScalar", "Matrix", "SparseMatrix", "matrix", "i", "row", "index", "size", "min", "max", "range", "format", "invoke", "_value", "name", "dependencies", "typed", "BigNumber", "number", "string", "size", "Fraction", "_null", "name", "dependencies", "typed", "Complex", "number", "re", "im", "Fraction", "string", "_null", "Object", "name", "dependencies", "typed", "Fraction", "number", "string", "_null", "BigNumber", "Object", "name", "dependencies", "typed", "Matrix", "DenseMatrix", "SparseMatrix", "string", "format", "Array", "name", "dependencies", "typed", "matrix", "isZero", "size", "format", "index", "name", "dependencies", "typed", "matrix", "flatten", "size", "Array", "Matrix", "row", "name", "dependencies", "typed", "matrix", "flatten", "size", "Array", "Matrix", "i", "name", "dependencies", "typed", "unit", "name", "dependencies", "typed", "name", "dependencies", "typed", "config", "BigNumber", "Complex", "Fraction", "Unit", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "config", "typed", "isNegative", "unaryMinus", "matrix", "Complex", "BigNumber", "Fraction", "abs", "all", "name", "dependencies", "typed", "Complex", "BigNumber", "Fraction", "Unit", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "i", "name", "dependencies", "typed", "equalScalar", "i", "name", "dependencies", "typed", "DenseMatrix", "i", "name", "dependencies", "typed", "matrix", "equalScalar", "BigNumber", "DenseMatrix", "i", "name", "dependencies", "typed", "equalScalar", "i", "name", "dependencies", "typed", "equalScalar", "i", "name", "dependencies", "typed", "matrix", "equalScalar", "i", "prod", "name", "dependencies", "typed", "config", "number", "Complex", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "matrix", "equalScalar", "DenseMatrix", "name", "dependencies", "typed", "name", "dependencies", "typed", "matrix", "addScalar", "multiplyScalar", "equalScalar", "dot", "sum", "i", "row", "name", "dependencies", "typed", "matrix", "equalScalar", "inv", "name", "dependencies", "typed", "complex", "Complex", "BigNumber", "Fraction", "name", "dependencies", "config", "typed", "Complex", "BigNumber", "Unit", "name", "dependencies", "typed", "Complex", "BigNumber", "Fraction", "Unit", "name", "dependencies", "typed", "matrix", "equalScalar", "addScalar", "unaryMinus", "DenseMatrix", "name", "dependencies", "typed", "config", "matrix", "BigNumber", "name", "dependencies", "typed", "config", "BigNumber", "xgcd", "equal", "smaller", "mod", "add", "isInteger", "invmod", "gcd", "inv", "name", "dependencies", "typed", "equalScalar", "i", "name", "dependencies", "typed", "matrix", "equalScalar", "multiplyScalar", "BigNumber", "i", "name", "dependencies", "typed", "matrix", "equalScalar", "name", "dependencies", "typed", "name", "dependencies", "typed", "matrix", "equalScalar", "DenseMatrix", "name", "dependencies", "typed", "matrix", "DenseMatrix", "name", "dependencies", "typed", "number", "BigNumber", "Complex", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "matrix", "equalScalar", "DenseMatrix", "name", "dependencies", "typed", "matrix", "DenseMatrix", "name", "dependencies", "typed", "matrix", "isInteger", "i", "arg", "size", "string", "name", "dependencies", "typed", "Index", "matrix", "range", "column", "index", "name", "dependencies", "typed", "size", "prod", "string", "name", "dependencies", "typed", "matrix", "subtract", "multiply", "name", "dependencies", "typed", "matrix", "DenseMatrix", "SparseMatrix", "Array", "format", "Matrix", "size", "i", "name", "dependencies", "typed", "matrix", "Array", "Matrix", "name", "dependencies", "typed", "Array", "Matrix", "name", "dependencies", "typed", "config", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix", "string", "format", "Array", "size", "Matrix", "name", "dependencies", "typed", "matrix", "multiplyScalar", "a", "b", "name", "dependencies", "typed", "matrix", "subtract", "number", "size", "i", "name", "dependencies", "typed", "config", "matrix", "BigNumber", "size", "format", "Matrix", "index", "name", "dependencies", "typed", "isInteger", "size", "name", "dependencies", "config", "matrix", "resize", "size", "format", "i", "name", "dependencies", "typed", "multiply", "rotationMatrix", "name", "dependencies", "typed", "config", "multiplyScalar", "addScalar", "unaryMinus", "norm", "BigNumber", "matrix", "DenseMatrix", "SparseMatrix", "cos", "sin", "string", "format", "size", "name", "dependencies", "typed", "Index", "matrix", "range", "row", "index", "name", "dependencies", "typed", "matrix", "Array", "Matrix", "name", "dependencies", "typed", "matrix", "index", "subset", "range", "i", "name", "dependencies", "typed", "matrix", "size", "format", "i", "index", "sum", "name", "dependencies", "typed", "transpose", "conj", "name", "dependencies", "typed", "config", "matrix", "BigNumber", "size", "format", "Matrix", "index", "name", "dependencies", "typed", "matrix", "addScalar", "multiplyScalar", "divideScalar", "exp", "tau", "Matrix", "size", "i", "arr", "_", "name", "dependencies", "typed", "fft", "dotDivide", "conj", "size", "name", "dependencies", "typed", "format", "name", "dependencies", "typed", "format", "name", "dependencies", "typed", "format", "name", "dependencies", "typed", "matrix", "unit", "name", "dependencies", "typed", "numeric", "name", "dependencies", "typed", "config", "identity", "multiply", "matrix", "inv", "number", "fraction", "Complex", "name", "dependencies", "typed", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix", "Complex", "Fraction", "name", "dependencies", "typed", "config", "divideScalar", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "divideScalar", "log", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "divideScalar", "Complex", "arg", "abs", "name", "dependencies", "typed", "equalScalar", "matrix", "pow", "DenseMatrix", "name", "dependencies", "typed", "matrix", "equalScalar", "divideScalar", "DenseMatrix", "DenseMatrix", "format", "i", "index", "name", "dependencies", "typed", "matrix", "divideScalar", "multiplyScalar", "subtract", "equalScalar", "DenseMatrix", "i", "index", "name", "dependencies", "typed", "matrix", "divideScalar", "multiplyScalar", "subtract", "equalScalar", "DenseMatrix", "i", "index", "name", "dependencies", "typed", "matrix", "divideScalar", "multiplyScalar", "subtract", "equalScalar", "DenseMatrix", "e", "i", "index", "name", "dependencies", "typed", "matrix", "divideScalar", "multiplyScalar", "subtract", "equalScalar", "DenseMatrix", "e", "i", "index", "name", "dependencies", "typed", "equalScalar", "i", "typed", "matrix", "name", "dependencies", "typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "name", "dependencies", "typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "name", "dependencies", "typed", "matrix", "equalScalar", "zeros", "DenseMatrix", "name", "dependencies", "typed", "matrix", "equalScalar", "zeros", "not", "name", "dependencies", "typed", "matrix", "compare", "compareNatural", "Array", "Matrix", "_comparator", "name", "dependencies", "smaller", "DenseMatrix", "ImmutableDenseMatrix", "matrix", "index", "name", "dependencies", "ImmutableDenseMatrix", "Index", "i", "arg", "size", "index", "range", "name", "dependencies", "smaller", "larger", "FibonacciHeap", "_linkNodes", "size", "arraySize", "i", "name", "dependencies", "addScalar", "equalScalar", "FibonacciHeap", "Spa", "i", "to", "i", "name", "dependencies", "config", "addScalar", "subtract", "multiplyScalar", "divideScalar", "pow", "abs", "fix", "round", "equal", "isNumeric", "format", "number", "Complex", "Unit", "u", "index", "c", "unit", "key", "diff", "pi", "BigNumber", "Fraction", "name", "dependencies", "typed", "Unit", "string", "unit", "name", "dependencies", "typed", "SparseMatrix", "string", "name", "dependencies", "typed", "Unit", "Object", "string", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "name", "dependencies", "typed", "Complex", "BigNumber", "name", "dependencies", "typed", "number", "Complex", "BigNumber", "name", "dependencies", "typed", "matrix", "equalScalar", "BigNumber", "DenseMatrix", "name", "dependencies", "typed", "config", "Complex", "number", "BigNumber", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "DenseMatrix", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "DenseMatrix", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "DenseMatrix", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "DenseMatrix", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "e", "count", "i", "name", "dependencies", "typed", "size", "subset", "compareNatural", "Index", "number", "i", "name", "dependencies", "typed", "compareNatural", "count", "i", "name", "dependencies", "typed", "size", "concat", "subset", "setDifference", "Index", "name", "dependencies", "typed", "size", "concat", "subset", "setIntersect", "setSymDifference", "Index", "name", "dependencies", "typed", "matrix", "addScalar", "equalScalar", "DenseMatrix", "SparseMatrix", "i", "name", "dependencies", "typed", "abs", "add", "pow", "conj", "sqrt", "multiply", "equalScalar", "larger", "smaller", "matrix", "ctranspose", "eigs", "Complex", "BigNumber", "boolean", "Array", "Matrix", "index", "i", "name", "dependencies", "typed", "addScalar", "multiplyScalar", "conj", "size", "add", "i", "name", "dependencies", "typed", "matrix", "add", "size", "format", "sum", "i", "index", "name", "dependencies", "typed", "Index", "arg", "name", "dependencies", "typed", "matrix", "abs", "addScalar", "divideScalar", "multiplyScalar", "subtract", "larger", "equalScalar", "unaryMinus", "DenseMatrix", "SparseMatrix", "Spa", "Array", "i", "min", "pi", "index", "swapIndeces", "_loop", "k", "name", "dependencies", "typed", "matrix", "zeros", "identity", "isZero", "equal", "sign", "sqrt", "conj", "unaryMinus", "addScalar", "divideScalar", "multiplyScalar", "subtract", "complex", "DenseMatrix", "SparseMatrix", "Array", "i", "tau", "pinv", "i", "i", "i", "name", "dependencies", "add", "multiply", "transpose", "i", "e", "i", "name", "dependencies", "transpose", "i", "name", "dependencies", "add", "multiply", "transpose", "qr", "pinv", "i", "i", "pinv", "index", "size", "i", "pinv", "i", "name", "dependencies", "divideScalar", "multiply", "subtract", "pinv", "i", "name", "dependencies", "abs", "divideScalar", "multiply", "subtract", "larger", "largerEq", "SparseMatrix", "size", "pinv", "i", "name", "dependencies", "typed", "abs", "add", "multiply", "transpose", "divideScalar", "subtract", "larger", "largerEq", "SparseMatrix", "name", "dependencies", "typed", "matrix", "lup", "slu", "usolve", "lsolve", "DenseMatrix", "name", "dependencies", "typed", "isZero", "equalScalar", "add", "subtract", "multiply", "divide", "sqrt", "unaryMinus", "cbrt", "typeOf", "im", "re", "name", "dependencies", "typed", "matrix", "subtract", "multiply", "divideScalar", "isZero", "unaryMinus", "det", "size", "format", "i", "name", "dependencies", "typed", "matrix", "divideScalar", "addScalar", "multiply", "unaryMinus", "det", "identity", "abs", "size", "format", "name", "dependencies", "typed", "matrix", "inv", "deepEqual", "equal", "dotDivide", "dot", "ctranspose", "divideScalar", "multiply", "add", "Complex", "size", "format", "i", "_", "addScalar", "subtract", "flatten", "multiply", "multiplyScalar", "divideScalar", "sqrt", "abs", "bignumber", "diag", "inv", "qr", "usolve", "usolveAll", "equal", "complex", "larger", "smaller", "matrixFromColumns", "dot", "i", "max", "_loop", "_i4", "λ", "norm", "config", "addScalar", "subtract", "abs", "atan", "cos", "sin", "multiplyScalar", "inv", "bignumber", "multiply", "add", "diag", "i", "size", "name", "dependencies", "config", "typed", "matrix", "addScalar", "subtract", "equal", "abs", "atan", "cos", "sin", "multiplyScalar", "divideScalar", "inv", "bignumber", "multiply", "add", "larger", "column", "flatten", "number", "complex", "sqrt", "diag", "qr", "usolve", "usolveAll", "im", "re", "smaller", "matrixFromColumns", "dot", "Array", "Matrix", "size", "format", "i", "name", "dependencies", "typed", "abs", "add", "identity", "inv", "multiply", "Matrix", "size", "format", "i", "name", "dependencies", "typed", "abs", "add", "multiply", "map", "sqrt", "subtract", "inv", "size", "max", "identity", "format", "name", "dependencies", "typed", "schur", "matrixFromColumns", "matrix", "multiply", "range", "concat", "transpose", "index", "subset", "add", "subtract", "identity", "lusolve", "abs", "all", "name", "dependencies", "typed", "matrix", "identity", "multiply", "qr", "norm", "subtract", "Array", "Matrix", "name", "dependencies", "typed", "matrix", "sylvester", "multiply", "transpose", "name", "dependencies", "typed", "matrix", "multiply", "equalScalar", "divideScalar", "inv", "name", "dependencies", "typed", "addScalar", "subtract", "multiplyScalar", "divideScalar", "unaryMinus", "sqrt", "abs", "Array", "i", "diff", "name", "dependencies", "typed", "config", "abs", "add", "addScalar", "matrix", "multiply", "multiplyScalar", "divideScalar", "subtract", "smaller", "equalScalar", "flatten", "isZero", "isNumeric", "det", "e", "i", "add2", "name", "dependencies", "typed", "BigNumber", "i", "name", "dependencies", "typed", "config", "multiplyScalar", "pow", "Complex", "i", "BigNumber", "prod", "sum", "name", "dependencies", "Complex", "typed", "BigNumber", "i", "name", "dependencies", "typed", "matrix", "divide", "sum", "multiply", "map", "dotDivide", "log", "isNumeric", "name", "dependencies", "parse", "typed", "count", "Node", "name", "dependencies", "parse", "simplify", "typed", "OperatorNode", "diff", "name", "dependencies", "config", "Unit", "BigNumber", "unit", "name", "dependencies", "typed", "Index", "matrix", "range", "column", "name", "dependencies", "Index", "i", "arg", "name", "dependencies", "typed", "Index", "matrix", "range", "row", "name", "dependencies", "typed", "matrix", "subset", "name", "dependencies", "typed", "matrix", "isInteger", "concat", "name", "dependencies", "typed", "matrix", "subtract", "number", "bignumber", "diff", "Complex", "Fraction", "clone", "cosh", "format", "isInteger", "typeOf", "isNaN", "tanh", "reshape", "squeeze", "bitXor", "flatten", "resize", "log1p", "clone", "cosh", "format", "isInteger", "typeOf", "isNaN", "tanh", "reshape", "squeeze", "bitXor", "flatten", "resize", "log1p", "Complex", "Fraction"]
}
