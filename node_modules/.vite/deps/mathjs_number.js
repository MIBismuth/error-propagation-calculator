import {
  ArgumentsError,
  DimensionError,
  IndexError,
  _extends,
  absNumber,
  acosNumber,
  acoshNumber,
  acotNumber,
  acothNumber,
  acscNumber,
  acschNumber,
  addNumber,
  andNumber,
  asecNumber,
  asechNumber,
  asinNumber,
  asinhNumber,
  atan2Number,
  atanNumber,
  atanhNumber,
  bitAndNumber,
  bitNotNumber,
  bitOrNumber,
  bitXorNumber,
  cbrtNumber,
  combinationsNumber,
  config,
  cosNumber,
  coshNumber,
  cotNumber,
  cothNumber,
  create,
  createAccessorNode,
  createApply,
  createApplyTransform,
  createArrayNode,
  createAssignmentNode,
  createBellNumbers,
  createBlockNode,
  createBoolean,
  createCatalan,
  createCeilNumber,
  createChain,
  createChainClass,
  createClone,
  createCombinationsWithRep,
  createCompareNatural,
  createCompareNumber,
  createCompareTextNumber,
  createCompile,
  createComposition,
  createConditionalNode,
  createConstantNode,
  createCumSum,
  createCumSumTransform,
  createDeepEqual,
  createDerivative,
  createE,
  createEqualNumber,
  createEqualScalarNumber,
  createEqualText,
  createErf,
  createEvaluate,
  createFactorial,
  createFalse,
  createFilter,
  createFilterTransform,
  createFixNumber,
  createFloorNumber,
  createForEach,
  createForEachTransform,
  createFormat,
  createFunctionAssignmentNode,
  createFunctionNode,
  createHasNumericValue,
  createHelp,
  createHelpClass,
  createHypot,
  createIndexNode,
  createInfinity,
  createIsNumeric,
  createIsPrime,
  createLN10,
  createLN2,
  createLOG10E,
  createLOG2E,
  createLargerEqNumber,
  createLargerNumber,
  createMad,
  createMap,
  createMapTransform,
  createMax,
  createMaxTransform,
  createMean,
  createMeanTransform,
  createMedian,
  createMin,
  createMinTransform,
  createMode,
  createMultinomial,
  createNaN,
  createNode,
  createNull,
  createNumber,
  createNumeric,
  createObjectNode,
  createOperatorNode,
  createParenthesisNode,
  createParse,
  createParser,
  createParserClass,
  createPartitionSelect,
  createPermutations,
  createPhi,
  createPi,
  createPickRandom,
  createPrint,
  createProd,
  createQuantileSeq,
  createRandomInt,
  createRandomNumber,
  createRange,
  createRangeClass,
  createRangeNode,
  createRangeTransform,
  createRationalize,
  createRelationalNode,
  createReplacer,
  createResolve,
  createResultSet,
  createReviver,
  createSQRT1_2,
  createSQRT2,
  createSimplify,
  createSimplifyConstant,
  createSimplifyCore,
  createSize,
  createSmallerEqNumber,
  createSmallerNumber,
  createStd,
  createStdTransform,
  createStirlingS2,
  createString,
  createSum,
  createSumTransform,
  createSymbolNode,
  createTau,
  createTrue,
  createTypeOf,
  createTyped,
  createUnequalNumber,
  createUppercaseE,
  createUppercasePi,
  createVariance,
  createVarianceTransform,
  createVersion,
  cscNumber,
  cschNumber,
  cubeNumber,
  divideNumber,
  embeddedDocs,
  expNumber,
  expm1Number,
  factory,
  gammaNumber,
  gcdNumber,
  isAccessorNode,
  isArray,
  isArrayNode,
  isAssignmentNode,
  isBigNumber,
  isBlockNode,
  isBoolean,
  isChain,
  isCollection,
  isComplex,
  isConditionalNode,
  isConstantNode,
  isDate,
  isDenseMatrix,
  isFraction,
  isFunction,
  isFunctionAssignmentNode,
  isFunctionNode,
  isHelp,
  isIndex,
  isIndexNode,
  isIntegerNumber,
  isMatrix,
  isNaNNumber,
  isNegativeNumber,
  isNode,
  isNull,
  isNumber,
  isObject,
  isObjectNode,
  isOperatorNode,
  isParenthesisNode,
  isPositiveNumber,
  isRange,
  isRangeNode,
  isRegExp,
  isRelationalNode,
  isResultSet,
  isSparseMatrix,
  isString,
  isSymbolNode,
  isUndefined,
  isUnit,
  isZeroNumber,
  lcmNumber,
  leftShiftNumber,
  lgammaNumber,
  log10Number,
  log1pNumber,
  log2Number,
  logNumber,
  modNumber,
  multiplyNumber,
  noIndex,
  noMatrix,
  noSubset,
  normNumber,
  notNumber,
  nthRootNumber,
  orNumber,
  powNumber,
  rightArithShiftNumber,
  rightLogShiftNumber,
  roundNumber,
  secNumber,
  sechNumber,
  signNumber,
  sinNumber,
  sinhNumber,
  sqrtNumber,
  squareNumber,
  subtractNumber,
  tanNumber,
  tanhNumber,
  unaryMinusNumber,
  unaryPlusNumber,
  xgcdNumber,
  xorNumber
} from "./chunk-R542DLEU.js";
import {
  __export
} from "./chunk-4EOJPDL2.js";

// node_modules/mathjs/lib/esm/factoriesNumber.js
var factoriesNumber_exports = {};
__export(factoriesNumber_exports, {
  createAbs: () => createAbs,
  createAccessorNode: () => createAccessorNode,
  createAcos: () => createAcos,
  createAcosh: () => createAcosh,
  createAcot: () => createAcot,
  createAcoth: () => createAcoth,
  createAcsc: () => createAcsc,
  createAcsch: () => createAcsch,
  createAdd: () => createAdd,
  createAddScalar: () => createAddScalar,
  createAnd: () => createAnd,
  createApply: () => createApply,
  createApplyTransform: () => createApplyTransform,
  createArrayNode: () => createArrayNode,
  createAsec: () => createAsec,
  createAsech: () => createAsech,
  createAsin: () => createAsin,
  createAsinh: () => createAsinh,
  createAssignmentNode: () => createAssignmentNode,
  createAtan: () => createAtan,
  createAtan2: () => createAtan2,
  createAtanh: () => createAtanh,
  createBellNumbers: () => createBellNumbers,
  createBitAnd: () => createBitAnd,
  createBitNot: () => createBitNot,
  createBitOr: () => createBitOr,
  createBitXor: () => createBitXor,
  createBlockNode: () => createBlockNode,
  createBoolean: () => createBoolean,
  createCatalan: () => createCatalan,
  createCbrt: () => createCbrt,
  createCeil: () => createCeilNumber,
  createChain: () => createChain,
  createChainClass: () => createChainClass,
  createClone: () => createClone,
  createCombinations: () => createCombinations,
  createCombinationsWithRep: () => createCombinationsWithRep,
  createCompare: () => createCompareNumber,
  createCompareNatural: () => createCompareNatural,
  createCompareText: () => createCompareTextNumber,
  createCompile: () => createCompile,
  createComposition: () => createComposition,
  createConditionalNode: () => createConditionalNode,
  createConstantNode: () => createConstantNode,
  createCos: () => createCos,
  createCosh: () => createCosh,
  createCot: () => createCot,
  createCoth: () => createCoth,
  createCsc: () => createCsc,
  createCsch: () => createCsch,
  createCube: () => createCube,
  createCumSum: () => createCumSum,
  createCumSumTransform: () => createCumSumTransform,
  createDeepEqual: () => createDeepEqual,
  createDerivative: () => createDerivative,
  createDivide: () => createDivide,
  createDivideScalar: () => createDivideScalar,
  createE: () => createE,
  createEqual: () => createEqualNumber,
  createEqualScalar: () => createEqualScalarNumber,
  createEqualText: () => createEqualText,
  createErf: () => createErf,
  createEvaluate: () => createEvaluate,
  createExp: () => createExp,
  createExpm1: () => createExpm1,
  createFactorial: () => createFactorial,
  createFalse: () => createFalse,
  createFilter: () => createFilter,
  createFilterTransform: () => createFilterTransform,
  createFix: () => createFixNumber,
  createFloor: () => createFloorNumber,
  createForEach: () => createForEach,
  createForEachTransform: () => createForEachTransform,
  createFormat: () => createFormat,
  createFunctionAssignmentNode: () => createFunctionAssignmentNode,
  createFunctionNode: () => createFunctionNode,
  createGamma: () => createGamma,
  createGcd: () => createGcd,
  createHasNumericValue: () => createHasNumericValue,
  createHelp: () => createHelp,
  createHelpClass: () => createHelpClass,
  createHypot: () => createHypot,
  createIndex: () => createIndex,
  createIndexNode: () => createIndexNode,
  createInfinity: () => createInfinity,
  createIsInteger: () => createIsInteger,
  createIsNaN: () => createIsNaN,
  createIsNegative: () => createIsNegative,
  createIsNumeric: () => createIsNumeric,
  createIsPositive: () => createIsPositive,
  createIsPrime: () => createIsPrime,
  createIsZero: () => createIsZero,
  createLN10: () => createLN10,
  createLN2: () => createLN2,
  createLOG10E: () => createLOG10E,
  createLOG2E: () => createLOG2E,
  createLarger: () => createLargerNumber,
  createLargerEq: () => createLargerEqNumber,
  createLcm: () => createLcm,
  createLeftShift: () => createLeftShift,
  createLgamma: () => createLgamma,
  createLog: () => createLog,
  createLog10: () => createLog10,
  createLog1p: () => createLog1p,
  createLog2: () => createLog2,
  createMad: () => createMad,
  createMap: () => createMap,
  createMapTransform: () => createMapTransform,
  createMatrix: () => createMatrix,
  createMax: () => createMax,
  createMaxTransform: () => createMaxTransform,
  createMean: () => createMean,
  createMeanTransform: () => createMeanTransform,
  createMedian: () => createMedian,
  createMin: () => createMin,
  createMinTransform: () => createMinTransform,
  createMod: () => createMod,
  createMode: () => createMode,
  createMultinomial: () => createMultinomial,
  createMultiply: () => createMultiply,
  createMultiplyScalar: () => createMultiplyScalar,
  createNaN: () => createNaN,
  createNode: () => createNode,
  createNorm: () => createNorm,
  createNot: () => createNot,
  createNthRoot: () => createNthRoot,
  createNull: () => createNull,
  createNumber: () => createNumber,
  createNumeric: () => createNumeric,
  createObjectNode: () => createObjectNode,
  createOperatorNode: () => createOperatorNode,
  createOr: () => createOr,
  createParenthesisNode: () => createParenthesisNode,
  createParse: () => createParse,
  createParser: () => createParser,
  createParserClass: () => createParserClass,
  createPartitionSelect: () => createPartitionSelect,
  createPermutations: () => createPermutations,
  createPhi: () => createPhi,
  createPi: () => createPi,
  createPickRandom: () => createPickRandom,
  createPow: () => createPow,
  createPrint: () => createPrint,
  createProd: () => createProd,
  createQuantileSeq: () => createQuantileSeq,
  createRandom: () => createRandomNumber,
  createRandomInt: () => createRandomInt,
  createRange: () => createRange,
  createRangeClass: () => createRangeClass,
  createRangeNode: () => createRangeNode,
  createRangeTransform: () => createRangeTransform,
  createRationalize: () => createRationalize,
  createRelationalNode: () => createRelationalNode,
  createReplacer: () => createReplacer,
  createResolve: () => createResolve,
  createResultSet: () => createResultSet,
  createReviver: () => createReviver,
  createRightArithShift: () => createRightArithShift,
  createRightLogShift: () => createRightLogShift,
  createRound: () => createRound,
  createSQRT1_2: () => createSQRT1_2,
  createSQRT2: () => createSQRT2,
  createSec: () => createSec,
  createSech: () => createSech,
  createSign: () => createSign,
  createSimplify: () => createSimplify,
  createSimplifyConstant: () => createSimplifyConstant,
  createSimplifyCore: () => createSimplifyCore,
  createSin: () => createSin,
  createSinh: () => createSinh,
  createSize: () => createSize,
  createSmaller: () => createSmallerNumber,
  createSmallerEq: () => createSmallerEqNumber,
  createSqrt: () => createSqrt,
  createSquare: () => createSquare,
  createStd: () => createStd,
  createStdTransform: () => createStdTransform,
  createStirlingS2: () => createStirlingS2,
  createString: () => createString,
  createSubset: () => createSubset,
  createSubsetTransform: () => createSubsetTransform,
  createSubtract: () => createSubtract,
  createSum: () => createSum,
  createSumTransform: () => createSumTransform,
  createSymbolNode: () => createSymbolNode,
  createTan: () => createTan,
  createTanh: () => createTanh,
  createTau: () => createTau,
  createTrue: () => createTrue,
  createTypeOf: () => createTypeOf,
  createTyped: () => createTyped,
  createUnaryMinus: () => createUnaryMinus,
  createUnaryPlus: () => createUnaryPlus,
  createUnequal: () => createUnequalNumber,
  createUppercaseE: () => createUppercaseE,
  createUppercasePi: () => createUppercasePi,
  createVariance: () => createVariance,
  createVarianceTransform: () => createVarianceTransform,
  createVersion: () => createVersion,
  createXgcd: () => createXgcd,
  createXor: () => createXor
});
var createUnaryMinus = createNumberFactory("unaryMinus", unaryMinusNumber);
var createUnaryPlus = createNumberFactory("unaryPlus", unaryPlusNumber);
var createAbs = createNumberFactory("abs", absNumber);
var createAddScalar = createNumberFactory("addScalar", addNumber);
var createCbrt = createNumberFactory("cbrt", cbrtNumber);
var createCube = createNumberFactory("cube", cubeNumber);
var createExp = createNumberFactory("exp", expNumber);
var createExpm1 = createNumberFactory("expm1", expm1Number);
var createGcd = createNumberFactory("gcd", gcdNumber);
var createLcm = createNumberFactory("lcm", lcmNumber);
var createLog10 = createNumberFactory("log10", log10Number);
var createLog2 = createNumberFactory("log2", log2Number);
var createMod = createNumberFactory("mod", modNumber);
var createMultiplyScalar = createNumberFactory("multiplyScalar", multiplyNumber);
var createMultiply = createNumberFactory("multiply", multiplyNumber);
var createNthRoot = createNumberOptionalSecondArgFactory("nthRoot", nthRootNumber);
var createSign = createNumberFactory("sign", signNumber);
var createSqrt = createNumberFactory("sqrt", sqrtNumber);
var createSquare = createNumberFactory("square", squareNumber);
var createSubtract = createNumberFactory("subtract", subtractNumber);
var createXgcd = createNumberFactory("xgcd", xgcdNumber);
var createDivideScalar = createNumberFactory("divideScalar", divideNumber);
var createPow = createNumberFactory("pow", powNumber);
var createRound = createNumberOptionalSecondArgFactory("round", roundNumber);
var createLog = createNumberOptionalSecondArgFactory("log", logNumber);
var createLog1p = createNumberFactory("log1p", log1pNumber);
var createAdd = createNumberFactory("add", addNumber);
var createNorm = createNumberFactory("norm", normNumber);
var createDivide = createNumberFactory("divide", divideNumber);
var createBitAnd = createNumberFactory("bitAnd", bitAndNumber);
var createBitNot = createNumberFactory("bitNot", bitNotNumber);
var createBitOr = createNumberFactory("bitOr", bitOrNumber);
var createBitXor = createNumberFactory("bitXor", bitXorNumber);
var createLeftShift = createNumberFactory("leftShift", leftShiftNumber);
var createRightArithShift = createNumberFactory("rightArithShift", rightArithShiftNumber);
var createRightLogShift = createNumberFactory("rightLogShift", rightLogShiftNumber);
var createAnd = createNumberFactory("and", andNumber);
var createNot = createNumberFactory("not", notNumber);
var createOr = createNumberFactory("or", orNumber);
var createXor = createNumberFactory("xor", xorNumber);
var createIndex = factory("index", [], () => noIndex);
var createMatrix = factory("matrix", [], () => noMatrix);
var createSubset = factory("subset", [], () => noSubset);
var createCombinations = createNumberFactory("combinations", combinationsNumber);
var createGamma = createNumberFactory("gamma", gammaNumber);
var createLgamma = createNumberFactory("lgamma", lgammaNumber);
var createAcos = createNumberFactory("acos", acosNumber);
var createAcosh = createNumberFactory("acosh", acoshNumber);
var createAcot = createNumberFactory("acot", acotNumber);
var createAcoth = createNumberFactory("acoth", acothNumber);
var createAcsc = createNumberFactory("acsc", acscNumber);
var createAcsch = createNumberFactory("acsch", acschNumber);
var createAsec = createNumberFactory("asec", asecNumber);
var createAsech = createNumberFactory("asech", asechNumber);
var createAsin = createNumberFactory("asin", asinNumber);
var createAsinh = createNumberFactory("asinh", asinhNumber);
var createAtan = createNumberFactory("atan", atanNumber);
var createAtan2 = createNumberFactory("atan2", atan2Number);
var createAtanh = createNumberFactory("atanh", atanhNumber);
var createCos = createNumberFactory("cos", cosNumber);
var createCosh = createNumberFactory("cosh", coshNumber);
var createCot = createNumberFactory("cot", cotNumber);
var createCoth = createNumberFactory("coth", cothNumber);
var createCsc = createNumberFactory("csc", cscNumber);
var createCsch = createNumberFactory("csch", cschNumber);
var createSec = createNumberFactory("sec", secNumber);
var createSech = createNumberFactory("sech", sechNumber);
var createSin = createNumberFactory("sin", sinNumber);
var createSinh = createNumberFactory("sinh", sinhNumber);
var createTan = createNumberFactory("tan", tanNumber);
var createTanh = createNumberFactory("tanh", tanhNumber);
var createSubsetTransform = factory("subset", [], () => noSubset, {
  isTransformFunction: true
});
var createIsInteger = createNumberFactory("isInteger", isIntegerNumber);
var createIsNegative = createNumberFactory("isNegative", isNegativeNumber);
var createIsPositive = createNumberFactory("isPositive", isPositiveNumber);
var createIsZero = createNumberFactory("isZero", isZeroNumber);
var createIsNaN = createNumberFactory("isNaN", isNaNNumber);
function createNumberFactory(name, fn) {
  return factory(name, ["typed"], (_ref) => {
    var {
      typed: typed2
    } = _ref;
    return typed2(fn);
  });
}
function createNumberOptionalSecondArgFactory(name, fn) {
  return factory(name, ["typed"], (_ref2) => {
    var {
      typed: typed2
    } = _ref2;
    return typed2({
      number: fn,
      "number,number": fn
    });
  });
}

// node_modules/mathjs/lib/esm/entry/pureFunctionsNumber.generated.js
var e = createE({
  config
});
var _false = createFalse({});
var index = createIndex({});
var _Infinity = createInfinity({
  config
});
var LN10 = createLN10({
  config
});
var LOG10E = createLOG10E({
  config
});
var matrix = createMatrix({});
var _NaN = createNaN({
  config
});
var _null = createNull({});
var phi = createPhi({
  config
});
var Range = createRangeClass({});
var replacer = createReplacer({});
var ResultSet = createResultSet({});
var SQRT1_2 = createSQRT1_2({
  config
});
var subset = createSubset({});
var tau = createTau({
  config
});
var typed = createTyped({});
var unaryPlus = createUnaryPlus({
  typed
});
var version = createVersion({});
var xor = createXor({
  typed
});
var abs = createAbs({
  typed
});
var acos = createAcos({
  typed
});
var acot = createAcot({
  typed
});
var acsc = createAcsc({
  typed
});
var add = createAdd({
  typed
});
var and = createAnd({
  typed
});
var asec = createAsec({
  typed
});
var asin = createAsin({
  typed
});
var atan = createAtan({
  typed
});
var atanh = createAtanh({
  typed
});
var bitAnd = createBitAnd({
  typed
});
var bitOr = createBitOr({
  typed
});
var boolean = createBoolean({
  typed
});
var cbrt = createCbrt({
  typed
});
var combinations = createCombinations({
  typed
});
var compare = createCompareNumber({
  config,
  typed
});
var compareText = createCompareTextNumber({
  typed
});
var cos = createCos({
  typed
});
var cot = createCot({
  typed
});
var csc = createCsc({
  typed
});
var cube = createCube({
  typed
});
var divide = createDivide({
  typed
});
var equalScalar = createEqualScalarNumber({
  config,
  typed
});
var erf = createErf({
  typed
});
var exp = createExp({
  typed
});
var filter = createFilter({
  typed
});
var forEach = createForEach({
  typed
});
var format = createFormat({
  typed
});
var gamma = createGamma({
  typed
});
var isInteger = createIsInteger({
  typed
});
var isNegative = createIsNegative({
  typed
});
var isPositive = createIsPositive({
  typed
});
var isZero = createIsZero({
  typed
});
var LOG2E = createLOG2E({
  config
});
var largerEq = createLargerEqNumber({
  config,
  typed
});
var leftShift = createLeftShift({
  typed
});
var log = createLog({
  typed
});
var log1p = createLog1p({
  typed
});
var map = createMap({
  typed
});
var mean = createMean({
  add,
  divide,
  typed
});
var mod = createMod({
  typed
});
var multiply = createMultiply({
  typed
});
var not = createNot({
  typed
});
var number = createNumber({
  typed
});
var or = createOr({
  typed
});
var pi = createPi({
  config
});
var pow = createPow({
  typed
});
var random = createRandomNumber({
  config,
  typed
});
var rightLogShift = createRightLogShift({
  typed
});
var SQRT2 = createSQRT2({
  config
});
var sech = createSech({
  typed
});
var sin = createSin({
  typed
});
var size = createSize({
  matrix,
  config,
  typed
});
var smallerEq = createSmallerEqNumber({
  config,
  typed
});
var square = createSquare({
  typed
});
var string = createString({
  typed
});
var subtract = createSubtract({
  typed
});
var tanh = createTanh({
  typed
});
var typeOf = createTypeOf({
  typed
});
var unequal = createUnequalNumber({
  equalScalar,
  typed
});
var xgcd = createXgcd({
  typed
});
var acoth = createAcoth({
  typed
});
var addScalar = createAddScalar({
  typed
});
var asech = createAsech({
  typed
});
var bitNot = createBitNot({
  typed
});
var combinationsWithRep = createCombinationsWithRep({
  typed
});
var cosh = createCosh({
  typed
});
var csch = createCsch({
  typed
});
var divideScalar = createDivideScalar({
  typed
});
var equalText = createEqualText({
  compareText,
  isZero,
  typed
});
var expm1 = createExpm1({
  typed
});
var isNumeric = createIsNumeric({
  typed
});
var LN2 = createLN2({
  config
});
var lcm = createLcm({
  typed
});
var log10 = createLog10({
  typed
});
var multiplyScalar = createMultiplyScalar({
  typed
});
var nthRoot = createNthRoot({
  typed
});
var pickRandom = createPickRandom({
  config,
  typed
});
var randomInt = createRandomInt({
  config,
  typed
});
var rightArithShift = createRightArithShift({
  typed
});
var sec = createSec({
  typed
});
var sinh = createSinh({
  typed
});
var sqrt = createSqrt({
  typed
});
var tan = createTan({
  typed
});
var unaryMinus = createUnaryMinus({
  typed
});
var acosh = createAcosh({
  typed
});
var apply = createApply({
  isInteger,
  typed
});
var asinh = createAsinh({
  typed
});
var bitXor = createBitXor({
  typed
});
var clone = createClone({
  typed
});
var cumsum = createCumSum({
  add,
  typed,
  unaryPlus
});
var equal = createEqualNumber({
  equalScalar,
  typed
});
var factorial = createFactorial({
  gamma,
  typed
});
var hasNumericValue = createHasNumericValue({
  isNumeric,
  typed
});
var isNaN = createIsNaN({
  typed
});
var larger = createLargerNumber({
  config,
  typed
});
var log2 = createLog2({
  typed
});
var mode = createMode({
  isNaN,
  isNumeric,
  typed
});
var norm = createNorm({
  typed
});
var partitionSelect = createPartitionSelect({
  compare,
  isNaN,
  isNumeric,
  typed
});
var print = createPrint({
  typed
});
var quantileSeq = createQuantileSeq({
  add,
  compare,
  multiply,
  partitionSelect,
  typed
});
var round = createRound({
  typed
});
var smaller = createSmallerNumber({
  config,
  typed
});
var stirlingS2 = createStirlingS2({
  addScalar,
  combinations,
  divideScalar,
  factorial,
  isInteger,
  isNegative,
  larger,
  multiplyScalar,
  number,
  pow,
  subtract,
  typed
});
var _true = createTrue({});
var variance = createVariance({
  add,
  apply,
  divide,
  isNaN,
  multiply,
  subtract,
  typed
});
var acsch = createAcsch({
  typed
});
var atan2 = createAtan2({
  typed
});
var catalan = createCatalan({
  addScalar,
  combinations,
  divideScalar,
  isInteger,
  isNegative,
  multiplyScalar,
  typed
});
var compareNatural = createCompareNatural({
  compare,
  typed
});
var composition = createComposition({
  addScalar,
  combinations,
  isInteger,
  isNegative,
  isPositive,
  larger,
  typed
});
var deepEqual = createDeepEqual({
  equal,
  typed
});
var floor = createFloorNumber({
  config,
  round,
  typed
});
var hypot = createHypot({
  abs,
  addScalar,
  divideScalar,
  isPositive,
  multiplyScalar,
  smaller,
  sqrt,
  typed
});
var lgamma = createLgamma({
  typed
});
var median = createMedian({
  add,
  compare,
  divide,
  partitionSelect,
  typed
});
var multinomial = createMultinomial({
  add,
  divide,
  factorial,
  isInteger,
  isPositive,
  multiply,
  typed
});
var permutations = createPermutations({
  factorial,
  typed
});
var range = createRange({
  matrix,
  config,
  larger,
  largerEq,
  smaller,
  smallerEq,
  typed
});
var sign = createSign({
  typed
});
var std = createStd({
  map,
  sqrt,
  typed,
  variance
});
var ceil = createCeilNumber({
  config,
  round,
  typed
});
var coth = createCoth({
  typed
});
var fix = createFixNumber({
  ceil,
  floor,
  typed
});
var isPrime = createIsPrime({
  typed
});
var numeric = createNumeric({
  number
});
var prod = createProd({
  config,
  multiplyScalar,
  numeric,
  typed
});
var bellNumbers = createBellNumbers({
  addScalar,
  isInteger,
  isNegative,
  stirlingS2,
  typed
});
var gcd = createGcd({
  typed
});
var mad = createMad({
  abs,
  map,
  median,
  subtract,
  typed
});
var sum = createSum({
  add,
  config,
  numeric,
  typed
});
var max = createMax({
  config,
  larger,
  numeric,
  typed
});
var min = createMin({
  config,
  numeric,
  smaller,
  typed
});

// node_modules/mathjs/lib/esm/entry/impureFunctionsNumber.generated.js
var math = {};
var mathWithTransform = {};
var classes = {};
var Chain = createChainClass({
  math,
  typed
});
var Node = createNode({
  mathWithTransform
});
var ObjectNode = createObjectNode({
  Node
});
var RangeNode = createRangeNode({
  Node
});
var RelationalNode = createRelationalNode({
  Node
});
var reviver = createReviver({
  classes
});
var SymbolNode = createSymbolNode({
  Node,
  math
});
var AccessorNode = createAccessorNode({
  Node,
  subset
});
var AssignmentNode = createAssignmentNode({
  matrix,
  Node,
  subset
});
var BlockNode = createBlockNode({
  Node,
  ResultSet
});
var chain = createChain({
  Chain,
  typed
});
var ConditionalNode = createConditionalNode({
  Node
});
var FunctionNode = createFunctionNode({
  Node,
  SymbolNode,
  math
});
var IndexNode = createIndexNode({
  Node,
  size
});
var OperatorNode = createOperatorNode({
  Node
});
var ConstantNode = createConstantNode({
  Node
});
var FunctionAssignmentNode = createFunctionAssignmentNode({
  Node,
  typed
});
var ParenthesisNode = createParenthesisNode({
  Node
});
var ArrayNode = createArrayNode({
  Node
});
var parse = createParse({
  AccessorNode,
  ArrayNode,
  AssignmentNode,
  BlockNode,
  ConditionalNode,
  ConstantNode,
  FunctionAssignmentNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  RangeNode,
  RelationalNode,
  SymbolNode,
  config,
  numeric,
  typed
});
var resolve = createResolve({
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  parse,
  typed
});
var simplifyConstant = createSimplifyConstant({
  AccessorNode,
  ArrayNode,
  ConstantNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  SymbolNode,
  config,
  mathWithTransform,
  matrix,
  parse,
  typed
});
var compile = createCompile({
  parse,
  typed
});
var evaluate = createEvaluate({
  parse,
  typed
});
var Help = createHelpClass({
  parse
});
var Parser = createParserClass({
  evaluate
});
var simplifyCore = createSimplifyCore({
  AccessorNode,
  ArrayNode,
  ConstantNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add,
  divide,
  equal,
  isZero,
  multiply,
  parse,
  pow,
  subtract,
  typed
});
var help = createHelp({
  Help,
  mathWithTransform,
  typed
});
var parser = createParser({
  Parser,
  typed
});
var simplify = createSimplify({
  AccessorNode,
  ArrayNode,
  ConstantNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add,
  config,
  divide,
  equal,
  isZero,
  mathWithTransform,
  matrix,
  multiply,
  parse,
  pow,
  resolve,
  simplifyConstant,
  simplifyCore,
  subtract,
  typed
});
var derivative = createDerivative({
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  config,
  equal,
  isZero,
  numeric,
  parse,
  simplify,
  typed
});
var rationalize = createRationalize({
  AccessorNode,
  ArrayNode,
  ConstantNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add,
  config,
  divide,
  equal,
  isZero,
  mathWithTransform,
  matrix,
  multiply,
  parse,
  pow,
  simplify,
  simplifyConstant,
  simplifyCore,
  subtract,
  typed
});
_extends(math, {
  e,
  false: _false,
  index,
  Infinity: _Infinity,
  LN10,
  LOG10E,
  matrix,
  NaN: _NaN,
  null: _null,
  phi,
  replacer,
  SQRT1_2,
  subset,
  tau,
  typed,
  unaryPlus,
  "E": e,
  version,
  xor,
  abs,
  acos,
  acot,
  acsc,
  add,
  and,
  asec,
  asin,
  atan,
  atanh,
  bitAnd,
  bitOr,
  boolean,
  cbrt,
  combinations,
  compare,
  compareText,
  cos,
  cot,
  csc,
  cube,
  divide,
  equalScalar,
  erf,
  exp,
  filter,
  forEach,
  format,
  gamma,
  isInteger,
  isNegative,
  isPositive,
  isZero,
  LOG2E,
  largerEq,
  leftShift,
  log,
  log1p,
  map,
  mean,
  mod,
  multiply,
  not,
  number,
  or,
  pi,
  pow,
  random,
  reviver,
  rightLogShift,
  SQRT2,
  sech,
  sin,
  size,
  smallerEq,
  square,
  string,
  subtract,
  tanh,
  typeOf,
  unequal,
  xgcd,
  acoth,
  addScalar,
  asech,
  bitNot,
  chain,
  combinationsWithRep,
  cosh,
  csch,
  divideScalar,
  equalText,
  expm1,
  isNumeric,
  LN2,
  lcm,
  log10,
  multiplyScalar,
  nthRoot,
  pickRandom,
  randomInt,
  rightArithShift,
  sec,
  sinh,
  sqrt,
  tan,
  unaryMinus,
  acosh,
  apply,
  asinh,
  bitXor,
  clone,
  cumsum,
  equal,
  factorial,
  hasNumericValue,
  isNaN,
  larger,
  log2,
  mode,
  norm,
  partitionSelect,
  print,
  quantileSeq,
  round,
  smaller,
  stirlingS2,
  true: _true,
  variance,
  acsch,
  atan2,
  catalan,
  compareNatural,
  composition,
  deepEqual,
  floor,
  hypot,
  lgamma,
  median,
  multinomial,
  permutations,
  range,
  sign,
  std,
  "PI": pi,
  ceil,
  coth,
  fix,
  isPrime,
  numeric,
  prod,
  bellNumbers,
  gcd,
  mad,
  sum,
  max,
  parse,
  resolve,
  simplifyConstant,
  compile,
  evaluate,
  simplifyCore,
  help,
  parser,
  simplify,
  derivative,
  rationalize,
  min,
  config
});
_extends(mathWithTransform, math, {
  cumsum: createCumSumTransform({
    add,
    typed,
    unaryPlus
  }),
  apply: createApplyTransform({
    isInteger,
    typed
  }),
  filter: createFilterTransform({
    typed
  }),
  forEach: createForEachTransform({
    typed
  }),
  map: createMapTransform({
    typed
  }),
  mean: createMeanTransform({
    add,
    divide,
    typed
  }),
  subset: createSubsetTransform({}),
  std: createStdTransform({
    map,
    sqrt,
    typed,
    variance
  }),
  sum: createSumTransform({
    add,
    config,
    numeric,
    typed
  }),
  max: createMaxTransform({
    config,
    larger,
    numeric,
    typed
  }),
  min: createMinTransform({
    config,
    numeric,
    smaller,
    typed
  }),
  range: createRangeTransform({
    matrix,
    config,
    larger,
    largerEq,
    smaller,
    smallerEq,
    typed
  }),
  variance: createVarianceTransform({
    add,
    apply,
    divide,
    isNaN,
    multiply,
    subtract,
    typed
  })
});
_extends(classes, {
  Range,
  ResultSet,
  Chain,
  Node,
  ObjectNode,
  RangeNode,
  RelationalNode,
  SymbolNode,
  AccessorNode,
  AssignmentNode,
  BlockNode,
  ConditionalNode,
  FunctionNode,
  IndexNode,
  OperatorNode,
  ConstantNode,
  FunctionAssignmentNode,
  ParenthesisNode,
  ArrayNode,
  Help,
  Parser
});
Chain.createProxy(math);

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTyped.generated.js
var typedDependencies = {
  createTyped
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAbs.generated.js
var absDependencies = {
  typedDependencies,
  createAbs
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNode.generated.js
var NodeDependencies = {
  createNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSubset.generated.js
var subsetDependencies = {
  createSubset
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAccessorNode.generated.js
var AccessorNodeDependencies = {
  NodeDependencies,
  subsetDependencies,
  createAccessorNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcos.generated.js
var acosDependencies = {
  typedDependencies,
  createAcos
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcosh.generated.js
var acoshDependencies = {
  typedDependencies,
  createAcosh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcot.generated.js
var acotDependencies = {
  typedDependencies,
  createAcot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcoth.generated.js
var acothDependencies = {
  typedDependencies,
  createAcoth
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcsc.generated.js
var acscDependencies = {
  typedDependencies,
  createAcsc
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAcsch.generated.js
var acschDependencies = {
  typedDependencies,
  createAcsch
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAdd.generated.js
var addDependencies = {
  typedDependencies,
  createAdd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAddScalar.generated.js
var addScalarDependencies = {
  typedDependencies,
  createAddScalar
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAnd.generated.js
var andDependencies = {
  typedDependencies,
  createAnd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsInteger.generated.js
var isIntegerDependencies = {
  typedDependencies,
  createIsInteger
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesApply.generated.js
var applyDependencies = {
  isIntegerDependencies,
  typedDependencies,
  createApply
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesApplyTransform.generated.js
var applyTransformDependencies = {
  isIntegerDependencies,
  typedDependencies,
  createApplyTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesArrayNode.generated.js
var ArrayNodeDependencies = {
  NodeDependencies,
  createArrayNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAsec.generated.js
var asecDependencies = {
  typedDependencies,
  createAsec
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAsech.generated.js
var asechDependencies = {
  typedDependencies,
  createAsech
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAsin.generated.js
var asinDependencies = {
  typedDependencies,
  createAsin
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAsinh.generated.js
var asinhDependencies = {
  typedDependencies,
  createAsinh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMatrix.generated.js
var matrixDependencies = {
  createMatrix
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAssignmentNode.generated.js
var AssignmentNodeDependencies = {
  matrixDependencies,
  NodeDependencies,
  subsetDependencies,
  createAssignmentNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAtan.generated.js
var atanDependencies = {
  typedDependencies,
  createAtan
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAtan2.generated.js
var atan2Dependencies = {
  typedDependencies,
  createAtan2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesAtanh.generated.js
var atanhDependencies = {
  typedDependencies,
  createAtanh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsNegative.generated.js
var isNegativeDependencies = {
  typedDependencies,
  createIsNegative
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCombinations.generated.js
var combinationsDependencies = {
  typedDependencies,
  createCombinations
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesDivideScalar.generated.js
var divideScalarDependencies = {
  typedDependencies,
  createDivideScalar
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesGamma.generated.js
var gammaDependencies = {
  typedDependencies,
  createGamma
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFactorial.generated.js
var factorialDependencies = {
  gammaDependencies,
  typedDependencies,
  createFactorial
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLarger.generated.js
var largerDependencies = {
  typedDependencies,
  createLarger: createLargerNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMultiplyScalar.generated.js
var multiplyScalarDependencies = {
  typedDependencies,
  createMultiplyScalar
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNumber.generated.js
var numberDependencies = {
  typedDependencies,
  createNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPow.generated.js
var powDependencies = {
  typedDependencies,
  createPow
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSubtract.generated.js
var subtractDependencies = {
  typedDependencies,
  createSubtract
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesStirlingS2.generated.js
var stirlingS2Dependencies = {
  addScalarDependencies,
  combinationsDependencies,
  divideScalarDependencies,
  factorialDependencies,
  isIntegerDependencies,
  isNegativeDependencies,
  largerDependencies,
  multiplyScalarDependencies,
  numberDependencies,
  powDependencies,
  subtractDependencies,
  typedDependencies,
  createStirlingS2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBellNumbers.generated.js
var bellNumbersDependencies = {
  addScalarDependencies,
  isIntegerDependencies,
  isNegativeDependencies,
  stirlingS2Dependencies,
  typedDependencies,
  createBellNumbers
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBitAnd.generated.js
var bitAndDependencies = {
  typedDependencies,
  createBitAnd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBitNot.generated.js
var bitNotDependencies = {
  typedDependencies,
  createBitNot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBitOr.generated.js
var bitOrDependencies = {
  typedDependencies,
  createBitOr
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBitXor.generated.js
var bitXorDependencies = {
  typedDependencies,
  createBitXor
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesResultSet.generated.js
var ResultSetDependencies = {
  createResultSet
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBlockNode.generated.js
var BlockNodeDependencies = {
  NodeDependencies,
  ResultSetDependencies,
  createBlockNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesBoolean.generated.js
var booleanDependencies = {
  typedDependencies,
  createBoolean
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCatalan.generated.js
var catalanDependencies = {
  addScalarDependencies,
  combinationsDependencies,
  divideScalarDependencies,
  isIntegerDependencies,
  isNegativeDependencies,
  multiplyScalarDependencies,
  typedDependencies,
  createCatalan
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCbrt.generated.js
var cbrtDependencies = {
  typedDependencies,
  createCbrt
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRound.generated.js
var roundDependencies = {
  typedDependencies,
  createRound
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCeil.generated.js
var ceilDependencies = {
  roundDependencies,
  typedDependencies,
  createCeil: createCeilNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesChainClass.generated.js
var ChainDependencies = {
  typedDependencies,
  createChainClass
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesChain.generated.js
var chainDependencies = {
  ChainDependencies,
  typedDependencies,
  createChain
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesClone.generated.js
var cloneDependencies = {
  typedDependencies,
  createClone
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCombinationsWithRep.generated.js
var combinationsWithRepDependencies = {
  typedDependencies,
  createCombinationsWithRep
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCompare.generated.js
var compareDependencies = {
  typedDependencies,
  createCompare: createCompareNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCompareNatural.generated.js
var compareNaturalDependencies = {
  compareDependencies,
  typedDependencies,
  createCompareNatural
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCompareText.generated.js
var compareTextDependencies = {
  typedDependencies,
  createCompareText: createCompareTextNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesConditionalNode.generated.js
var ConditionalNodeDependencies = {
  NodeDependencies,
  createConditionalNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesConstantNode.generated.js
var ConstantNodeDependencies = {
  NodeDependencies,
  createConstantNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFunctionAssignmentNode.generated.js
var FunctionAssignmentNodeDependencies = {
  NodeDependencies,
  typedDependencies,
  createFunctionAssignmentNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSymbolNode.generated.js
var SymbolNodeDependencies = {
  NodeDependencies,
  createSymbolNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFunctionNode.generated.js
var FunctionNodeDependencies = {
  NodeDependencies,
  SymbolNodeDependencies,
  createFunctionNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSize.generated.js
var sizeDependencies = {
  matrixDependencies,
  typedDependencies,
  createSize
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIndexNode.generated.js
var IndexNodeDependencies = {
  NodeDependencies,
  sizeDependencies,
  createIndexNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesObjectNode.generated.js
var ObjectNodeDependencies = {
  NodeDependencies,
  createObjectNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesOperatorNode.generated.js
var OperatorNodeDependencies = {
  NodeDependencies,
  createOperatorNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesParenthesisNode.generated.js
var ParenthesisNodeDependencies = {
  NodeDependencies,
  createParenthesisNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRangeNode.generated.js
var RangeNodeDependencies = {
  NodeDependencies,
  createRangeNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRelationalNode.generated.js
var RelationalNodeDependencies = {
  NodeDependencies,
  createRelationalNode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNumeric.generated.js
var numericDependencies = {
  numberDependencies,
  createNumeric
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesParse.generated.js
var parseDependencies = {
  AccessorNodeDependencies,
  ArrayNodeDependencies,
  AssignmentNodeDependencies,
  BlockNodeDependencies,
  ConditionalNodeDependencies,
  ConstantNodeDependencies,
  FunctionAssignmentNodeDependencies,
  FunctionNodeDependencies,
  IndexNodeDependencies,
  ObjectNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  RangeNodeDependencies,
  RelationalNodeDependencies,
  SymbolNodeDependencies,
  numericDependencies,
  typedDependencies,
  createParse
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCompile.generated.js
var compileDependencies = {
  parseDependencies,
  typedDependencies,
  createCompile
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsPositive.generated.js
var isPositiveDependencies = {
  typedDependencies,
  createIsPositive
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesComposition.generated.js
var compositionDependencies = {
  addScalarDependencies,
  combinationsDependencies,
  isIntegerDependencies,
  isNegativeDependencies,
  isPositiveDependencies,
  largerDependencies,
  typedDependencies,
  createComposition
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCos.generated.js
var cosDependencies = {
  typedDependencies,
  createCos
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCosh.generated.js
var coshDependencies = {
  typedDependencies,
  createCosh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCot.generated.js
var cotDependencies = {
  typedDependencies,
  createCot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCoth.generated.js
var cothDependencies = {
  typedDependencies,
  createCoth
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCsc.generated.js
var cscDependencies = {
  typedDependencies,
  createCsc
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCsch.generated.js
var cschDependencies = {
  typedDependencies,
  createCsch
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCube.generated.js
var cubeDependencies = {
  typedDependencies,
  createCube
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesUnaryPlus.generated.js
var unaryPlusDependencies = {
  typedDependencies,
  createUnaryPlus
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCumSum.generated.js
var cumsumDependencies = {
  addDependencies,
  typedDependencies,
  unaryPlusDependencies,
  createCumSum
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesCumSumTransform.generated.js
var cumsumTransformDependencies = {
  addDependencies,
  typedDependencies,
  unaryPlusDependencies,
  createCumSumTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesEqualScalar.generated.js
var equalScalarDependencies = {
  typedDependencies,
  createEqualScalar: createEqualScalarNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesEqual.generated.js
var equalDependencies = {
  equalScalarDependencies,
  typedDependencies,
  createEqual: createEqualNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesDeepEqual.generated.js
var deepEqualDependencies = {
  equalDependencies,
  typedDependencies,
  createDeepEqual
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsZero.generated.js
var isZeroDependencies = {
  typedDependencies,
  createIsZero
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesDivide.generated.js
var divideDependencies = {
  typedDependencies,
  createDivide
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMultiply.generated.js
var multiplyDependencies = {
  typedDependencies,
  createMultiply
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesResolve.generated.js
var resolveDependencies = {
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  parseDependencies,
  typedDependencies,
  createResolve
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSimplifyConstant.generated.js
var simplifyConstantDependencies = {
  AccessorNodeDependencies,
  ArrayNodeDependencies,
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  IndexNodeDependencies,
  ObjectNodeDependencies,
  OperatorNodeDependencies,
  SymbolNodeDependencies,
  matrixDependencies,
  parseDependencies,
  typedDependencies,
  createSimplifyConstant
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSimplifyCore.generated.js
var simplifyCoreDependencies = {
  AccessorNodeDependencies,
  ArrayNodeDependencies,
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  IndexNodeDependencies,
  ObjectNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  SymbolNodeDependencies,
  addDependencies,
  divideDependencies,
  equalDependencies,
  isZeroDependencies,
  multiplyDependencies,
  parseDependencies,
  powDependencies,
  subtractDependencies,
  typedDependencies,
  createSimplifyCore
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSimplify.generated.js
var simplifyDependencies = {
  AccessorNodeDependencies,
  ArrayNodeDependencies,
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  IndexNodeDependencies,
  ObjectNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  SymbolNodeDependencies,
  addDependencies,
  divideDependencies,
  equalDependencies,
  isZeroDependencies,
  matrixDependencies,
  multiplyDependencies,
  parseDependencies,
  powDependencies,
  resolveDependencies,
  simplifyConstantDependencies,
  simplifyCoreDependencies,
  subtractDependencies,
  typedDependencies,
  createSimplify
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesDerivative.generated.js
var derivativeDependencies = {
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  SymbolNodeDependencies,
  equalDependencies,
  isZeroDependencies,
  numericDependencies,
  parseDependencies,
  simplifyDependencies,
  typedDependencies,
  createDerivative
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesE.generated.js
var eDependencies = {
  createE
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesEqualText.generated.js
var equalTextDependencies = {
  compareTextDependencies,
  isZeroDependencies,
  typedDependencies,
  createEqualText
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesErf.generated.js
var erfDependencies = {
  typedDependencies,
  createErf
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesEvaluate.generated.js
var evaluateDependencies = {
  parseDependencies,
  typedDependencies,
  createEvaluate
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesExp.generated.js
var expDependencies = {
  typedDependencies,
  createExp
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesExpm1.generated.js
var expm1Dependencies = {
  typedDependencies,
  createExpm1
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFalse.generated.js
var falseDependencies = {
  createFalse
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFilter.generated.js
var filterDependencies = {
  typedDependencies,
  createFilter
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFilterTransform.generated.js
var filterTransformDependencies = {
  typedDependencies,
  createFilterTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFloor.generated.js
var floorDependencies = {
  roundDependencies,
  typedDependencies,
  createFloor: createFloorNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFix.generated.js
var fixDependencies = {
  ceilDependencies,
  floorDependencies,
  typedDependencies,
  createFix: createFixNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesForEach.generated.js
var forEachDependencies = {
  typedDependencies,
  createForEach
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesForEachTransform.generated.js
var forEachTransformDependencies = {
  typedDependencies,
  createForEachTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesFormat.generated.js
var formatDependencies = {
  typedDependencies,
  createFormat
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesGcd.generated.js
var gcdDependencies = {
  typedDependencies,
  createGcd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsNumeric.generated.js
var isNumericDependencies = {
  typedDependencies,
  createIsNumeric
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesHasNumericValue.generated.js
var hasNumericValueDependencies = {
  isNumericDependencies,
  typedDependencies,
  createHasNumericValue
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesHelpClass.generated.js
var HelpDependencies = {
  parseDependencies,
  createHelpClass
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesHelp.generated.js
var helpDependencies = {
  HelpDependencies,
  typedDependencies,
  createHelp
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSmaller.generated.js
var smallerDependencies = {
  typedDependencies,
  createSmaller: createSmallerNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSqrt.generated.js
var sqrtDependencies = {
  typedDependencies,
  createSqrt
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesHypot.generated.js
var hypotDependencies = {
  absDependencies,
  addScalarDependencies,
  divideScalarDependencies,
  isPositiveDependencies,
  multiplyScalarDependencies,
  smallerDependencies,
  sqrtDependencies,
  typedDependencies,
  createHypot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIndex.generated.js
var indexDependencies = {
  createIndex
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesInfinity.generated.js
var InfinityDependencies = {
  createInfinity
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsNaN.generated.js
var isNaNDependencies = {
  typedDependencies,
  createIsNaN
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesIsPrime.generated.js
var isPrimeDependencies = {
  typedDependencies,
  createIsPrime
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLN10.generated.js
var LN10Dependencies = {
  createLN10
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLN2.generated.js
var LN2Dependencies = {
  createLN2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLOG10E.generated.js
var LOG10EDependencies = {
  createLOG10E
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLOG2E.generated.js
var LOG2EDependencies = {
  createLOG2E
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLargerEq.generated.js
var largerEqDependencies = {
  typedDependencies,
  createLargerEq: createLargerEqNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLcm.generated.js
var lcmDependencies = {
  typedDependencies,
  createLcm
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLeftShift.generated.js
var leftShiftDependencies = {
  typedDependencies,
  createLeftShift
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLgamma.generated.js
var lgammaDependencies = {
  typedDependencies,
  createLgamma
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLog.generated.js
var logDependencies = {
  typedDependencies,
  createLog
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLog10.generated.js
var log10Dependencies = {
  typedDependencies,
  createLog10
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLog1p.generated.js
var log1pDependencies = {
  typedDependencies,
  createLog1p
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesLog2.generated.js
var log2Dependencies = {
  typedDependencies,
  createLog2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMap.generated.js
var mapDependencies = {
  typedDependencies,
  createMap
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPartitionSelect.generated.js
var partitionSelectDependencies = {
  compareDependencies,
  isNaNDependencies,
  isNumericDependencies,
  typedDependencies,
  createPartitionSelect
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMedian.generated.js
var medianDependencies = {
  addDependencies,
  compareDependencies,
  divideDependencies,
  partitionSelectDependencies,
  typedDependencies,
  createMedian
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMad.generated.js
var madDependencies = {
  absDependencies,
  mapDependencies,
  medianDependencies,
  subtractDependencies,
  typedDependencies,
  createMad
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMapTransform.generated.js
var mapTransformDependencies = {
  typedDependencies,
  createMapTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMax.generated.js
var maxDependencies = {
  largerDependencies,
  numericDependencies,
  typedDependencies,
  createMax
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMaxTransform.generated.js
var maxTransformDependencies = {
  largerDependencies,
  numericDependencies,
  typedDependencies,
  createMaxTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMean.generated.js
var meanDependencies = {
  addDependencies,
  divideDependencies,
  typedDependencies,
  createMean
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMeanTransform.generated.js
var meanTransformDependencies = {
  addDependencies,
  divideDependencies,
  typedDependencies,
  createMeanTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMin.generated.js
var minDependencies = {
  numericDependencies,
  smallerDependencies,
  typedDependencies,
  createMin
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMinTransform.generated.js
var minTransformDependencies = {
  numericDependencies,
  smallerDependencies,
  typedDependencies,
  createMinTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMod.generated.js
var modDependencies = {
  typedDependencies,
  createMod
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMode.generated.js
var modeDependencies = {
  isNaNDependencies,
  isNumericDependencies,
  typedDependencies,
  createMode
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesMultinomial.generated.js
var multinomialDependencies = {
  addDependencies,
  divideDependencies,
  factorialDependencies,
  isIntegerDependencies,
  isPositiveDependencies,
  multiplyDependencies,
  typedDependencies,
  createMultinomial
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNaN.generated.js
var NaNDependencies = {
  createNaN
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNorm.generated.js
var normDependencies = {
  typedDependencies,
  createNorm
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNot.generated.js
var notDependencies = {
  typedDependencies,
  createNot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNthRoot.generated.js
var nthRootDependencies = {
  typedDependencies,
  createNthRoot
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesNull.generated.js
var nullDependencies = {
  createNull
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesOr.generated.js
var orDependencies = {
  typedDependencies,
  createOr
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesParserClass.generated.js
var ParserDependencies = {
  evaluateDependencies,
  createParserClass
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesParser.generated.js
var parserDependencies = {
  ParserDependencies,
  typedDependencies,
  createParser
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPermutations.generated.js
var permutationsDependencies = {
  factorialDependencies,
  typedDependencies,
  createPermutations
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPhi.generated.js
var phiDependencies = {
  createPhi
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPi.generated.js
var piDependencies = {
  createPi
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPickRandom.generated.js
var pickRandomDependencies = {
  typedDependencies,
  createPickRandom
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesPrint.generated.js
var printDependencies = {
  typedDependencies,
  createPrint
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesProd.generated.js
var prodDependencies = {
  multiplyScalarDependencies,
  numericDependencies,
  typedDependencies,
  createProd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesQuantileSeq.generated.js
var quantileSeqDependencies = {
  addDependencies,
  compareDependencies,
  multiplyDependencies,
  partitionSelectDependencies,
  typedDependencies,
  createQuantileSeq
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRandom.generated.js
var randomDependencies = {
  typedDependencies,
  createRandom: createRandomNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRandomInt.generated.js
var randomIntDependencies = {
  typedDependencies,
  createRandomInt
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSmallerEq.generated.js
var smallerEqDependencies = {
  typedDependencies,
  createSmallerEq: createSmallerEqNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRange.generated.js
var rangeDependencies = {
  matrixDependencies,
  largerDependencies,
  largerEqDependencies,
  smallerDependencies,
  smallerEqDependencies,
  typedDependencies,
  createRange
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRangeClass.generated.js
var RangeDependencies = {
  createRangeClass
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRangeTransform.generated.js
var rangeTransformDependencies = {
  matrixDependencies,
  largerDependencies,
  largerEqDependencies,
  smallerDependencies,
  smallerEqDependencies,
  typedDependencies,
  createRangeTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRationalize.generated.js
var rationalizeDependencies = {
  AccessorNodeDependencies,
  ArrayNodeDependencies,
  ConstantNodeDependencies,
  FunctionNodeDependencies,
  IndexNodeDependencies,
  ObjectNodeDependencies,
  OperatorNodeDependencies,
  ParenthesisNodeDependencies,
  SymbolNodeDependencies,
  addDependencies,
  divideDependencies,
  equalDependencies,
  isZeroDependencies,
  matrixDependencies,
  multiplyDependencies,
  parseDependencies,
  powDependencies,
  simplifyDependencies,
  simplifyConstantDependencies,
  simplifyCoreDependencies,
  subtractDependencies,
  typedDependencies,
  createRationalize
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesReplacer.generated.js
var replacerDependencies = {
  createReplacer
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesReviver.generated.js
var reviverDependencies = {
  createReviver
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRightArithShift.generated.js
var rightArithShiftDependencies = {
  typedDependencies,
  createRightArithShift
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesRightLogShift.generated.js
var rightLogShiftDependencies = {
  typedDependencies,
  createRightLogShift
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSQRT1_2.generated.js
var SQRT1_2Dependencies = {
  // eslint-disable-line camelcase
  createSQRT1_2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSQRT2.generated.js
var SQRT2Dependencies = {
  createSQRT2
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSec.generated.js
var secDependencies = {
  typedDependencies,
  createSec
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSech.generated.js
var sechDependencies = {
  typedDependencies,
  createSech
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSign.generated.js
var signDependencies = {
  typedDependencies,
  createSign
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSin.generated.js
var sinDependencies = {
  typedDependencies,
  createSin
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSinh.generated.js
var sinhDependencies = {
  typedDependencies,
  createSinh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSquare.generated.js
var squareDependencies = {
  typedDependencies,
  createSquare
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesVariance.generated.js
var varianceDependencies = {
  addDependencies,
  applyDependencies,
  divideDependencies,
  isNaNDependencies,
  multiplyDependencies,
  subtractDependencies,
  typedDependencies,
  createVariance
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesStd.generated.js
var stdDependencies = {
  mapDependencies,
  sqrtDependencies,
  typedDependencies,
  varianceDependencies,
  createStd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesStdTransform.generated.js
var stdTransformDependencies = {
  mapDependencies,
  sqrtDependencies,
  typedDependencies,
  varianceDependencies,
  createStdTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesString.generated.js
var stringDependencies = {
  typedDependencies,
  createString
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSubsetTransform.generated.js
var subsetTransformDependencies = {
  createSubsetTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSum.generated.js
var sumDependencies = {
  addDependencies,
  numericDependencies,
  typedDependencies,
  createSum
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesSumTransform.generated.js
var sumTransformDependencies = {
  addDependencies,
  numericDependencies,
  typedDependencies,
  createSumTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTan.generated.js
var tanDependencies = {
  typedDependencies,
  createTan
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTanh.generated.js
var tanhDependencies = {
  typedDependencies,
  createTanh
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTau.generated.js
var tauDependencies = {
  createTau
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTrue.generated.js
var trueDependencies = {
  createTrue
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesTypeOf.generated.js
var typeOfDependencies = {
  typedDependencies,
  createTypeOf
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesUnaryMinus.generated.js
var unaryMinusDependencies = {
  typedDependencies,
  createUnaryMinus
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesUnequal.generated.js
var unequalDependencies = {
  equalScalarDependencies,
  typedDependencies,
  createUnequal: createUnequalNumber
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesUppercaseE.generated.js
var EDependencies = {
  eDependencies,
  createUppercaseE
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesUppercasePi.generated.js
var PIDependencies = {
  piDependencies,
  createUppercasePi
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesVarianceTransform.generated.js
var varianceTransformDependencies = {
  addDependencies,
  applyDependencies,
  divideDependencies,
  isNaNDependencies,
  multiplyDependencies,
  subtractDependencies,
  typedDependencies,
  createVarianceTransform
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesVersion.generated.js
var versionDependencies = {
  createVersion
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesXgcd.generated.js
var xgcdDependencies = {
  typedDependencies,
  createXgcd
};

// node_modules/mathjs/lib/esm/entry/dependenciesNumber/dependenciesXor.generated.js
var xorDependencies = {
  typedDependencies,
  createXor
};

// node_modules/mathjs/lib/esm/entry/allFactoriesNumber.js
var all = factoriesNumber_exports;
export {
  AccessorNode,
  AccessorNodeDependencies,
  ArgumentsError,
  ArrayNode,
  ArrayNodeDependencies,
  AssignmentNode,
  AssignmentNodeDependencies,
  BlockNode,
  BlockNodeDependencies,
  Chain,
  ChainDependencies,
  ConditionalNode,
  ConditionalNodeDependencies,
  ConstantNode,
  ConstantNodeDependencies,
  DimensionError,
  EDependencies,
  FunctionAssignmentNode,
  FunctionAssignmentNodeDependencies,
  FunctionNode,
  FunctionNodeDependencies,
  Help,
  HelpDependencies,
  IndexError,
  IndexNode,
  IndexNodeDependencies,
  InfinityDependencies,
  LN10,
  LN10Dependencies,
  LN2,
  LN2Dependencies,
  LOG10E,
  LOG10EDependencies,
  LOG2E,
  LOG2EDependencies,
  NaNDependencies,
  Node,
  NodeDependencies,
  ObjectNode,
  ObjectNodeDependencies,
  OperatorNode,
  OperatorNodeDependencies,
  PIDependencies,
  ParenthesisNode,
  ParenthesisNodeDependencies,
  Parser,
  ParserDependencies,
  Range,
  RangeDependencies,
  RangeNode,
  RangeNodeDependencies,
  RelationalNode,
  RelationalNodeDependencies,
  ResultSet,
  ResultSetDependencies,
  SQRT1_2,
  SQRT1_2Dependencies,
  SQRT2,
  SQRT2Dependencies,
  SymbolNode,
  SymbolNodeDependencies,
  _Infinity,
  _NaN,
  _false,
  _null,
  _true,
  abs,
  absDependencies,
  acos,
  acosDependencies,
  acosh,
  acoshDependencies,
  acot,
  acotDependencies,
  acoth,
  acothDependencies,
  acsc,
  acscDependencies,
  acsch,
  acschDependencies,
  add,
  addDependencies,
  addScalar,
  addScalarDependencies,
  all,
  and,
  andDependencies,
  apply,
  applyDependencies,
  applyTransformDependencies,
  asec,
  asecDependencies,
  asech,
  asechDependencies,
  asin,
  asinDependencies,
  asinh,
  asinhDependencies,
  atan,
  atan2,
  atan2Dependencies,
  atanDependencies,
  atanh,
  atanhDependencies,
  bellNumbers,
  bellNumbersDependencies,
  bitAnd,
  bitAndDependencies,
  bitNot,
  bitNotDependencies,
  bitOr,
  bitOrDependencies,
  bitXor,
  bitXorDependencies,
  boolean,
  booleanDependencies,
  catalan,
  catalanDependencies,
  cbrt,
  cbrtDependencies,
  ceil,
  ceilDependencies,
  chain,
  chainDependencies,
  clone,
  cloneDependencies,
  combinations,
  combinationsDependencies,
  combinationsWithRep,
  combinationsWithRepDependencies,
  compare,
  compareDependencies,
  compareNatural,
  compareNaturalDependencies,
  compareText,
  compareTextDependencies,
  compile,
  compileDependencies,
  composition,
  compositionDependencies,
  config,
  cos,
  cosDependencies,
  cosh,
  coshDependencies,
  cot,
  cotDependencies,
  coth,
  cothDependencies,
  create,
  createAbs,
  createAccessorNode,
  createAcos,
  createAcosh,
  createAcot,
  createAcoth,
  createAcsc,
  createAcsch,
  createAdd,
  createAddScalar,
  createAnd,
  createApply,
  createApplyTransform,
  createArrayNode,
  createAsec,
  createAsech,
  createAsin,
  createAsinh,
  createAssignmentNode,
  createAtan,
  createAtan2,
  createAtanh,
  createBellNumbers,
  createBitAnd,
  createBitNot,
  createBitOr,
  createBitXor,
  createBlockNode,
  createBoolean,
  createCatalan,
  createCbrt,
  createCeilNumber as createCeil,
  createChain,
  createChainClass,
  createClone,
  createCombinations,
  createCombinationsWithRep,
  createCompareNumber as createCompare,
  createCompareNatural,
  createCompareTextNumber as createCompareText,
  createCompile,
  createComposition,
  createConditionalNode,
  createConstantNode,
  createCos,
  createCosh,
  createCot,
  createCoth,
  createCsc,
  createCsch,
  createCube,
  createCumSum,
  createCumSumTransform,
  createDeepEqual,
  createDerivative,
  createDivide,
  createDivideScalar,
  createE,
  createEqualNumber as createEqual,
  createEqualScalarNumber as createEqualScalar,
  createEqualText,
  createErf,
  createEvaluate,
  createExp,
  createExpm1,
  createFactorial,
  createFalse,
  createFilter,
  createFilterTransform,
  createFixNumber as createFix,
  createFloorNumber as createFloor,
  createForEach,
  createForEachTransform,
  createFormat,
  createFunctionAssignmentNode,
  createFunctionNode,
  createGamma,
  createGcd,
  createHasNumericValue,
  createHelp,
  createHelpClass,
  createHypot,
  createIndex,
  createIndexNode,
  createInfinity,
  createIsInteger,
  createIsNaN,
  createIsNegative,
  createIsNumeric,
  createIsPositive,
  createIsPrime,
  createIsZero,
  createLN10,
  createLN2,
  createLOG10E,
  createLOG2E,
  createLargerNumber as createLarger,
  createLargerEqNumber as createLargerEq,
  createLcm,
  createLeftShift,
  createLgamma,
  createLog,
  createLog10,
  createLog1p,
  createLog2,
  createMad,
  createMap,
  createMapTransform,
  createMatrix,
  createMax,
  createMaxTransform,
  createMean,
  createMeanTransform,
  createMedian,
  createMin,
  createMinTransform,
  createMod,
  createMode,
  createMultinomial,
  createMultiply,
  createMultiplyScalar,
  createNaN,
  createNode,
  createNorm,
  createNot,
  createNthRoot,
  createNull,
  createNumber,
  createNumeric,
  createObjectNode,
  createOperatorNode,
  createOr,
  createParenthesisNode,
  createParse,
  createParser,
  createParserClass,
  createPartitionSelect,
  createPermutations,
  createPhi,
  createPi,
  createPickRandom,
  createPow,
  createPrint,
  createProd,
  createQuantileSeq,
  createRandomNumber as createRandom,
  createRandomInt,
  createRange,
  createRangeClass,
  createRangeNode,
  createRangeTransform,
  createRationalize,
  createRelationalNode,
  createReplacer,
  createResolve,
  createResultSet,
  createReviver,
  createRightArithShift,
  createRightLogShift,
  createRound,
  createSQRT1_2,
  createSQRT2,
  createSec,
  createSech,
  createSign,
  createSimplify,
  createSimplifyConstant,
  createSimplifyCore,
  createSin,
  createSinh,
  createSize,
  createSmallerNumber as createSmaller,
  createSmallerEqNumber as createSmallerEq,
  createSqrt,
  createSquare,
  createStd,
  createStdTransform,
  createStirlingS2,
  createString,
  createSubset,
  createSubsetTransform,
  createSubtract,
  createSum,
  createSumTransform,
  createSymbolNode,
  createTan,
  createTanh,
  createTau,
  createTrue,
  createTypeOf,
  createTyped,
  createUnaryMinus,
  createUnaryPlus,
  createUnequalNumber as createUnequal,
  createUppercaseE,
  createUppercasePi,
  createVariance,
  createVarianceTransform,
  createVersion,
  createXgcd,
  createXor,
  csc,
  cscDependencies,
  csch,
  cschDependencies,
  cube,
  cubeDependencies,
  cumsum,
  cumsumDependencies,
  cumsumTransformDependencies,
  deepEqual,
  deepEqualDependencies,
  derivative,
  derivativeDependencies,
  divide,
  divideDependencies,
  divideScalar,
  divideScalarDependencies,
  embeddedDocs as docs,
  e,
  eDependencies,
  equal,
  equalDependencies,
  equalScalar,
  equalScalarDependencies,
  equalText,
  equalTextDependencies,
  erf,
  erfDependencies,
  evaluate,
  evaluateDependencies,
  exp,
  expDependencies,
  expm1,
  expm1Dependencies,
  factorial,
  factorialDependencies,
  factory,
  falseDependencies,
  filter,
  filterDependencies,
  filterTransformDependencies,
  fix,
  fixDependencies,
  floor,
  floorDependencies,
  forEach,
  forEachDependencies,
  forEachTransformDependencies,
  format,
  formatDependencies,
  gamma,
  gammaDependencies,
  gcd,
  gcdDependencies,
  hasNumericValue,
  hasNumericValueDependencies,
  help,
  helpDependencies,
  hypot,
  hypotDependencies,
  index,
  indexDependencies,
  isAccessorNode,
  isArray,
  isArrayNode,
  isAssignmentNode,
  isBigNumber,
  isBlockNode,
  isBoolean,
  isChain,
  isCollection,
  isComplex,
  isConditionalNode,
  isConstantNode,
  isDate,
  isDenseMatrix,
  isFraction,
  isFunction,
  isFunctionAssignmentNode,
  isFunctionNode,
  isHelp,
  isIndex,
  isIndexNode,
  isInteger,
  isIntegerDependencies,
  isMatrix,
  isNaN,
  isNaNDependencies,
  isNegative,
  isNegativeDependencies,
  isNode,
  isNull,
  isNumber,
  isNumeric,
  isNumericDependencies,
  isObject,
  isObjectNode,
  isOperatorNode,
  isParenthesisNode,
  isPositive,
  isPositiveDependencies,
  isPrime,
  isPrimeDependencies,
  isRange,
  isRangeNode,
  isRegExp,
  isRelationalNode,
  isResultSet,
  isSparseMatrix,
  isString,
  isSymbolNode,
  isUndefined,
  isUnit,
  isZero,
  isZeroDependencies,
  larger,
  largerDependencies,
  largerEq,
  largerEqDependencies,
  lcm,
  lcmDependencies,
  leftShift,
  leftShiftDependencies,
  lgamma,
  lgammaDependencies,
  log,
  log10,
  log10Dependencies,
  log1p,
  log1pDependencies,
  log2,
  log2Dependencies,
  logDependencies,
  mad,
  madDependencies,
  map,
  mapDependencies,
  mapTransformDependencies,
  matrix,
  matrixDependencies,
  max,
  maxDependencies,
  maxTransformDependencies,
  mean,
  meanDependencies,
  meanTransformDependencies,
  median,
  medianDependencies,
  min,
  minDependencies,
  minTransformDependencies,
  mod,
  modDependencies,
  mode,
  modeDependencies,
  multinomial,
  multinomialDependencies,
  multiply,
  multiplyDependencies,
  multiplyScalar,
  multiplyScalarDependencies,
  norm,
  normDependencies,
  not,
  notDependencies,
  nthRoot,
  nthRootDependencies,
  nullDependencies,
  number,
  numberDependencies,
  numeric,
  numericDependencies,
  or,
  orDependencies,
  parse,
  parseDependencies,
  parser,
  parserDependencies,
  partitionSelect,
  partitionSelectDependencies,
  permutations,
  permutationsDependencies,
  phi,
  phiDependencies,
  pi,
  piDependencies,
  pickRandom,
  pickRandomDependencies,
  pow,
  powDependencies,
  print,
  printDependencies,
  prod,
  prodDependencies,
  quantileSeq,
  quantileSeqDependencies,
  random,
  randomDependencies,
  randomInt,
  randomIntDependencies,
  range,
  rangeDependencies,
  rangeTransformDependencies,
  rationalize,
  rationalizeDependencies,
  replacer,
  replacerDependencies,
  resolve,
  resolveDependencies,
  reviver,
  reviverDependencies,
  rightArithShift,
  rightArithShiftDependencies,
  rightLogShift,
  rightLogShiftDependencies,
  round,
  roundDependencies,
  sec,
  secDependencies,
  sech,
  sechDependencies,
  sign,
  signDependencies,
  simplify,
  simplifyConstant,
  simplifyConstantDependencies,
  simplifyCore,
  simplifyCoreDependencies,
  simplifyDependencies,
  sin,
  sinDependencies,
  sinh,
  sinhDependencies,
  size,
  sizeDependencies,
  smaller,
  smallerDependencies,
  smallerEq,
  smallerEqDependencies,
  sqrt,
  sqrtDependencies,
  square,
  squareDependencies,
  std,
  stdDependencies,
  stdTransformDependencies,
  stirlingS2,
  stirlingS2Dependencies,
  string,
  stringDependencies,
  subset,
  subsetDependencies,
  subsetTransformDependencies,
  subtract,
  subtractDependencies,
  sum,
  sumDependencies,
  sumTransformDependencies,
  tan,
  tanDependencies,
  tanh,
  tanhDependencies,
  tau,
  tauDependencies,
  trueDependencies,
  typeOf,
  typeOfDependencies,
  typed,
  typedDependencies,
  unaryMinus,
  unaryMinusDependencies,
  unaryPlus,
  unaryPlusDependencies,
  unequal,
  unequalDependencies,
  variance,
  varianceDependencies,
  varianceTransformDependencies,
  version,
  versionDependencies,
  xgcd,
  xgcdDependencies,
  xor,
  xorDependencies
};
//# sourceMappingURL=mathjs_number.js.map
